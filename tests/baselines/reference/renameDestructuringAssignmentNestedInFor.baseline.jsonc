=== RenameOptions ===
{
 "findInStrings": false,
 "findInComments": false,
 "providePrefixAndSuffixTextForRename": true
}
/*====== /tests/cases/fourslash/renameDestructuringAssignmentNestedInFor.ts ======*/

interface MultiRobot {
    name: string;
    skills: {
        [|RENAME|]: string;
        secondary: string;
    };
}
let multiRobot: MultiRobot, primary: string, secondary: string, primaryA: string, secondaryA: string, i: number;
for ({ skills: { RENAME: primaryA, secondary: secondaryA } } = multiRobot, i = 0; i < 1; i++) {
    primaryA;
}
for ({ skills: { RENAME: primary/*END SUFFIX*/, secondary } } = multiRobot, i = 0; i < 1; i++) {
    primary;
}

=== 0 ===
// === /tests/cases/fourslash/renameDestructuringAssignmentNestedInFor.ts ===
// interface MultiRobot {
//     name: string;
//     skills: {
//         [|primary|]: string;
//         secondary: string;
//     };
// }
// let multiRobot: MultiRobot, primary: string, secondary: string, primaryA: string, secondaryA: string, i: number;
// for ({ skills: { primary: primaryA, secondary: secondaryA } } = multiRobot, i = 0; i < 1; i++) {
//     primaryA;
// }
// for ({ skills: { primary, secondary } } = multiRobot, i = 0; i < 1; i++) {
//     primary;
// }
=== ContextSpan ===
  // === /tests/cases/fourslash/renameDestructuringAssignmentNestedInFor.ts ===
  // interface MultiRobot {
  //     name: string;
  //     skills: {
  //         [|primary: string;|]
  //         secondary: string;
  //     };
  // }
  // let multiRobot: MultiRobot, primary: string, secondary: string, primaryA: string, secondaryA: string, i: number;
  // for ({ skills: { primary: primaryA, secondary: secondaryA } } = multiRobot, i = 0; i < 1; i++) {
  //     primaryA;
  // }
  // for ({ skills: { primary, secondary } } = multiRobot, i = 0; i < 1; i++) {
  //     primary;
  // }
=== 1 ===
// === /tests/cases/fourslash/renameDestructuringAssignmentNestedInFor.ts ===
// interface MultiRobot {
//     name: string;
//     skills: {
//         primary: string;
//         secondary: string;
//     };
// }
// let multiRobot: MultiRobot, primary: string, secondary: string, primaryA: string, secondaryA: string, i: number;
// for ({ skills: { [|primary|]: primaryA, secondary: secondaryA } } = multiRobot, i = 0; i < 1; i++) {
//     primaryA;
// }
// for ({ skills: { primary, secondary } } = multiRobot, i = 0; i < 1; i++) {
//     primary;
// }
=== ContextSpan ===
  // === /tests/cases/fourslash/renameDestructuringAssignmentNestedInFor.ts ===
  // interface MultiRobot {
  //     name: string;
  //     skills: {
  //         primary: string;
  //         secondary: string;
  //     };
  // }
  // let multiRobot: MultiRobot, primary: string, secondary: string, primaryA: string, secondaryA: string, i: number;
  // for ([|{ skills: { primary: primaryA, secondary: secondaryA } } = multiRobot|], i = 0; i < 1; i++) {
  //     primaryA;
  // }
  // for ({ skills: { primary, secondary } } = multiRobot, i = 0; i < 1; i++) {
  //     primary;
  // }
=== 2 ===
// === /tests/cases/fourslash/renameDestructuringAssignmentNestedInFor.ts ===
// interface MultiRobot {
//     name: string;
//     skills: {
//         primary: string;
//         secondary: string;
//     };
// }
// let multiRobot: MultiRobot, primary: string, secondary: string, primaryA: string, secondaryA: string, i: number;
// for ({ skills: { primary: primaryA, secondary: secondaryA } } = multiRobot, i = 0; i < 1; i++) {
//     primaryA;
// }
// for ({ skills: { [|primary|], secondary } } = multiRobot, i = 0; i < 1; i++) {
//     primary;
// }
=== ContextSpan ===
  // === /tests/cases/fourslash/renameDestructuringAssignmentNestedInFor.ts ===
  // interface MultiRobot {
  //     name: string;
  //     skills: {
  //         primary: string;
  //         secondary: string;
  //     };
  // }
  // let multiRobot: MultiRobot, primary: string, secondary: string, primaryA: string, secondaryA: string, i: number;
  // for ({ skills: { primary: primaryA, secondary: secondaryA } } = multiRobot, i = 0; i < 1; i++) {
  //     primaryA;
  // }
  // for ([|{ skills: { primary, secondary } } = multiRobot|], i = 0; i < 1; i++) {
  //     primary;
  // }


[
  {
    "textSpan": {
      "start": 63,
      "length": 7
    },
    "fileName": "/tests/cases/fourslash/renameDestructuringAssignmentNestedInFor.ts",
    "contextSpan": {
      "start": 63,
      "length": 16
    }
  },
  {
    "textSpan": {
      "start": 246,
      "length": 7
    },
    "fileName": "/tests/cases/fourslash/renameDestructuringAssignmentNestedInFor.ts",
    "contextSpan": {
      "start": 234,
      "length": 69
    }
  },
  {
    "textSpan": {
      "start": 359,
      "length": 7
    },
    "fileName": "/tests/cases/fourslash/renameDestructuringAssignmentNestedInFor.ts",
    "contextSpan": {
      "start": 347,
      "length": 47
    },
    "suffixText": ": primary"
  }
]

=== RenameOptions ===
{
 "findInStrings": false,
 "findInComments": false,
 "providePrefixAndSuffixTextForRename": true
}
/*====== /tests/cases/fourslash/renameDestructuringAssignmentNestedInFor.ts ======*/

interface MultiRobot {
    name: string;
    skills: {
        RENAME: string;
        secondary: string;
    };
}
let multiRobot: MultiRobot, primary: string, secondary: string, primaryA: string, secondaryA: string, i: number;
for ({ skills: { [|RENAME|]: primaryA, secondary: secondaryA } } = multiRobot, i = 0; i < 1; i++) {
    primaryA;
}
for ({ skills: { RENAME: primary/*END SUFFIX*/, secondary } } = multiRobot, i = 0; i < 1; i++) {
    primary;
}

=== 0 ===
// === /tests/cases/fourslash/renameDestructuringAssignmentNestedInFor.ts ===
// interface MultiRobot {
//     name: string;
//     skills: {
//         [|primary|]: string;
//         secondary: string;
//     };
// }
// let multiRobot: MultiRobot, primary: string, secondary: string, primaryA: string, secondaryA: string, i: number;
// for ({ skills: { primary: primaryA, secondary: secondaryA } } = multiRobot, i = 0; i < 1; i++) {
//     primaryA;
// }
// for ({ skills: { primary, secondary } } = multiRobot, i = 0; i < 1; i++) {
//     primary;
// }
=== ContextSpan ===
  // === /tests/cases/fourslash/renameDestructuringAssignmentNestedInFor.ts ===
  // interface MultiRobot {
  //     name: string;
  //     skills: {
  //         [|primary: string;|]
  //         secondary: string;
  //     };
  // }
  // let multiRobot: MultiRobot, primary: string, secondary: string, primaryA: string, secondaryA: string, i: number;
  // for ({ skills: { primary: primaryA, secondary: secondaryA } } = multiRobot, i = 0; i < 1; i++) {
  //     primaryA;
  // }
  // for ({ skills: { primary, secondary } } = multiRobot, i = 0; i < 1; i++) {
  //     primary;
  // }
=== 1 ===
// === /tests/cases/fourslash/renameDestructuringAssignmentNestedInFor.ts ===
// interface MultiRobot {
//     name: string;
//     skills: {
//         primary: string;
//         secondary: string;
//     };
// }
// let multiRobot: MultiRobot, primary: string, secondary: string, primaryA: string, secondaryA: string, i: number;
// for ({ skills: { [|primary|]: primaryA, secondary: secondaryA } } = multiRobot, i = 0; i < 1; i++) {
//     primaryA;
// }
// for ({ skills: { primary, secondary } } = multiRobot, i = 0; i < 1; i++) {
//     primary;
// }
=== ContextSpan ===
  // === /tests/cases/fourslash/renameDestructuringAssignmentNestedInFor.ts ===
  // interface MultiRobot {
  //     name: string;
  //     skills: {
  //         primary: string;
  //         secondary: string;
  //     };
  // }
  // let multiRobot: MultiRobot, primary: string, secondary: string, primaryA: string, secondaryA: string, i: number;
  // for ([|{ skills: { primary: primaryA, secondary: secondaryA } } = multiRobot|], i = 0; i < 1; i++) {
  //     primaryA;
  // }
  // for ({ skills: { primary, secondary } } = multiRobot, i = 0; i < 1; i++) {
  //     primary;
  // }
=== 2 ===
// === /tests/cases/fourslash/renameDestructuringAssignmentNestedInFor.ts ===
// interface MultiRobot {
//     name: string;
//     skills: {
//         primary: string;
//         secondary: string;
//     };
// }
// let multiRobot: MultiRobot, primary: string, secondary: string, primaryA: string, secondaryA: string, i: number;
// for ({ skills: { primary: primaryA, secondary: secondaryA } } = multiRobot, i = 0; i < 1; i++) {
//     primaryA;
// }
// for ({ skills: { [|primary|], secondary } } = multiRobot, i = 0; i < 1; i++) {
//     primary;
// }
=== ContextSpan ===
  // === /tests/cases/fourslash/renameDestructuringAssignmentNestedInFor.ts ===
  // interface MultiRobot {
  //     name: string;
  //     skills: {
  //         primary: string;
  //         secondary: string;
  //     };
  // }
  // let multiRobot: MultiRobot, primary: string, secondary: string, primaryA: string, secondaryA: string, i: number;
  // for ({ skills: { primary: primaryA, secondary: secondaryA } } = multiRobot, i = 0; i < 1; i++) {
  //     primaryA;
  // }
  // for ([|{ skills: { primary, secondary } } = multiRobot|], i = 0; i < 1; i++) {
  //     primary;
  // }


[
  {
    "textSpan": {
      "start": 63,
      "length": 7
    },
    "fileName": "/tests/cases/fourslash/renameDestructuringAssignmentNestedInFor.ts",
    "contextSpan": {
      "start": 63,
      "length": 16
    }
  },
  {
    "textSpan": {
      "start": 246,
      "length": 7
    },
    "fileName": "/tests/cases/fourslash/renameDestructuringAssignmentNestedInFor.ts",
    "contextSpan": {
      "start": 234,
      "length": 69
    }
  },
  {
    "textSpan": {
      "start": 359,
      "length": 7
    },
    "fileName": "/tests/cases/fourslash/renameDestructuringAssignmentNestedInFor.ts",
    "contextSpan": {
      "start": 347,
      "length": 47
    },
    "suffixText": ": primary"
  }
]

=== RenameOptions ===
{
 "findInStrings": false,
 "findInComments": false,
 "providePrefixAndSuffixTextForRename": true
}
/*====== /tests/cases/fourslash/renameDestructuringAssignmentNestedInFor.ts ======*/

interface MultiRobot {
    name: string;
    skills: {
        primary: string;
        secondary: string;
    };
}
let multiRobot: MultiRobot, [|RENAME|]: string, secondary: string, primaryA: string, secondaryA: string, i: number;
for ({ skills: { primary: primaryA, secondary: secondaryA } } = multiRobot, i = 0; i < 1; i++) {
    primaryA;
}
for ({ skills: { /*START PREFIX*/primary: RENAME, secondary } } = multiRobot, i = 0; i < 1; i++) {
    RENAME;
}

=== 0 ===
// === /tests/cases/fourslash/renameDestructuringAssignmentNestedInFor.ts ===
// interface MultiRobot {
//     name: string;
//     skills: {
//         primary: string;
//         secondary: string;
//     };
// }
// let multiRobot: MultiRobot, [|primary|]: string, secondary: string, primaryA: string, secondaryA: string, i: number;
// for ({ skills: { primary: primaryA, secondary: secondaryA } } = multiRobot, i = 0; i < 1; i++) {
//     primaryA;
// }
// for ({ skills: { primary, secondary } } = multiRobot, i = 0; i < 1; i++) {
//     primary;
// }
=== ContextSpan ===
  // === /tests/cases/fourslash/renameDestructuringAssignmentNestedInFor.ts ===
  // interface MultiRobot {
  //     name: string;
  //     skills: {
  //         primary: string;
  //         secondary: string;
  //     };
  // }
  // let multiRobot: MultiRobot, [|primary: string|], secondary: string, primaryA: string, secondaryA: string, i: number;
  // for ({ skills: { primary: primaryA, secondary: secondaryA } } = multiRobot, i = 0; i < 1; i++) {
  //     primaryA;
  // }
  // for ({ skills: { primary, secondary } } = multiRobot, i = 0; i < 1; i++) {
  //     primary;
  // }
=== 1 ===
// === /tests/cases/fourslash/renameDestructuringAssignmentNestedInFor.ts ===
// interface MultiRobot {
//     name: string;
//     skills: {
//         primary: string;
//         secondary: string;
//     };
// }
// let multiRobot: MultiRobot, primary: string, secondary: string, primaryA: string, secondaryA: string, i: number;
// for ({ skills: { primary: primaryA, secondary: secondaryA } } = multiRobot, i = 0; i < 1; i++) {
//     primaryA;
// }
// for ({ skills: { [|primary|], secondary } } = multiRobot, i = 0; i < 1; i++) {
//     primary;
// }
=== ContextSpan ===
  // === /tests/cases/fourslash/renameDestructuringAssignmentNestedInFor.ts ===
  // interface MultiRobot {
  //     name: string;
  //     skills: {
  //         primary: string;
  //         secondary: string;
  //     };
  // }
  // let multiRobot: MultiRobot, primary: string, secondary: string, primaryA: string, secondaryA: string, i: number;
  // for ({ skills: { primary: primaryA, secondary: secondaryA } } = multiRobot, i = 0; i < 1; i++) {
  //     primaryA;
  // }
  // for ([|{ skills: { primary, secondary } } = multiRobot|], i = 0; i < 1; i++) {
  //     primary;
  // }
=== 2 ===
// === /tests/cases/fourslash/renameDestructuringAssignmentNestedInFor.ts ===
// interface MultiRobot {
//     name: string;
//     skills: {
//         primary: string;
//         secondary: string;
//     };
// }
// let multiRobot: MultiRobot, primary: string, secondary: string, primaryA: string, secondaryA: string, i: number;
// for ({ skills: { primary: primaryA, secondary: secondaryA } } = multiRobot, i = 0; i < 1; i++) {
//     primaryA;
// }
// for ({ skills: { primary, secondary } } = multiRobot, i = 0; i < 1; i++) {
//     [|primary|];
// }


[
  {
    "textSpan": {
      "start": 144,
      "length": 7
    },
    "fileName": "/tests/cases/fourslash/renameDestructuringAssignmentNestedInFor.ts",
    "contextSpan": {
      "start": 144,
      "length": 15
    }
  },
  {
    "textSpan": {
      "start": 359,
      "length": 7
    },
    "fileName": "/tests/cases/fourslash/renameDestructuringAssignmentNestedInFor.ts",
    "contextSpan": {
      "start": 347,
      "length": 47
    },
    "prefixText": "primary: "
  },
  {
    "textSpan": {
      "start": 421,
      "length": 7
    },
    "fileName": "/tests/cases/fourslash/renameDestructuringAssignmentNestedInFor.ts"
  }
]

=== RenameOptions ===
{
 "findInStrings": false,
 "findInComments": false,
 "providePrefixAndSuffixTextForRename": true
}
/*====== /tests/cases/fourslash/renameDestructuringAssignmentNestedInFor.ts ======*/

interface MultiRobot {
    name: string;
    skills: {
        primary: string;
        secondary: string;
    };
}
let multiRobot: MultiRobot, RENAME: string, secondary: string, primaryA: string, secondaryA: string, i: number;
for ({ skills: { primary: primaryA, secondary: secondaryA } } = multiRobot, i = 0; i < 1; i++) {
    primaryA;
}
for ({ skills: { /*START PREFIX*/primary: [|RENAME|], secondary } } = multiRobot, i = 0; i < 1; i++) {
    RENAME;
}

=== 0 ===
// === /tests/cases/fourslash/renameDestructuringAssignmentNestedInFor.ts ===
// interface MultiRobot {
//     name: string;
//     skills: {
//         primary: string;
//         secondary: string;
//     };
// }
// let multiRobot: MultiRobot, [|primary|]: string, secondary: string, primaryA: string, secondaryA: string, i: number;
// for ({ skills: { primary: primaryA, secondary: secondaryA } } = multiRobot, i = 0; i < 1; i++) {
//     primaryA;
// }
// for ({ skills: { primary, secondary } } = multiRobot, i = 0; i < 1; i++) {
//     primary;
// }
=== ContextSpan ===
  // === /tests/cases/fourslash/renameDestructuringAssignmentNestedInFor.ts ===
  // interface MultiRobot {
  //     name: string;
  //     skills: {
  //         primary: string;
  //         secondary: string;
  //     };
  // }
  // let multiRobot: MultiRobot, [|primary: string|], secondary: string, primaryA: string, secondaryA: string, i: number;
  // for ({ skills: { primary: primaryA, secondary: secondaryA } } = multiRobot, i = 0; i < 1; i++) {
  //     primaryA;
  // }
  // for ({ skills: { primary, secondary } } = multiRobot, i = 0; i < 1; i++) {
  //     primary;
  // }
=== 1 ===
// === /tests/cases/fourslash/renameDestructuringAssignmentNestedInFor.ts ===
// interface MultiRobot {
//     name: string;
//     skills: {
//         primary: string;
//         secondary: string;
//     };
// }
// let multiRobot: MultiRobot, primary: string, secondary: string, primaryA: string, secondaryA: string, i: number;
// for ({ skills: { primary: primaryA, secondary: secondaryA } } = multiRobot, i = 0; i < 1; i++) {
//     primaryA;
// }
// for ({ skills: { [|primary|], secondary } } = multiRobot, i = 0; i < 1; i++) {
//     primary;
// }
=== ContextSpan ===
  // === /tests/cases/fourslash/renameDestructuringAssignmentNestedInFor.ts ===
  // interface MultiRobot {
  //     name: string;
  //     skills: {
  //         primary: string;
  //         secondary: string;
  //     };
  // }
  // let multiRobot: MultiRobot, primary: string, secondary: string, primaryA: string, secondaryA: string, i: number;
  // for ({ skills: { primary: primaryA, secondary: secondaryA } } = multiRobot, i = 0; i < 1; i++) {
  //     primaryA;
  // }
  // for ([|{ skills: { primary, secondary } } = multiRobot|], i = 0; i < 1; i++) {
  //     primary;
  // }
=== 2 ===
// === /tests/cases/fourslash/renameDestructuringAssignmentNestedInFor.ts ===
// interface MultiRobot {
//     name: string;
//     skills: {
//         primary: string;
//         secondary: string;
//     };
// }
// let multiRobot: MultiRobot, primary: string, secondary: string, primaryA: string, secondaryA: string, i: number;
// for ({ skills: { primary: primaryA, secondary: secondaryA } } = multiRobot, i = 0; i < 1; i++) {
//     primaryA;
// }
// for ({ skills: { primary, secondary } } = multiRobot, i = 0; i < 1; i++) {
//     [|primary|];
// }


[
  {
    "textSpan": {
      "start": 144,
      "length": 7
    },
    "fileName": "/tests/cases/fourslash/renameDestructuringAssignmentNestedInFor.ts",
    "contextSpan": {
      "start": 144,
      "length": 15
    }
  },
  {
    "textSpan": {
      "start": 359,
      "length": 7
    },
    "fileName": "/tests/cases/fourslash/renameDestructuringAssignmentNestedInFor.ts",
    "contextSpan": {
      "start": 347,
      "length": 47
    },
    "prefixText": "primary: "
  },
  {
    "textSpan": {
      "start": 421,
      "length": 7
    },
    "fileName": "/tests/cases/fourslash/renameDestructuringAssignmentNestedInFor.ts"
  }
]

=== RenameOptions ===
{
 "findInStrings": false,
 "findInComments": false,
 "providePrefixAndSuffixTextForRename": true
}
/*====== /tests/cases/fourslash/renameDestructuringAssignmentNestedInFor.ts ======*/

interface MultiRobot {
    name: string;
    skills: {
        primary: string;
        secondary: string;
    };
}
let multiRobot: MultiRobot, RENAME: string, secondary: string, primaryA: string, secondaryA: string, i: number;
for ({ skills: { primary: primaryA, secondary: secondaryA } } = multiRobot, i = 0; i < 1; i++) {
    primaryA;
}
for ({ skills: { /*START PREFIX*/primary: RENAME, secondary } } = multiRobot, i = 0; i < 1; i++) {
    [|RENAME|];
}

=== 0 ===
// === /tests/cases/fourslash/renameDestructuringAssignmentNestedInFor.ts ===
// interface MultiRobot {
//     name: string;
//     skills: {
//         primary: string;
//         secondary: string;
//     };
// }
// let multiRobot: MultiRobot, [|primary|]: string, secondary: string, primaryA: string, secondaryA: string, i: number;
// for ({ skills: { primary: primaryA, secondary: secondaryA } } = multiRobot, i = 0; i < 1; i++) {
//     primaryA;
// }
// for ({ skills: { primary, secondary } } = multiRobot, i = 0; i < 1; i++) {
//     primary;
// }
=== ContextSpan ===
  // === /tests/cases/fourslash/renameDestructuringAssignmentNestedInFor.ts ===
  // interface MultiRobot {
  //     name: string;
  //     skills: {
  //         primary: string;
  //         secondary: string;
  //     };
  // }
  // let multiRobot: MultiRobot, [|primary: string|], secondary: string, primaryA: string, secondaryA: string, i: number;
  // for ({ skills: { primary: primaryA, secondary: secondaryA } } = multiRobot, i = 0; i < 1; i++) {
  //     primaryA;
  // }
  // for ({ skills: { primary, secondary } } = multiRobot, i = 0; i < 1; i++) {
  //     primary;
  // }
=== 1 ===
// === /tests/cases/fourslash/renameDestructuringAssignmentNestedInFor.ts ===
// interface MultiRobot {
//     name: string;
//     skills: {
//         primary: string;
//         secondary: string;
//     };
// }
// let multiRobot: MultiRobot, primary: string, secondary: string, primaryA: string, secondaryA: string, i: number;
// for ({ skills: { primary: primaryA, secondary: secondaryA } } = multiRobot, i = 0; i < 1; i++) {
//     primaryA;
// }
// for ({ skills: { [|primary|], secondary } } = multiRobot, i = 0; i < 1; i++) {
//     primary;
// }
=== ContextSpan ===
  // === /tests/cases/fourslash/renameDestructuringAssignmentNestedInFor.ts ===
  // interface MultiRobot {
  //     name: string;
  //     skills: {
  //         primary: string;
  //         secondary: string;
  //     };
  // }
  // let multiRobot: MultiRobot, primary: string, secondary: string, primaryA: string, secondaryA: string, i: number;
  // for ({ skills: { primary: primaryA, secondary: secondaryA } } = multiRobot, i = 0; i < 1; i++) {
  //     primaryA;
  // }
  // for ([|{ skills: { primary, secondary } } = multiRobot|], i = 0; i < 1; i++) {
  //     primary;
  // }
=== 2 ===
// === /tests/cases/fourslash/renameDestructuringAssignmentNestedInFor.ts ===
// interface MultiRobot {
//     name: string;
//     skills: {
//         primary: string;
//         secondary: string;
//     };
// }
// let multiRobot: MultiRobot, primary: string, secondary: string, primaryA: string, secondaryA: string, i: number;
// for ({ skills: { primary: primaryA, secondary: secondaryA } } = multiRobot, i = 0; i < 1; i++) {
//     primaryA;
// }
// for ({ skills: { primary, secondary } } = multiRobot, i = 0; i < 1; i++) {
//     [|primary|];
// }


[
  {
    "textSpan": {
      "start": 144,
      "length": 7
    },
    "fileName": "/tests/cases/fourslash/renameDestructuringAssignmentNestedInFor.ts",
    "contextSpan": {
      "start": 144,
      "length": 15
    }
  },
  {
    "textSpan": {
      "start": 359,
      "length": 7
    },
    "fileName": "/tests/cases/fourslash/renameDestructuringAssignmentNestedInFor.ts",
    "contextSpan": {
      "start": 347,
      "length": 47
    },
    "prefixText": "primary: "
  },
  {
    "textSpan": {
      "start": 421,
      "length": 7
    },
    "fileName": "/tests/cases/fourslash/renameDestructuringAssignmentNestedInFor.ts"
  }
]