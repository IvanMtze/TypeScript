=== RenameOptions ===
{
 "findInStrings": false,
 "findInComments": false,
 "providePrefixAndSuffixTextForRename": true
}
/*====== /tests/cases/fourslash/renameDestructuringClassProperty.ts ======*/

class A {
    [|RENAME|]: string;
}
class B {
    syntax1(a: A): void {
        let { RENAME: foo/*END SUFFIX*/ } = a;
    }
    syntax2(a: A): void {
        let { RENAME: foo } = a;
    }
    syntax11(a: A): void {
        let { RENAME: foo/*END SUFFIX*/ } = a;
        foo = "newString";
    }
}

=== 0 ===
// === /tests/cases/fourslash/renameDestructuringClassProperty.ts ===
// class A {
//     [|foo|]: string;
// }
// class B {
//     syntax1(a: A): void {
//         let { foo } = a;
//     }
//     syntax2(a: A): void {
//         let { foo: foo } = a;
//     }
//     syntax11(a: A): void {
//         let { foo } = a;
//         foo = "newString";
//     }
// }
=== ContextSpan ===
  // === /tests/cases/fourslash/renameDestructuringClassProperty.ts ===
  // class A {
  //     [|foo: string;|]
  // }
  // class B {
  //     syntax1(a: A): void {
  //         let { foo } = a;
  //     }
  //     syntax2(a: A): void {
  //         let { foo: foo } = a;
  //     }
  //     syntax11(a: A): void {
  //         let { foo } = a;
  //         foo = "newString";
  //     }
  // }
=== 1 ===
// === /tests/cases/fourslash/renameDestructuringClassProperty.ts ===
// class A {
//     foo: string;
// }
// class B {
//     syntax1(a: A): void {
//         let { [|foo|] } = a;
//     }
//     syntax2(a: A): void {
//         let { foo: foo } = a;
//     }
//     syntax11(a: A): void {
//         let { foo } = a;
//         foo = "newString";
//     }
// }
=== ContextSpan ===
  // === /tests/cases/fourslash/renameDestructuringClassProperty.ts ===
  // class A {
  //     foo: string;
  // }
  // class B {
  //     syntax1(a: A): void {
  //         [|let { foo } = a;|]
  //     }
  //     syntax2(a: A): void {
  //         let { foo: foo } = a;
  //     }
  //     syntax11(a: A): void {
  //         let { foo } = a;
  //         foo = "newString";
  //     }
  // }
=== 2 ===
// === /tests/cases/fourslash/renameDestructuringClassProperty.ts ===
// class A {
//     foo: string;
// }
// class B {
//     syntax1(a: A): void {
//         let { foo } = a;
//     }
//     syntax2(a: A): void {
//         let { [|foo|]: foo } = a;
//     }
//     syntax11(a: A): void {
//         let { foo } = a;
//         foo = "newString";
//     }
// }
=== ContextSpan ===
  // === /tests/cases/fourslash/renameDestructuringClassProperty.ts ===
  // class A {
  //     foo: string;
  // }
  // class B {
  //     syntax1(a: A): void {
  //         let { foo } = a;
  //     }
  //     syntax2(a: A): void {
  //         [|let { foo: foo } = a;|]
  //     }
  //     syntax11(a: A): void {
  //         let { foo } = a;
  //         foo = "newString";
  //     }
  // }
=== 3 ===
// === /tests/cases/fourslash/renameDestructuringClassProperty.ts ===
// class A {
//     foo: string;
// }
// class B {
//     syntax1(a: A): void {
//         let { foo } = a;
//     }
//     syntax2(a: A): void {
//         let { foo: foo } = a;
//     }
//     syntax11(a: A): void {
//         let { [|foo|] } = a;
//         foo = "newString";
//     }
// }
=== ContextSpan ===
  // === /tests/cases/fourslash/renameDestructuringClassProperty.ts ===
  // class A {
  //     foo: string;
  // }
  // class B {
  //     syntax1(a: A): void {
  //         let { foo } = a;
  //     }
  //     syntax2(a: A): void {
  //         let { foo: foo } = a;
  //     }
  //     syntax11(a: A): void {
  //         [|let { foo } = a;|]
  //         foo = "newString";
  //     }
  // }


[
  {
    "textSpan": {
      "start": 14,
      "length": 3
    },
    "fileName": "/tests/cases/fourslash/renameDestructuringClassProperty.ts",
    "contextSpan": {
      "start": 14,
      "length": 12
    }
  },
  {
    "textSpan": {
      "start": 79,
      "length": 3
    },
    "fileName": "/tests/cases/fourslash/renameDestructuringClassProperty.ts",
    "contextSpan": {
      "start": 73,
      "length": 16
    },
    "suffixText": ": foo"
  },
  {
    "textSpan": {
      "start": 136,
      "length": 3
    },
    "fileName": "/tests/cases/fourslash/renameDestructuringClassProperty.ts",
    "contextSpan": {
      "start": 130,
      "length": 21
    }
  },
  {
    "textSpan": {
      "start": 199,
      "length": 3
    },
    "fileName": "/tests/cases/fourslash/renameDestructuringClassProperty.ts",
    "contextSpan": {
      "start": 193,
      "length": 16
    },
    "suffixText": ": foo"
  }
]

=== RenameOptions ===
{
 "findInStrings": false,
 "findInComments": false,
 "providePrefixAndSuffixTextForRename": true
}
/*====== /tests/cases/fourslash/renameDestructuringClassProperty.ts ======*/

class A {
    RENAME: string;
}
class B {
    syntax1(a: A): void {
        let { RENAME: foo/*END SUFFIX*/ } = a;
    }
    syntax2(a: A): void {
        let { [|RENAME|]: foo } = a;
    }
    syntax11(a: A): void {
        let { RENAME: foo/*END SUFFIX*/ } = a;
        foo = "newString";
    }
}

=== 0 ===
// === /tests/cases/fourslash/renameDestructuringClassProperty.ts ===
// class A {
//     [|foo|]: string;
// }
// class B {
//     syntax1(a: A): void {
//         let { foo } = a;
//     }
//     syntax2(a: A): void {
//         let { foo: foo } = a;
//     }
//     syntax11(a: A): void {
//         let { foo } = a;
//         foo = "newString";
//     }
// }
=== ContextSpan ===
  // === /tests/cases/fourslash/renameDestructuringClassProperty.ts ===
  // class A {
  //     [|foo: string;|]
  // }
  // class B {
  //     syntax1(a: A): void {
  //         let { foo } = a;
  //     }
  //     syntax2(a: A): void {
  //         let { foo: foo } = a;
  //     }
  //     syntax11(a: A): void {
  //         let { foo } = a;
  //         foo = "newString";
  //     }
  // }
=== 1 ===
// === /tests/cases/fourslash/renameDestructuringClassProperty.ts ===
// class A {
//     foo: string;
// }
// class B {
//     syntax1(a: A): void {
//         let { [|foo|] } = a;
//     }
//     syntax2(a: A): void {
//         let { foo: foo } = a;
//     }
//     syntax11(a: A): void {
//         let { foo } = a;
//         foo = "newString";
//     }
// }
=== ContextSpan ===
  // === /tests/cases/fourslash/renameDestructuringClassProperty.ts ===
  // class A {
  //     foo: string;
  // }
  // class B {
  //     syntax1(a: A): void {
  //         [|let { foo } = a;|]
  //     }
  //     syntax2(a: A): void {
  //         let { foo: foo } = a;
  //     }
  //     syntax11(a: A): void {
  //         let { foo } = a;
  //         foo = "newString";
  //     }
  // }
=== 2 ===
// === /tests/cases/fourslash/renameDestructuringClassProperty.ts ===
// class A {
//     foo: string;
// }
// class B {
//     syntax1(a: A): void {
//         let { foo } = a;
//     }
//     syntax2(a: A): void {
//         let { [|foo|]: foo } = a;
//     }
//     syntax11(a: A): void {
//         let { foo } = a;
//         foo = "newString";
//     }
// }
=== ContextSpan ===
  // === /tests/cases/fourslash/renameDestructuringClassProperty.ts ===
  // class A {
  //     foo: string;
  // }
  // class B {
  //     syntax1(a: A): void {
  //         let { foo } = a;
  //     }
  //     syntax2(a: A): void {
  //         [|let { foo: foo } = a;|]
  //     }
  //     syntax11(a: A): void {
  //         let { foo } = a;
  //         foo = "newString";
  //     }
  // }
=== 3 ===
// === /tests/cases/fourslash/renameDestructuringClassProperty.ts ===
// class A {
//     foo: string;
// }
// class B {
//     syntax1(a: A): void {
//         let { foo } = a;
//     }
//     syntax2(a: A): void {
//         let { foo: foo } = a;
//     }
//     syntax11(a: A): void {
//         let { [|foo|] } = a;
//         foo = "newString";
//     }
// }
=== ContextSpan ===
  // === /tests/cases/fourslash/renameDestructuringClassProperty.ts ===
  // class A {
  //     foo: string;
  // }
  // class B {
  //     syntax1(a: A): void {
  //         let { foo } = a;
  //     }
  //     syntax2(a: A): void {
  //         let { foo: foo } = a;
  //     }
  //     syntax11(a: A): void {
  //         [|let { foo } = a;|]
  //         foo = "newString";
  //     }
  // }


[
  {
    "textSpan": {
      "start": 14,
      "length": 3
    },
    "fileName": "/tests/cases/fourslash/renameDestructuringClassProperty.ts",
    "contextSpan": {
      "start": 14,
      "length": 12
    }
  },
  {
    "textSpan": {
      "start": 79,
      "length": 3
    },
    "fileName": "/tests/cases/fourslash/renameDestructuringClassProperty.ts",
    "contextSpan": {
      "start": 73,
      "length": 16
    },
    "suffixText": ": foo"
  },
  {
    "textSpan": {
      "start": 136,
      "length": 3
    },
    "fileName": "/tests/cases/fourslash/renameDestructuringClassProperty.ts",
    "contextSpan": {
      "start": 130,
      "length": 21
    }
  },
  {
    "textSpan": {
      "start": 199,
      "length": 3
    },
    "fileName": "/tests/cases/fourslash/renameDestructuringClassProperty.ts",
    "contextSpan": {
      "start": 193,
      "length": 16
    },
    "suffixText": ": foo"
  }
]

=== RenameOptions ===
{
 "findInStrings": false,
 "findInComments": false,
 "providePrefixAndSuffixTextForRename": true
}
/*====== /tests/cases/fourslash/renameDestructuringClassProperty.ts ======*/

class A {
    foo: string;
}
class B {
    syntax1(a: A): void {
        let { /*START PREFIX*/foo: [|RENAME|] } = a;
    }
    syntax2(a: A): void {
        let { foo: foo } = a;
    }
    syntax11(a: A): void {
        let { foo } = a;
        foo = "newString";
    }
}

=== 0 ===
// === /tests/cases/fourslash/renameDestructuringClassProperty.ts ===
// class A {
//     foo: string;
// }
// class B {
//     syntax1(a: A): void {
//         let { [|foo|] } = a;
//     }
//     syntax2(a: A): void {
//         let { foo: foo } = a;
//     }
//     syntax11(a: A): void {
//         let { foo } = a;
//         foo = "newString";
//     }
// }
=== ContextSpan ===
  // === /tests/cases/fourslash/renameDestructuringClassProperty.ts ===
  // class A {
  //     foo: string;
  // }
  // class B {
  //     syntax1(a: A): void {
  //         [|let { foo } = a;|]
  //     }
  //     syntax2(a: A): void {
  //         let { foo: foo } = a;
  //     }
  //     syntax11(a: A): void {
  //         let { foo } = a;
  //         foo = "newString";
  //     }
  // }


[
  {
    "textSpan": {
      "start": 79,
      "length": 3
    },
    "fileName": "/tests/cases/fourslash/renameDestructuringClassProperty.ts",
    "contextSpan": {
      "start": 73,
      "length": 16
    },
    "prefixText": "foo: "
  }
]

=== RenameOptions ===
{
 "findInStrings": false,
 "findInComments": false,
 "providePrefixAndSuffixTextForRename": true
}
/*====== /tests/cases/fourslash/renameDestructuringClassProperty.ts ======*/

class A {
    foo: string;
}
class B {
    syntax1(a: A): void {
        let { foo } = a;
    }
    syntax2(a: A): void {
        let { foo: foo } = a;
    }
    syntax11(a: A): void {
        let { /*START PREFIX*/foo: [|RENAME|] } = a;
        RENAME = "newString";
    }
}

=== 0 ===
// === /tests/cases/fourslash/renameDestructuringClassProperty.ts ===
// class A {
//     foo: string;
// }
// class B {
//     syntax1(a: A): void {
//         let { foo } = a;
//     }
//     syntax2(a: A): void {
//         let { foo: foo } = a;
//     }
//     syntax11(a: A): void {
//         let { [|foo|] } = a;
//         foo = "newString";
//     }
// }
=== ContextSpan ===
  // === /tests/cases/fourslash/renameDestructuringClassProperty.ts ===
  // class A {
  //     foo: string;
  // }
  // class B {
  //     syntax1(a: A): void {
  //         let { foo } = a;
  //     }
  //     syntax2(a: A): void {
  //         let { foo: foo } = a;
  //     }
  //     syntax11(a: A): void {
  //         [|let { foo } = a;|]
  //         foo = "newString";
  //     }
  // }
=== 1 ===
// === /tests/cases/fourslash/renameDestructuringClassProperty.ts ===
// class A {
//     foo: string;
// }
// class B {
//     syntax1(a: A): void {
//         let { foo } = a;
//     }
//     syntax2(a: A): void {
//         let { foo: foo } = a;
//     }
//     syntax11(a: A): void {
//         let { foo } = a;
//         [|foo|] = "newString";
//     }
// }


[
  {
    "textSpan": {
      "start": 199,
      "length": 3
    },
    "fileName": "/tests/cases/fourslash/renameDestructuringClassProperty.ts",
    "contextSpan": {
      "start": 193,
      "length": 16
    },
    "prefixText": "foo: "
  },
  {
    "textSpan": {
      "start": 218,
      "length": 3
    },
    "fileName": "/tests/cases/fourslash/renameDestructuringClassProperty.ts"
  }
]

=== RenameOptions ===
{
 "findInStrings": false,
 "findInComments": false,
 "providePrefixAndSuffixTextForRename": true
}
/*====== /tests/cases/fourslash/renameDestructuringClassProperty.ts ======*/

class A {
    foo: string;
}
class B {
    syntax1(a: A): void {
        let { foo } = a;
    }
    syntax2(a: A): void {
        let { foo: foo } = a;
    }
    syntax11(a: A): void {
        let { /*START PREFIX*/foo: RENAME } = a;
        [|RENAME|] = "newString";
    }
}

=== 0 ===
// === /tests/cases/fourslash/renameDestructuringClassProperty.ts ===
// class A {
//     foo: string;
// }
// class B {
//     syntax1(a: A): void {
//         let { foo } = a;
//     }
//     syntax2(a: A): void {
//         let { foo: foo } = a;
//     }
//     syntax11(a: A): void {
//         let { [|foo|] } = a;
//         foo = "newString";
//     }
// }
=== ContextSpan ===
  // === /tests/cases/fourslash/renameDestructuringClassProperty.ts ===
  // class A {
  //     foo: string;
  // }
  // class B {
  //     syntax1(a: A): void {
  //         let { foo } = a;
  //     }
  //     syntax2(a: A): void {
  //         let { foo: foo } = a;
  //     }
  //     syntax11(a: A): void {
  //         [|let { foo } = a;|]
  //         foo = "newString";
  //     }
  // }
=== 1 ===
// === /tests/cases/fourslash/renameDestructuringClassProperty.ts ===
// class A {
//     foo: string;
// }
// class B {
//     syntax1(a: A): void {
//         let { foo } = a;
//     }
//     syntax2(a: A): void {
//         let { foo: foo } = a;
//     }
//     syntax11(a: A): void {
//         let { foo } = a;
//         [|foo|] = "newString";
//     }
// }


[
  {
    "textSpan": {
      "start": 199,
      "length": 3
    },
    "fileName": "/tests/cases/fourslash/renameDestructuringClassProperty.ts",
    "contextSpan": {
      "start": 193,
      "length": 16
    },
    "prefixText": "foo: "
  },
  {
    "textSpan": {
      "start": 218,
      "length": 3
    },
    "fileName": "/tests/cases/fourslash/renameDestructuringClassProperty.ts"
  }
]