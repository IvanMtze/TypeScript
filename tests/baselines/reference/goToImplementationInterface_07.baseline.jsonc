// === /tests/cases/fourslash/goToImplementationInterface_07.ts ===
// interface Fo/*GOTO IMPL*/o {
//     hello (): void;
// }
// 
// interface Bar {
//     hello (): void;
// }
// 
// let x1: Foo            = [|{ hello ()          { /**typeReference*/ } }|];
// let x2: () => Foo      = [|(() => { hello ()   { /**functionType*/} })|];
// let x3: Foo | Bar      = [|{ hello ()          { /**unionType*/} }|];
// let x4: Foo & (Foo & Bar)      = [|{ hello ()          { /**intersectionType*/} }|];
// let x5: [Foo]          = [|[{ hello ()         { /**tupleType*/} }]|];
// let x6: (Foo)          = [|{ hello ()          { /**parenthesizedType*/} }|];
// let x7: (new() => Foo) = [|class { hello ()    { /**constructorType*/} }|];
// let x8: Foo[]          = [|[{ hello ()         { /**arrayType*/} }]|];
// let x9: { y: Foo }     = [|{ y: { hello ()     { /**typeLiteral*/} } }|];
// let x10 = [|class implements Foo { hello() {} }|]
// let x11 = class [|C|] implements Foo { hello() {} }
// 
// // Should not do anything for type predicates
// function isFoo(a: any): a is Foo {
//     return true;
// }

// === 0 ===
  // === /tests/cases/fourslash/goToImplementationInterface_07.ts ===
  // interface Foo {
  //     hello (): void;
  // }
  // 
  // interface Bar {
  //     hello (): void;
  // }
  // 
  // let x1: Foo            = [|{ hello ()          { /**typeReference*/ } }|];
  // let x2: () => Foo      = (() => { hello ()   { /**functionType*/} });
  // let x3: Foo | Bar      = { hello ()          { /**unionType*/} };
  // let x4: Foo & (Foo & Bar)      = { hello ()          { /**intersectionType*/} };
  // let x5: [Foo]          = [{ hello ()         { /**tupleType*/} }];
  // let x6: (Foo)          = { hello ()          { /**parenthesizedType*/} };
  // let x7: (new() => Foo) = class { hello ()    { /**constructorType*/} };
  // let x8: Foo[]          = [{ hello ()         { /**arrayType*/} }];
  // let x9: { y: Foo }     = { y: { hello ()     { /**typeLiteral*/} } };
  // let x10 = class implements Foo { hello() {} }
  // let x11 = class C implements Foo { hello() {} }
  // 
  // // Should not do anything for type predicates
  // function isFoo(a: any): a is Foo {
  //     return true;
  // }
// === 1 ===
  // === /tests/cases/fourslash/goToImplementationInterface_07.ts ===
  // interface Foo {
  //     hello (): void;
  // }
  // 
  // interface Bar {
  //     hello (): void;
  // }
  // 
  // let x1: Foo            = { hello ()          { /**typeReference*/ } };
  // let x2: () => Foo      = [|(() => { hello ()   { /**functionType*/} })|];
  // let x3: Foo | Bar      = { hello ()          { /**unionType*/} };
  // let x4: Foo & (Foo & Bar)      = { hello ()          { /**intersectionType*/} };
  // let x5: [Foo]          = [{ hello ()         { /**tupleType*/} }];
  // let x6: (Foo)          = { hello ()          { /**parenthesizedType*/} };
  // let x7: (new() => Foo) = class { hello ()    { /**constructorType*/} };
  // let x8: Foo[]          = [{ hello ()         { /**arrayType*/} }];
  // let x9: { y: Foo }     = { y: { hello ()     { /**typeLiteral*/} } };
  // let x10 = class implements Foo { hello() {} }
  // let x11 = class C implements Foo { hello() {} }
  // 
  // // Should not do anything for type predicates
  // function isFoo(a: any): a is Foo {
  //     return true;
  // }
// === 2 ===
  // === /tests/cases/fourslash/goToImplementationInterface_07.ts ===
  // interface Foo {
  //     hello (): void;
  // }
  // 
  // interface Bar {
  //     hello (): void;
  // }
  // 
  // let x1: Foo            = { hello ()          { /**typeReference*/ } };
  // let x2: () => Foo      = (() => { hello ()   { /**functionType*/} });
  // let x3: Foo | Bar      = [|{ hello ()          { /**unionType*/} }|];
  // let x4: Foo & (Foo & Bar)      = { hello ()          { /**intersectionType*/} };
  // let x5: [Foo]          = [{ hello ()         { /**tupleType*/} }];
  // let x6: (Foo)          = { hello ()          { /**parenthesizedType*/} };
  // let x7: (new() => Foo) = class { hello ()    { /**constructorType*/} };
  // let x8: Foo[]          = [{ hello ()         { /**arrayType*/} }];
  // let x9: { y: Foo }     = { y: { hello ()     { /**typeLiteral*/} } };
  // let x10 = class implements Foo { hello() {} }
  // let x11 = class C implements Foo { hello() {} }
  // 
  // // Should not do anything for type predicates
  // function isFoo(a: any): a is Foo {
  //     return true;
  // }
// === 3 ===
  // === /tests/cases/fourslash/goToImplementationInterface_07.ts ===
  // interface Foo {
  //     hello (): void;
  // }
  // 
  // interface Bar {
  //     hello (): void;
  // }
  // 
  // let x1: Foo            = { hello ()          { /**typeReference*/ } };
  // let x2: () => Foo      = (() => { hello ()   { /**functionType*/} });
  // let x3: Foo | Bar      = { hello ()          { /**unionType*/} };
  // let x4: Foo & (Foo & Bar)      = [|{ hello ()          { /**intersectionType*/} }|];
  // let x5: [Foo]          = [{ hello ()         { /**tupleType*/} }];
  // let x6: (Foo)          = { hello ()          { /**parenthesizedType*/} };
  // let x7: (new() => Foo) = class { hello ()    { /**constructorType*/} };
  // let x8: Foo[]          = [{ hello ()         { /**arrayType*/} }];
  // let x9: { y: Foo }     = { y: { hello ()     { /**typeLiteral*/} } };
  // let x10 = class implements Foo { hello() {} }
  // let x11 = class C implements Foo { hello() {} }
  // 
  // // Should not do anything for type predicates
  // function isFoo(a: any): a is Foo {
  //     return true;
  // }
// === 4 ===
  // === /tests/cases/fourslash/goToImplementationInterface_07.ts ===
  // interface Foo {
  //     hello (): void;
  // }
  // 
  // interface Bar {
  //     hello (): void;
  // }
  // 
  // let x1: Foo            = { hello ()          { /**typeReference*/ } };
  // let x2: () => Foo      = (() => { hello ()   { /**functionType*/} });
  // let x3: Foo | Bar      = { hello ()          { /**unionType*/} };
  // let x4: Foo & (Foo & Bar)      = { hello ()          { /**intersectionType*/} };
  // let x5: [Foo]          = [|[{ hello ()         { /**tupleType*/} }]|];
  // let x6: (Foo)          = { hello ()          { /**parenthesizedType*/} };
  // let x7: (new() => Foo) = class { hello ()    { /**constructorType*/} };
  // let x8: Foo[]          = [{ hello ()         { /**arrayType*/} }];
  // let x9: { y: Foo }     = { y: { hello ()     { /**typeLiteral*/} } };
  // let x10 = class implements Foo { hello() {} }
  // let x11 = class C implements Foo { hello() {} }
  // 
  // // Should not do anything for type predicates
  // function isFoo(a: any): a is Foo {
  //     return true;
  // }
// === 5 ===
  // === /tests/cases/fourslash/goToImplementationInterface_07.ts ===
  // interface Foo {
  //     hello (): void;
  // }
  // 
  // interface Bar {
  //     hello (): void;
  // }
  // 
  // let x1: Foo            = { hello ()          { /**typeReference*/ } };
  // let x2: () => Foo      = (() => { hello ()   { /**functionType*/} });
  // let x3: Foo | Bar      = { hello ()          { /**unionType*/} };
  // let x4: Foo & (Foo & Bar)      = { hello ()          { /**intersectionType*/} };
  // let x5: [Foo]          = [{ hello ()         { /**tupleType*/} }];
  // let x6: (Foo)          = [|{ hello ()          { /**parenthesizedType*/} }|];
  // let x7: (new() => Foo) = class { hello ()    { /**constructorType*/} };
  // let x8: Foo[]          = [{ hello ()         { /**arrayType*/} }];
  // let x9: { y: Foo }     = { y: { hello ()     { /**typeLiteral*/} } };
  // let x10 = class implements Foo { hello() {} }
  // let x11 = class C implements Foo { hello() {} }
  // 
  // // Should not do anything for type predicates
  // function isFoo(a: any): a is Foo {
  //     return true;
  // }
// === 6 ===
  // === /tests/cases/fourslash/goToImplementationInterface_07.ts ===
  // interface Foo {
  //     hello (): void;
  // }
  // 
  // interface Bar {
  //     hello (): void;
  // }
  // 
  // let x1: Foo            = { hello ()          { /**typeReference*/ } };
  // let x2: () => Foo      = (() => { hello ()   { /**functionType*/} });
  // let x3: Foo | Bar      = { hello ()          { /**unionType*/} };
  // let x4: Foo & (Foo & Bar)      = { hello ()          { /**intersectionType*/} };
  // let x5: [Foo]          = [{ hello ()         { /**tupleType*/} }];
  // let x6: (Foo)          = { hello ()          { /**parenthesizedType*/} };
  // let x7: (new() => Foo) = [|class { hello ()    { /**constructorType*/} }|];
  // let x8: Foo[]          = [{ hello ()         { /**arrayType*/} }];
  // let x9: { y: Foo }     = { y: { hello ()     { /**typeLiteral*/} } };
  // let x10 = class implements Foo { hello() {} }
  // let x11 = class C implements Foo { hello() {} }
  // 
  // // Should not do anything for type predicates
  // function isFoo(a: any): a is Foo {
  //     return true;
  // }
// === 7 ===
  // === /tests/cases/fourslash/goToImplementationInterface_07.ts ===
  // interface Foo {
  //     hello (): void;
  // }
  // 
  // interface Bar {
  //     hello (): void;
  // }
  // 
  // let x1: Foo            = { hello ()          { /**typeReference*/ } };
  // let x2: () => Foo      = (() => { hello ()   { /**functionType*/} });
  // let x3: Foo | Bar      = { hello ()          { /**unionType*/} };
  // let x4: Foo & (Foo & Bar)      = { hello ()          { /**intersectionType*/} };
  // let x5: [Foo]          = [{ hello ()         { /**tupleType*/} }];
  // let x6: (Foo)          = { hello ()          { /**parenthesizedType*/} };
  // let x7: (new() => Foo) = class { hello ()    { /**constructorType*/} };
  // let x8: Foo[]          = [|[{ hello ()         { /**arrayType*/} }]|];
  // let x9: { y: Foo }     = { y: { hello ()     { /**typeLiteral*/} } };
  // let x10 = class implements Foo { hello() {} }
  // let x11 = class C implements Foo { hello() {} }
  // 
  // // Should not do anything for type predicates
  // function isFoo(a: any): a is Foo {
  //     return true;
  // }
// === 8 ===
  // === /tests/cases/fourslash/goToImplementationInterface_07.ts ===
  // interface Foo {
  //     hello (): void;
  // }
  // 
  // interface Bar {
  //     hello (): void;
  // }
  // 
  // let x1: Foo            = { hello ()          { /**typeReference*/ } };
  // let x2: () => Foo      = (() => { hello ()   { /**functionType*/} });
  // let x3: Foo | Bar      = { hello ()          { /**unionType*/} };
  // let x4: Foo & (Foo & Bar)      = { hello ()          { /**intersectionType*/} };
  // let x5: [Foo]          = [{ hello ()         { /**tupleType*/} }];
  // let x6: (Foo)          = { hello ()          { /**parenthesizedType*/} };
  // let x7: (new() => Foo) = class { hello ()    { /**constructorType*/} };
  // let x8: Foo[]          = [{ hello ()         { /**arrayType*/} }];
  // let x9: { y: Foo }     = [|{ y: { hello ()     { /**typeLiteral*/} } }|];
  // let x10 = class implements Foo { hello() {} }
  // let x11 = class C implements Foo { hello() {} }
  // 
  // // Should not do anything for type predicates
  // function isFoo(a: any): a is Foo {
  //     return true;
  // }
// === 9 ===
  // === /tests/cases/fourslash/goToImplementationInterface_07.ts ===
  // interface Foo {
  //     hello (): void;
  // }
  // 
  // interface Bar {
  //     hello (): void;
  // }
  // 
  // let x1: Foo            = { hello ()          { /**typeReference*/ } };
  // let x2: () => Foo      = (() => { hello ()   { /**functionType*/} });
  // let x3: Foo | Bar      = { hello ()          { /**unionType*/} };
  // let x4: Foo & (Foo & Bar)      = { hello ()          { /**intersectionType*/} };
  // let x5: [Foo]          = [{ hello ()         { /**tupleType*/} }];
  // let x6: (Foo)          = { hello ()          { /**parenthesizedType*/} };
  // let x7: (new() => Foo) = class { hello ()    { /**constructorType*/} };
  // let x8: Foo[]          = [{ hello ()         { /**arrayType*/} }];
  // let x9: { y: Foo }     = { y: { hello ()     { /**typeLiteral*/} } };
  // let x10 = [|class implements Foo { hello() {} }|]
  // let x11 = class C implements Foo { hello() {} }
  // 
  // // Should not do anything for type predicates
  // function isFoo(a: any): a is Foo {
  //     return true;
  // }
// === 10 ===
  // === /tests/cases/fourslash/goToImplementationInterface_07.ts ===
  // interface Foo {
  //     hello (): void;
  // }
  // 
  // interface Bar {
  //     hello (): void;
  // }
  // 
  // let x1: Foo            = { hello ()          { /**typeReference*/ } };
  // let x2: () => Foo      = (() => { hello ()   { /**functionType*/} });
  // let x3: Foo | Bar      = { hello ()          { /**unionType*/} };
  // let x4: Foo & (Foo & Bar)      = { hello ()          { /**intersectionType*/} };
  // let x5: [Foo]          = [{ hello ()         { /**tupleType*/} }];
  // let x6: (Foo)          = { hello ()          { /**parenthesizedType*/} };
  // let x7: (new() => Foo) = class { hello ()    { /**constructorType*/} };
  // let x8: Foo[]          = [{ hello ()         { /**arrayType*/} }];
  // let x9: { y: Foo }     = { y: { hello ()     { /**typeLiteral*/} } };
  // let x10 = class implements Foo { hello() {} }
  // let x11 = class [|C|] implements Foo { hello() {} }
  // 
  // // Should not do anything for type predicates
  // function isFoo(a: any): a is Foo {
  //     return true;
  // }
    // === ContextSpan ===
    // === /tests/cases/fourslash/goToImplementationInterface_07.ts ===
    // interface Foo {
    //     hello (): void;
    // }
    // 
    // interface Bar {
    //     hello (): void;
    // }
    // 
    // let x1: Foo            = { hello ()          { /**typeReference*/ } };
    // let x2: () => Foo      = (() => { hello ()   { /**functionType*/} });
    // let x3: Foo | Bar      = { hello ()          { /**unionType*/} };
    // let x4: Foo & (Foo & Bar)      = { hello ()          { /**intersectionType*/} };
    // let x5: [Foo]          = [{ hello ()         { /**tupleType*/} }];
    // let x6: (Foo)          = { hello ()          { /**parenthesizedType*/} };
    // let x7: (new() => Foo) = class { hello ()    { /**constructorType*/} };
    // let x8: Foo[]          = [{ hello ()         { /**arrayType*/} }];
    // let x9: { y: Foo }     = { y: { hello ()     { /**typeLiteral*/} } };
    // let x10 = class implements Foo { hello() {} }
    // let x11 = [|class C implements Foo { hello() {} }|]
    // 
    // // Should not do anything for type predicates
    // function isFoo(a: any): a is Foo {
    //     return true;
    // }


[
  {
    "textSpan": {
      "start": 103,
      "length": 44
    },
    "fileName": "/tests/cases/fourslash/goToImplementationInterface_07.ts",
    "kind": "interface",
    "displayParts": [
      {
        "text": "(",
        "kind": "punctuation"
      },
      {
        "text": "object literal",
        "kind": "text"
      },
      {
        "text": ")",
        "kind": "punctuation"
      }
    ]
  },
  {
    "textSpan": {
      "start": 174,
      "length": 43
    },
    "fileName": "/tests/cases/fourslash/goToImplementationInterface_07.ts",
    "kind": "",
    "displayParts": []
  },
  {
    "textSpan": {
      "start": 244,
      "length": 39
    },
    "fileName": "/tests/cases/fourslash/goToImplementationInterface_07.ts",
    "kind": "interface",
    "displayParts": [
      {
        "text": "(",
        "kind": "punctuation"
      },
      {
        "text": "object literal",
        "kind": "text"
      },
      {
        "text": ")",
        "kind": "punctuation"
      }
    ]
  },
  {
    "textSpan": {
      "start": 318,
      "length": 46
    },
    "fileName": "/tests/cases/fourslash/goToImplementationInterface_07.ts",
    "kind": "interface",
    "displayParts": [
      {
        "text": "(",
        "kind": "punctuation"
      },
      {
        "text": "object literal",
        "kind": "text"
      },
      {
        "text": ")",
        "kind": "punctuation"
      }
    ]
  },
  {
    "textSpan": {
      "start": 391,
      "length": 40
    },
    "fileName": "/tests/cases/fourslash/goToImplementationInterface_07.ts",
    "kind": "",
    "displayParts": []
  },
  {
    "textSpan": {
      "start": 458,
      "length": 47
    },
    "fileName": "/tests/cases/fourslash/goToImplementationInterface_07.ts",
    "kind": "interface",
    "displayParts": [
      {
        "text": "(",
        "kind": "punctuation"
      },
      {
        "text": "object literal",
        "kind": "text"
      },
      {
        "text": ")",
        "kind": "punctuation"
      }
    ]
  },
  {
    "textSpan": {
      "start": 532,
      "length": 45
    },
    "fileName": "/tests/cases/fourslash/goToImplementationInterface_07.ts",
    "kind": "local class",
    "displayParts": [
      {
        "text": "(",
        "kind": "punctuation"
      },
      {
        "text": "anonymous local class",
        "kind": "text"
      },
      {
        "text": ")",
        "kind": "punctuation"
      }
    ]
  },
  {
    "textSpan": {
      "start": 604,
      "length": 40
    },
    "fileName": "/tests/cases/fourslash/goToImplementationInterface_07.ts",
    "kind": "",
    "displayParts": []
  },
  {
    "textSpan": {
      "start": 671,
      "length": 43
    },
    "fileName": "/tests/cases/fourslash/goToImplementationInterface_07.ts",
    "kind": "interface",
    "displayParts": [
      {
        "text": "(",
        "kind": "punctuation"
      },
      {
        "text": "object literal",
        "kind": "text"
      },
      {
        "text": ")",
        "kind": "punctuation"
      }
    ]
  },
  {
    "textSpan": {
      "start": 726,
      "length": 35
    },
    "fileName": "/tests/cases/fourslash/goToImplementationInterface_07.ts",
    "kind": "local class",
    "displayParts": [
      {
        "text": "(",
        "kind": "punctuation"
      },
      {
        "text": "anonymous local class",
        "kind": "text"
      },
      {
        "text": ")",
        "kind": "punctuation"
      }
    ]
  },
  {
    "textSpan": {
      "start": 778,
      "length": 1
    },
    "fileName": "/tests/cases/fourslash/goToImplementationInterface_07.ts",
    "contextSpan": {
      "start": 772,
      "length": 37
    },
    "displayParts": [
      {
        "text": "(",
        "kind": "punctuation"
      },
      {
        "text": "local class",
        "kind": "text"
      },
      {
        "text": ")",
        "kind": "punctuation"
      },
      {
        "text": " ",
        "kind": "space"
      },
      {
        "text": "C",
        "kind": "className"
      }
    ],
    "kind": "local class"
  }
]