=== RenameOptions ===
{
 "findInStrings": false,
 "findInComments": false,
 "providePrefixAndSuffixTextForRename": true
}
/*====== /tests/cases/fourslash/renameDeclarationKeywords.ts ======*/

class Base {}
interface Implemented1 {}
class RENAME extends Base implements Implemented1 {
    get e() { return 1; }
    set e(v) {}
}
interface I1 extends Base { }
type T = { }
enum E { }
namespace N { }
module M { }
function fn() {}
var x;
let y;
const z = 1;

=== 0 ===
// === /tests/cases/fourslash/renameDeclarationKeywords.ts ===
// class Base {}
// interface Implemented1 {}
// class [|C1|] extends Base implements Implemented1 {
//     get e() { return 1; }
//     set e(v) {}
// }
// interface I1 extends Base { }
// type T = { }
// enum E { }
// namespace N { }
// module M { }
// function fn() {}
// var x;
// let y;
// const z = 1;
=== ContextSpan ===
  // === /tests/cases/fourslash/renameDeclarationKeywords.ts ===
  // class Base {}
  // interface Implemented1 {}
  // [|class C1 extends Base implements Implemented1 {
  //     get e() { return 1; }
  //     set e(v) {}
  // }|]
  // interface I1 extends Base { }
  // type T = { }
  // enum E { }
  // namespace N { }
  // module M { }
  // function fn() {}
  // var x;
  // let y;
  // const z = 1;


[
  {
    "textSpan": {
      "start": 46,
      "length": 2
    },
    "fileName": "/tests/cases/fourslash/renameDeclarationKeywords.ts",
    "contextSpan": {
      "start": 40,
      "length": 91
    }
  }
]

=== RenameOptions ===
{
 "findInStrings": false,
 "findInComments": false,
 "providePrefixAndSuffixTextForRename": true
}
/*====== /tests/cases/fourslash/renameDeclarationKeywords.ts ======*/

class RENAME {}
interface Implemented1 {}
class C1 extends RENAME implements Implemented1 {
    get e() { return 1; }
    set e(v) {}
}
interface I1 extends RENAME { }
type T = { }
enum E { }
namespace N { }
module M { }
function fn() {}
var x;
let y;
const z = 1;

=== 0 ===
// === /tests/cases/fourslash/renameDeclarationKeywords.ts ===
// class [|Base|] {}
// interface Implemented1 {}
// class C1 extends Base implements Implemented1 {
//     get e() { return 1; }
//     set e(v) {}
// }
// interface I1 extends Base { }
// type T = { }
// enum E { }
// namespace N { }
// module M { }
// function fn() {}
// var x;
// let y;
// const z = 1;
=== ContextSpan ===
  // === /tests/cases/fourslash/renameDeclarationKeywords.ts ===
  // [|class Base {}|]
  // interface Implemented1 {}
  // class C1 extends Base implements Implemented1 {
  //     get e() { return 1; }
  //     set e(v) {}
  // }
  // interface I1 extends Base { }
  // type T = { }
  // enum E { }
  // namespace N { }
  // module M { }
  // function fn() {}
  // var x;
  // let y;
  // const z = 1;
=== 1 ===
// === /tests/cases/fourslash/renameDeclarationKeywords.ts ===
// class Base {}
// interface Implemented1 {}
// class C1 extends [|Base|] implements Implemented1 {
//     get e() { return 1; }
//     set e(v) {}
// }
// interface I1 extends Base { }
// type T = { }
// enum E { }
// namespace N { }
// module M { }
// function fn() {}
// var x;
// let y;
// const z = 1;
=== 2 ===
// === /tests/cases/fourslash/renameDeclarationKeywords.ts ===
// class Base {}
// interface Implemented1 {}
// class C1 extends Base implements Implemented1 {
//     get e() { return 1; }
//     set e(v) {}
// }
// interface I1 extends [|Base|] { }
// type T = { }
// enum E { }
// namespace N { }
// module M { }
// function fn() {}
// var x;
// let y;
// const z = 1;


[
  {
    "textSpan": {
      "start": 6,
      "length": 4
    },
    "fileName": "/tests/cases/fourslash/renameDeclarationKeywords.ts",
    "contextSpan": {
      "start": 0,
      "length": 13
    }
  },
  {
    "textSpan": {
      "start": 57,
      "length": 4
    },
    "fileName": "/tests/cases/fourslash/renameDeclarationKeywords.ts"
  },
  {
    "textSpan": {
      "start": 153,
      "length": 4
    },
    "fileName": "/tests/cases/fourslash/renameDeclarationKeywords.ts"
  }
]

=== RenameOptions ===
{
 "findInStrings": false,
 "findInComments": false,
 "providePrefixAndSuffixTextForRename": true
}
/*====== /tests/cases/fourslash/renameDeclarationKeywords.ts ======*/

class Base {}
interface RENAME {}
class C1 extends Base implements RENAME {
    get e() { return 1; }
    set e(v) {}
}
interface I1 extends Base { }
type T = { }
enum E { }
namespace N { }
module M { }
function fn() {}
var x;
let y;
const z = 1;

=== 0 ===
// === /tests/cases/fourslash/renameDeclarationKeywords.ts ===
// class Base {}
// interface [|Implemented1|] {}
// class C1 extends Base implements Implemented1 {
//     get e() { return 1; }
//     set e(v) {}
// }
// interface I1 extends Base { }
// type T = { }
// enum E { }
// namespace N { }
// module M { }
// function fn() {}
// var x;
// let y;
// const z = 1;
=== ContextSpan ===
  // === /tests/cases/fourslash/renameDeclarationKeywords.ts ===
  // class Base {}
  // [|interface Implemented1 {}|]
  // class C1 extends Base implements Implemented1 {
  //     get e() { return 1; }
  //     set e(v) {}
  // }
  // interface I1 extends Base { }
  // type T = { }
  // enum E { }
  // namespace N { }
  // module M { }
  // function fn() {}
  // var x;
  // let y;
  // const z = 1;
=== 1 ===
// === /tests/cases/fourslash/renameDeclarationKeywords.ts ===
// class Base {}
// interface Implemented1 {}
// class C1 extends Base implements [|Implemented1|] {
//     get e() { return 1; }
//     set e(v) {}
// }
// interface I1 extends Base { }
// type T = { }
// enum E { }
// namespace N { }
// module M { }
// function fn() {}
// var x;
// let y;
// const z = 1;


[
  {
    "textSpan": {
      "start": 24,
      "length": 12
    },
    "fileName": "/tests/cases/fourslash/renameDeclarationKeywords.ts",
    "contextSpan": {
      "start": 14,
      "length": 25
    }
  },
  {
    "textSpan": {
      "start": 73,
      "length": 12
    },
    "fileName": "/tests/cases/fourslash/renameDeclarationKeywords.ts"
  }
]

=== RenameOptions ===
{
 "findInStrings": false,
 "findInComments": false,
 "providePrefixAndSuffixTextForRename": true
}
/*====== /tests/cases/fourslash/renameDeclarationKeywords.ts ======*/

class Base {}
interface Implemented1 {}
class C1 extends Base implements Implemented1 {
    get RENAME() { return 1; }
    set RENAME(v) {}
}
interface I1 extends Base { }
type T = { }
enum E { }
namespace N { }
module M { }
function fn() {}
var x;
let y;
const z = 1;

=== 0 ===
// === /tests/cases/fourslash/renameDeclarationKeywords.ts ===
// class Base {}
// interface Implemented1 {}
// class C1 extends Base implements Implemented1 {
//     get [|e|]() { return 1; }
//     set e(v) {}
// }
// interface I1 extends Base { }
// type T = { }
// enum E { }
// namespace N { }
// module M { }
// function fn() {}
// var x;
// let y;
// const z = 1;
=== ContextSpan ===
  // === /tests/cases/fourslash/renameDeclarationKeywords.ts ===
  // class Base {}
  // interface Implemented1 {}
  // class C1 extends Base implements Implemented1 {
  //     [|get e() { return 1; }|]
  //     set e(v) {}
  // }
  // interface I1 extends Base { }
  // type T = { }
  // enum E { }
  // namespace N { }
  // module M { }
  // function fn() {}
  // var x;
  // let y;
  // const z = 1;
=== 1 ===
// === /tests/cases/fourslash/renameDeclarationKeywords.ts ===
// class Base {}
// interface Implemented1 {}
// class C1 extends Base implements Implemented1 {
//     get e() { return 1; }
//     set [|e|](v) {}
// }
// interface I1 extends Base { }
// type T = { }
// enum E { }
// namespace N { }
// module M { }
// function fn() {}
// var x;
// let y;
// const z = 1;
=== ContextSpan ===
  // === /tests/cases/fourslash/renameDeclarationKeywords.ts ===
  // class Base {}
  // interface Implemented1 {}
  // class C1 extends Base implements Implemented1 {
  //     get e() { return 1; }
  //     [|set e(v) {}|]
  // }
  // interface I1 extends Base { }
  // type T = { }
  // enum E { }
  // namespace N { }
  // module M { }
  // function fn() {}
  // var x;
  // let y;
  // const z = 1;


[
  {
    "textSpan": {
      "start": 96,
      "length": 1
    },
    "fileName": "/tests/cases/fourslash/renameDeclarationKeywords.ts",
    "contextSpan": {
      "start": 92,
      "length": 21
    }
  },
  {
    "textSpan": {
      "start": 122,
      "length": 1
    },
    "fileName": "/tests/cases/fourslash/renameDeclarationKeywords.ts",
    "contextSpan": {
      "start": 118,
      "length": 11
    }
  }
]

=== RenameOptions ===
{
 "findInStrings": false,
 "findInComments": false,
 "providePrefixAndSuffixTextForRename": true
}
/*====== /tests/cases/fourslash/renameDeclarationKeywords.ts ======*/

class Base {}
interface Implemented1 {}
class C1 extends Base implements Implemented1 {
    get RENAME() { return 1; }
    set RENAME(v) {}
}
interface I1 extends Base { }
type T = { }
enum E { }
namespace N { }
module M { }
function fn() {}
var x;
let y;
const z = 1;

=== 0 ===
// === /tests/cases/fourslash/renameDeclarationKeywords.ts ===
// class Base {}
// interface Implemented1 {}
// class C1 extends Base implements Implemented1 {
//     get [|e|]() { return 1; }
//     set e(v) {}
// }
// interface I1 extends Base { }
// type T = { }
// enum E { }
// namespace N { }
// module M { }
// function fn() {}
// var x;
// let y;
// const z = 1;
=== ContextSpan ===
  // === /tests/cases/fourslash/renameDeclarationKeywords.ts ===
  // class Base {}
  // interface Implemented1 {}
  // class C1 extends Base implements Implemented1 {
  //     [|get e() { return 1; }|]
  //     set e(v) {}
  // }
  // interface I1 extends Base { }
  // type T = { }
  // enum E { }
  // namespace N { }
  // module M { }
  // function fn() {}
  // var x;
  // let y;
  // const z = 1;
=== 1 ===
// === /tests/cases/fourslash/renameDeclarationKeywords.ts ===
// class Base {}
// interface Implemented1 {}
// class C1 extends Base implements Implemented1 {
//     get e() { return 1; }
//     set [|e|](v) {}
// }
// interface I1 extends Base { }
// type T = { }
// enum E { }
// namespace N { }
// module M { }
// function fn() {}
// var x;
// let y;
// const z = 1;
=== ContextSpan ===
  // === /tests/cases/fourslash/renameDeclarationKeywords.ts ===
  // class Base {}
  // interface Implemented1 {}
  // class C1 extends Base implements Implemented1 {
  //     get e() { return 1; }
  //     [|set e(v) {}|]
  // }
  // interface I1 extends Base { }
  // type T = { }
  // enum E { }
  // namespace N { }
  // module M { }
  // function fn() {}
  // var x;
  // let y;
  // const z = 1;


[
  {
    "textSpan": {
      "start": 96,
      "length": 1
    },
    "fileName": "/tests/cases/fourslash/renameDeclarationKeywords.ts",
    "contextSpan": {
      "start": 92,
      "length": 21
    }
  },
  {
    "textSpan": {
      "start": 122,
      "length": 1
    },
    "fileName": "/tests/cases/fourslash/renameDeclarationKeywords.ts",
    "contextSpan": {
      "start": 118,
      "length": 11
    }
  }
]

=== RenameOptions ===
{
 "findInStrings": false,
 "findInComments": false,
 "providePrefixAndSuffixTextForRename": true
}
/*====== /tests/cases/fourslash/renameDeclarationKeywords.ts ======*/

class Base {}
interface Implemented1 {}
class C1 extends Base implements Implemented1 {
    get e() { return 1; }
    set e(v) {}
}
interface RENAME extends Base { }
type T = { }
enum E { }
namespace N { }
module M { }
function fn() {}
var x;
let y;
const z = 1;

=== 0 ===
// === /tests/cases/fourslash/renameDeclarationKeywords.ts ===
// class Base {}
// interface Implemented1 {}
// class C1 extends Base implements Implemented1 {
//     get e() { return 1; }
//     set e(v) {}
// }
// interface [|I1|] extends Base { }
// type T = { }
// enum E { }
// namespace N { }
// module M { }
// function fn() {}
// var x;
// let y;
// const z = 1;
=== ContextSpan ===
  // === /tests/cases/fourslash/renameDeclarationKeywords.ts ===
  // class Base {}
  // interface Implemented1 {}
  // class C1 extends Base implements Implemented1 {
  //     get e() { return 1; }
  //     set e(v) {}
  // }
  // [|interface I1 extends Base { }|]
  // type T = { }
  // enum E { }
  // namespace N { }
  // module M { }
  // function fn() {}
  // var x;
  // let y;
  // const z = 1;


[
  {
    "textSpan": {
      "start": 142,
      "length": 2
    },
    "fileName": "/tests/cases/fourslash/renameDeclarationKeywords.ts",
    "contextSpan": {
      "start": 132,
      "length": 29
    }
  }
]

=== RenameOptions ===
{
 "findInStrings": false,
 "findInComments": false,
 "providePrefixAndSuffixTextForRename": true
}
/*====== /tests/cases/fourslash/renameDeclarationKeywords.ts ======*/

class RENAME {}
interface Implemented1 {}
class C1 extends RENAME implements Implemented1 {
    get e() { return 1; }
    set e(v) {}
}
interface I1 extends RENAME { }
type T = { }
enum E { }
namespace N { }
module M { }
function fn() {}
var x;
let y;
const z = 1;

=== 0 ===
// === /tests/cases/fourslash/renameDeclarationKeywords.ts ===
// class [|Base|] {}
// interface Implemented1 {}
// class C1 extends Base implements Implemented1 {
//     get e() { return 1; }
//     set e(v) {}
// }
// interface I1 extends Base { }
// type T = { }
// enum E { }
// namespace N { }
// module M { }
// function fn() {}
// var x;
// let y;
// const z = 1;
=== ContextSpan ===
  // === /tests/cases/fourslash/renameDeclarationKeywords.ts ===
  // [|class Base {}|]
  // interface Implemented1 {}
  // class C1 extends Base implements Implemented1 {
  //     get e() { return 1; }
  //     set e(v) {}
  // }
  // interface I1 extends Base { }
  // type T = { }
  // enum E { }
  // namespace N { }
  // module M { }
  // function fn() {}
  // var x;
  // let y;
  // const z = 1;
=== 1 ===
// === /tests/cases/fourslash/renameDeclarationKeywords.ts ===
// class Base {}
// interface Implemented1 {}
// class C1 extends [|Base|] implements Implemented1 {
//     get e() { return 1; }
//     set e(v) {}
// }
// interface I1 extends Base { }
// type T = { }
// enum E { }
// namespace N { }
// module M { }
// function fn() {}
// var x;
// let y;
// const z = 1;
=== 2 ===
// === /tests/cases/fourslash/renameDeclarationKeywords.ts ===
// class Base {}
// interface Implemented1 {}
// class C1 extends Base implements Implemented1 {
//     get e() { return 1; }
//     set e(v) {}
// }
// interface I1 extends [|Base|] { }
// type T = { }
// enum E { }
// namespace N { }
// module M { }
// function fn() {}
// var x;
// let y;
// const z = 1;


[
  {
    "textSpan": {
      "start": 6,
      "length": 4
    },
    "fileName": "/tests/cases/fourslash/renameDeclarationKeywords.ts",
    "contextSpan": {
      "start": 0,
      "length": 13
    }
  },
  {
    "textSpan": {
      "start": 57,
      "length": 4
    },
    "fileName": "/tests/cases/fourslash/renameDeclarationKeywords.ts"
  },
  {
    "textSpan": {
      "start": 153,
      "length": 4
    },
    "fileName": "/tests/cases/fourslash/renameDeclarationKeywords.ts"
  }
]

=== RenameOptions ===
{
 "findInStrings": false,
 "findInComments": false,
 "providePrefixAndSuffixTextForRename": true
}
/*====== /tests/cases/fourslash/renameDeclarationKeywords.ts ======*/

class Base {}
interface Implemented1 {}
class C1 extends Base implements Implemented1 {
    get e() { return 1; }
    set e(v) {}
}
interface I1 extends Base { }
type RENAME = { }
enum E { }
namespace N { }
module M { }
function fn() {}
var x;
let y;
const z = 1;

=== 0 ===
// === /tests/cases/fourslash/renameDeclarationKeywords.ts ===
// class Base {}
// interface Implemented1 {}
// class C1 extends Base implements Implemented1 {
//     get e() { return 1; }
//     set e(v) {}
// }
// interface I1 extends Base { }
// type [|T|] = { }
// enum E { }
// namespace N { }
// module M { }
// function fn() {}
// var x;
// let y;
// const z = 1;
=== ContextSpan ===
  // === /tests/cases/fourslash/renameDeclarationKeywords.ts ===
  // class Base {}
  // interface Implemented1 {}
  // class C1 extends Base implements Implemented1 {
  //     get e() { return 1; }
  //     set e(v) {}
  // }
  // interface I1 extends Base { }
  // [|type T = { }|]
  // enum E { }
  // namespace N { }
  // module M { }
  // function fn() {}
  // var x;
  // let y;
  // const z = 1;


[
  {
    "textSpan": {
      "start": 167,
      "length": 1
    },
    "fileName": "/tests/cases/fourslash/renameDeclarationKeywords.ts",
    "contextSpan": {
      "start": 162,
      "length": 12
    }
  }
]

=== RenameOptions ===
{
 "findInStrings": false,
 "findInComments": false,
 "providePrefixAndSuffixTextForRename": true
}
/*====== /tests/cases/fourslash/renameDeclarationKeywords.ts ======*/

class Base {}
interface Implemented1 {}
class C1 extends Base implements Implemented1 {
    get e() { return 1; }
    set e(v) {}
}
interface I1 extends Base { }
type T = { }
enum RENAME { }
namespace N { }
module M { }
function fn() {}
var x;
let y;
const z = 1;

=== 0 ===
// === /tests/cases/fourslash/renameDeclarationKeywords.ts ===
// class Base {}
// interface Implemented1 {}
// class C1 extends Base implements Implemented1 {
//     get e() { return 1; }
//     set e(v) {}
// }
// interface I1 extends Base { }
// type T = { }
// enum [|E|] { }
// namespace N { }
// module M { }
// function fn() {}
// var x;
// let y;
// const z = 1;
=== ContextSpan ===
  // === /tests/cases/fourslash/renameDeclarationKeywords.ts ===
  // class Base {}
  // interface Implemented1 {}
  // class C1 extends Base implements Implemented1 {
  //     get e() { return 1; }
  //     set e(v) {}
  // }
  // interface I1 extends Base { }
  // type T = { }
  // [|enum E { }|]
  // namespace N { }
  // module M { }
  // function fn() {}
  // var x;
  // let y;
  // const z = 1;


[
  {
    "textSpan": {
      "start": 180,
      "length": 1
    },
    "fileName": "/tests/cases/fourslash/renameDeclarationKeywords.ts",
    "contextSpan": {
      "start": 175,
      "length": 10
    }
  }
]

=== RenameOptions ===
{
 "findInStrings": false,
 "findInComments": false,
 "providePrefixAndSuffixTextForRename": true
}
/*====== /tests/cases/fourslash/renameDeclarationKeywords.ts ======*/

class Base {}
interface Implemented1 {}
class C1 extends Base implements Implemented1 {
    get e() { return 1; }
    set e(v) {}
}
interface I1 extends Base { }
type T = { }
enum E { }
namespace RENAME { }
module M { }
function fn() {}
var x;
let y;
const z = 1;

=== 0 ===
// === /tests/cases/fourslash/renameDeclarationKeywords.ts ===
// class Base {}
// interface Implemented1 {}
// class C1 extends Base implements Implemented1 {
//     get e() { return 1; }
//     set e(v) {}
// }
// interface I1 extends Base { }
// type T = { }
// enum E { }
// namespace [|N|] { }
// module M { }
// function fn() {}
// var x;
// let y;
// const z = 1;
=== ContextSpan ===
  // === /tests/cases/fourslash/renameDeclarationKeywords.ts ===
  // class Base {}
  // interface Implemented1 {}
  // class C1 extends Base implements Implemented1 {
  //     get e() { return 1; }
  //     set e(v) {}
  // }
  // interface I1 extends Base { }
  // type T = { }
  // enum E { }
  // [|namespace N { }|]
  // module M { }
  // function fn() {}
  // var x;
  // let y;
  // const z = 1;


[
  {
    "textSpan": {
      "start": 196,
      "length": 1
    },
    "fileName": "/tests/cases/fourslash/renameDeclarationKeywords.ts",
    "contextSpan": {
      "start": 186,
      "length": 15
    }
  }
]

=== RenameOptions ===
{
 "findInStrings": false,
 "findInComments": false,
 "providePrefixAndSuffixTextForRename": true
}
/*====== /tests/cases/fourslash/renameDeclarationKeywords.ts ======*/

class Base {}
interface Implemented1 {}
class C1 extends Base implements Implemented1 {
    get e() { return 1; }
    set e(v) {}
}
interface I1 extends Base { }
type T = { }
enum E { }
namespace N { }
module RENAME { }
function fn() {}
var x;
let y;
const z = 1;

=== 0 ===
// === /tests/cases/fourslash/renameDeclarationKeywords.ts ===
// class Base {}
// interface Implemented1 {}
// class C1 extends Base implements Implemented1 {
//     get e() { return 1; }
//     set e(v) {}
// }
// interface I1 extends Base { }
// type T = { }
// enum E { }
// namespace N { }
// module [|M|] { }
// function fn() {}
// var x;
// let y;
// const z = 1;
=== ContextSpan ===
  // === /tests/cases/fourslash/renameDeclarationKeywords.ts ===
  // class Base {}
  // interface Implemented1 {}
  // class C1 extends Base implements Implemented1 {
  //     get e() { return 1; }
  //     set e(v) {}
  // }
  // interface I1 extends Base { }
  // type T = { }
  // enum E { }
  // namespace N { }
  // [|module M { }|]
  // function fn() {}
  // var x;
  // let y;
  // const z = 1;


[
  {
    "textSpan": {
      "start": 209,
      "length": 1
    },
    "fileName": "/tests/cases/fourslash/renameDeclarationKeywords.ts",
    "contextSpan": {
      "start": 202,
      "length": 12
    }
  }
]

=== RenameOptions ===
{
 "findInStrings": false,
 "findInComments": false,
 "providePrefixAndSuffixTextForRename": true
}
/*====== /tests/cases/fourslash/renameDeclarationKeywords.ts ======*/

class Base {}
interface Implemented1 {}
class C1 extends Base implements Implemented1 {
    get e() { return 1; }
    set e(v) {}
}
interface I1 extends Base { }
type T = { }
enum E { }
namespace N { }
module M { }
function RENAME() {}
var x;
let y;
const z = 1;

=== 0 ===
// === /tests/cases/fourslash/renameDeclarationKeywords.ts ===
// class Base {}
// interface Implemented1 {}
// class C1 extends Base implements Implemented1 {
//     get e() { return 1; }
//     set e(v) {}
// }
// interface I1 extends Base { }
// type T = { }
// enum E { }
// namespace N { }
// module M { }
// function [|fn|]() {}
// var x;
// let y;
// const z = 1;
=== ContextSpan ===
  // === /tests/cases/fourslash/renameDeclarationKeywords.ts ===
  // class Base {}
  // interface Implemented1 {}
  // class C1 extends Base implements Implemented1 {
  //     get e() { return 1; }
  //     set e(v) {}
  // }
  // interface I1 extends Base { }
  // type T = { }
  // enum E { }
  // namespace N { }
  // module M { }
  // [|function fn() {}|]
  // var x;
  // let y;
  // const z = 1;


[
  {
    "textSpan": {
      "start": 224,
      "length": 2
    },
    "fileName": "/tests/cases/fourslash/renameDeclarationKeywords.ts",
    "contextSpan": {
      "start": 215,
      "length": 16
    }
  }
]

=== RenameOptions ===
{
 "findInStrings": false,
 "findInComments": false,
 "providePrefixAndSuffixTextForRename": true
}
/*====== /tests/cases/fourslash/renameDeclarationKeywords.ts ======*/

class Base {}
interface Implemented1 {}
class C1 extends Base implements Implemented1 {
    get e() { return 1; }
    set e(v) {}
}
interface I1 extends Base { }
type T = { }
enum E { }
namespace N { }
module M { }
function fn() {}
var RENAME;
let y;
const z = 1;

=== 0 ===
// === /tests/cases/fourslash/renameDeclarationKeywords.ts ===
// class Base {}
// interface Implemented1 {}
// class C1 extends Base implements Implemented1 {
//     get e() { return 1; }
//     set e(v) {}
// }
// interface I1 extends Base { }
// type T = { }
// enum E { }
// namespace N { }
// module M { }
// function fn() {}
// var [|x|];
// let y;
// const z = 1;
=== ContextSpan ===
  // === /tests/cases/fourslash/renameDeclarationKeywords.ts ===
  // class Base {}
  // interface Implemented1 {}
  // class C1 extends Base implements Implemented1 {
  //     get e() { return 1; }
  //     set e(v) {}
  // }
  // interface I1 extends Base { }
  // type T = { }
  // enum E { }
  // namespace N { }
  // module M { }
  // function fn() {}
  // [|var x;|]
  // let y;
  // const z = 1;


[
  {
    "textSpan": {
      "start": 236,
      "length": 1
    },
    "fileName": "/tests/cases/fourslash/renameDeclarationKeywords.ts",
    "contextSpan": {
      "start": 232,
      "length": 6
    }
  }
]

=== RenameOptions ===
{
 "findInStrings": false,
 "findInComments": false,
 "providePrefixAndSuffixTextForRename": true
}
/*====== /tests/cases/fourslash/renameDeclarationKeywords.ts ======*/

class Base {}
interface Implemented1 {}
class C1 extends Base implements Implemented1 {
    get e() { return 1; }
    set e(v) {}
}
interface I1 extends Base { }
type T = { }
enum E { }
namespace N { }
module M { }
function fn() {}
var x;
let RENAME;
const z = 1;

=== 0 ===
// === /tests/cases/fourslash/renameDeclarationKeywords.ts ===
// class Base {}
// interface Implemented1 {}
// class C1 extends Base implements Implemented1 {
//     get e() { return 1; }
//     set e(v) {}
// }
// interface I1 extends Base { }
// type T = { }
// enum E { }
// namespace N { }
// module M { }
// function fn() {}
// var x;
// let [|y|];
// const z = 1;
=== ContextSpan ===
  // === /tests/cases/fourslash/renameDeclarationKeywords.ts ===
  // class Base {}
  // interface Implemented1 {}
  // class C1 extends Base implements Implemented1 {
  //     get e() { return 1; }
  //     set e(v) {}
  // }
  // interface I1 extends Base { }
  // type T = { }
  // enum E { }
  // namespace N { }
  // module M { }
  // function fn() {}
  // var x;
  // [|let y;|]
  // const z = 1;


[
  {
    "textSpan": {
      "start": 243,
      "length": 1
    },
    "fileName": "/tests/cases/fourslash/renameDeclarationKeywords.ts",
    "contextSpan": {
      "start": 239,
      "length": 6
    }
  }
]

=== RenameOptions ===
{
 "findInStrings": false,
 "findInComments": false,
 "providePrefixAndSuffixTextForRename": true
}
/*====== /tests/cases/fourslash/renameDeclarationKeywords.ts ======*/

class Base {}
interface Implemented1 {}
class C1 extends Base implements Implemented1 {
    get e() { return 1; }
    set e(v) {}
}
interface I1 extends Base { }
type T = { }
enum E { }
namespace N { }
module M { }
function fn() {}
var x;
let y;
const RENAME = 1;

=== 0 ===
// === /tests/cases/fourslash/renameDeclarationKeywords.ts ===
// class Base {}
// interface Implemented1 {}
// class C1 extends Base implements Implemented1 {
//     get e() { return 1; }
//     set e(v) {}
// }
// interface I1 extends Base { }
// type T = { }
// enum E { }
// namespace N { }
// module M { }
// function fn() {}
// var x;
// let y;
// const [|z|] = 1;
=== ContextSpan ===
  // === /tests/cases/fourslash/renameDeclarationKeywords.ts ===
  // class Base {}
  // interface Implemented1 {}
  // class C1 extends Base implements Implemented1 {
  //     get e() { return 1; }
  //     set e(v) {}
  // }
  // interface I1 extends Base { }
  // type T = { }
  // enum E { }
  // namespace N { }
  // module M { }
  // function fn() {}
  // var x;
  // let y;
  // [|const z = 1;|]


[
  {
    "textSpan": {
      "start": 252,
      "length": 1
    },
    "fileName": "/tests/cases/fourslash/renameDeclarationKeywords.ts",
    "contextSpan": {
      "start": 246,
      "length": 12
    }
  }
]