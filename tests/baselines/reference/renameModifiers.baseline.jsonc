=== RenameOptions ===
{
 "findInStrings": false,
 "findInComments": false,
 "providePrefixAndSuffixTextForRename": true
}
/*====== /tests/cases/fourslash/renameModifiers.ts ======*/

declare abstract class RENAME {
    static a;
    readonly b;
    public c;
    protected d;
    private e;
}
const enum E {
}
async function fn() {}
export default class C2 {}

=== 0 ===
// === /tests/cases/fourslash/renameModifiers.ts ===
// declare abstract class [|C1|] {
//     static a;
//     readonly b;
//     public c;
//     protected d;
//     private e;
// }
// const enum E {
// }
// async function fn() {}
// export default class C2 {}
=== ContextSpan ===
  // === /tests/cases/fourslash/renameModifiers.ts ===
  // [|declare abstract class C1 {
  //     static a;
  //     readonly b;
  //     public c;
  //     protected d;
  //     private e;
  // }|]
  // const enum E {
  // }
  // async function fn() {}
  // export default class C2 {}


[
  {
    "textSpan": {
      "start": 23,
      "length": 2
    },
    "fileName": "/tests/cases/fourslash/renameModifiers.ts",
    "contextSpan": {
      "start": 0,
      "length": 105
    }
  }
]

=== RenameOptions ===
{
 "findInStrings": false,
 "findInComments": false,
 "providePrefixAndSuffixTextForRename": true
}
/*====== /tests/cases/fourslash/renameModifiers.ts ======*/

declare abstract class RENAME {
    static a;
    readonly b;
    public c;
    protected d;
    private e;
}
const enum E {
}
async function fn() {}
export default class C2 {}

=== 0 ===
// === /tests/cases/fourslash/renameModifiers.ts ===
// declare abstract class [|C1|] {
//     static a;
//     readonly b;
//     public c;
//     protected d;
//     private e;
// }
// const enum E {
// }
// async function fn() {}
// export default class C2 {}
=== ContextSpan ===
  // === /tests/cases/fourslash/renameModifiers.ts ===
  // [|declare abstract class C1 {
  //     static a;
  //     readonly b;
  //     public c;
  //     protected d;
  //     private e;
  // }|]
  // const enum E {
  // }
  // async function fn() {}
  // export default class C2 {}


[
  {
    "textSpan": {
      "start": 23,
      "length": 2
    },
    "fileName": "/tests/cases/fourslash/renameModifiers.ts",
    "contextSpan": {
      "start": 0,
      "length": 105
    }
  }
]

=== RenameOptions ===
{
 "findInStrings": false,
 "findInComments": false,
 "providePrefixAndSuffixTextForRename": true
}
/*====== /tests/cases/fourslash/renameModifiers.ts ======*/

declare abstract class C1 {
    static RENAME;
    readonly b;
    public c;
    protected d;
    private e;
}
const enum E {
}
async function fn() {}
export default class C2 {}

=== 0 ===
// === /tests/cases/fourslash/renameModifiers.ts ===
// declare abstract class C1 {
//     static [|a|];
//     readonly b;
//     public c;
//     protected d;
//     private e;
// }
// const enum E {
// }
// async function fn() {}
// export default class C2 {}
=== ContextSpan ===
  // === /tests/cases/fourslash/renameModifiers.ts ===
  // declare abstract class C1 {
  //     [|static a;|]
  //     readonly b;
  //     public c;
  //     protected d;
  //     private e;
  // }
  // const enum E {
  // }
  // async function fn() {}
  // export default class C2 {}


[
  {
    "textSpan": {
      "start": 39,
      "length": 1
    },
    "fileName": "/tests/cases/fourslash/renameModifiers.ts",
    "contextSpan": {
      "start": 32,
      "length": 9
    }
  }
]

=== RenameOptions ===
{
 "findInStrings": false,
 "findInComments": false,
 "providePrefixAndSuffixTextForRename": true
}
/*====== /tests/cases/fourslash/renameModifiers.ts ======*/

declare abstract class C1 {
    static a;
    readonly RENAME;
    public c;
    protected d;
    private e;
}
const enum E {
}
async function fn() {}
export default class C2 {}

=== 0 ===
// === /tests/cases/fourslash/renameModifiers.ts ===
// declare abstract class C1 {
//     static a;
//     readonly [|b|];
//     public c;
//     protected d;
//     private e;
// }
// const enum E {
// }
// async function fn() {}
// export default class C2 {}
=== ContextSpan ===
  // === /tests/cases/fourslash/renameModifiers.ts ===
  // declare abstract class C1 {
  //     static a;
  //     [|readonly b;|]
  //     public c;
  //     protected d;
  //     private e;
  // }
  // const enum E {
  // }
  // async function fn() {}
  // export default class C2 {}


[
  {
    "textSpan": {
      "start": 55,
      "length": 1
    },
    "fileName": "/tests/cases/fourslash/renameModifiers.ts",
    "contextSpan": {
      "start": 46,
      "length": 11
    }
  }
]

=== RenameOptions ===
{
 "findInStrings": false,
 "findInComments": false,
 "providePrefixAndSuffixTextForRename": true
}
/*====== /tests/cases/fourslash/renameModifiers.ts ======*/

declare abstract class C1 {
    static a;
    readonly b;
    public RENAME;
    protected d;
    private e;
}
const enum E {
}
async function fn() {}
export default class C2 {}

=== 0 ===
// === /tests/cases/fourslash/renameModifiers.ts ===
// declare abstract class C1 {
//     static a;
//     readonly b;
//     public [|c|];
//     protected d;
//     private e;
// }
// const enum E {
// }
// async function fn() {}
// export default class C2 {}
=== ContextSpan ===
  // === /tests/cases/fourslash/renameModifiers.ts ===
  // declare abstract class C1 {
  //     static a;
  //     readonly b;
  //     [|public c;|]
  //     protected d;
  //     private e;
  // }
  // const enum E {
  // }
  // async function fn() {}
  // export default class C2 {}


[
  {
    "textSpan": {
      "start": 69,
      "length": 1
    },
    "fileName": "/tests/cases/fourslash/renameModifiers.ts",
    "contextSpan": {
      "start": 62,
      "length": 9
    }
  }
]

=== RenameOptions ===
{
 "findInStrings": false,
 "findInComments": false,
 "providePrefixAndSuffixTextForRename": true
}
/*====== /tests/cases/fourslash/renameModifiers.ts ======*/

declare abstract class C1 {
    static a;
    readonly b;
    public c;
    protected RENAME;
    private e;
}
const enum E {
}
async function fn() {}
export default class C2 {}

=== 0 ===
// === /tests/cases/fourslash/renameModifiers.ts ===
// declare abstract class C1 {
//     static a;
//     readonly b;
//     public c;
//     protected [|d|];
//     private e;
// }
// const enum E {
// }
// async function fn() {}
// export default class C2 {}
=== ContextSpan ===
  // === /tests/cases/fourslash/renameModifiers.ts ===
  // declare abstract class C1 {
  //     static a;
  //     readonly b;
  //     public c;
  //     [|protected d;|]
  //     private e;
  // }
  // const enum E {
  // }
  // async function fn() {}
  // export default class C2 {}


[
  {
    "textSpan": {
      "start": 86,
      "length": 1
    },
    "fileName": "/tests/cases/fourslash/renameModifiers.ts",
    "contextSpan": {
      "start": 76,
      "length": 12
    }
  }
]

=== RenameOptions ===
{
 "findInStrings": false,
 "findInComments": false,
 "providePrefixAndSuffixTextForRename": true
}
/*====== /tests/cases/fourslash/renameModifiers.ts ======*/

declare abstract class C1 {
    static a;
    readonly b;
    public c;
    protected d;
    private RENAME;
}
const enum E {
}
async function fn() {}
export default class C2 {}

=== 0 ===
// === /tests/cases/fourslash/renameModifiers.ts ===
// declare abstract class C1 {
//     static a;
//     readonly b;
//     public c;
//     protected d;
//     private [|e|];
// }
// const enum E {
// }
// async function fn() {}
// export default class C2 {}
=== ContextSpan ===
  // === /tests/cases/fourslash/renameModifiers.ts ===
  // declare abstract class C1 {
  //     static a;
  //     readonly b;
  //     public c;
  //     protected d;
  //     [|private e;|]
  // }
  // const enum E {
  // }
  // async function fn() {}
  // export default class C2 {}


[
  {
    "textSpan": {
      "start": 101,
      "length": 1
    },
    "fileName": "/tests/cases/fourslash/renameModifiers.ts",
    "contextSpan": {
      "start": 93,
      "length": 10
    }
  }
]

=== RenameOptions ===
{
 "findInStrings": false,
 "findInComments": false,
 "providePrefixAndSuffixTextForRename": true
}
/*====== /tests/cases/fourslash/renameModifiers.ts ======*/

declare abstract class C1 {
    static a;
    readonly b;
    public c;
    protected d;
    private e;
}
const enum RENAME {
}
async function fn() {}
export default class C2 {}

=== 0 ===
// === /tests/cases/fourslash/renameModifiers.ts ===
// declare abstract class C1 {
//     static a;
//     readonly b;
//     public c;
//     protected d;
//     private e;
// }
// const enum [|E|] {
// }
// async function fn() {}
// export default class C2 {}
=== ContextSpan ===
  // === /tests/cases/fourslash/renameModifiers.ts ===
  // declare abstract class C1 {
  //     static a;
  //     readonly b;
  //     public c;
  //     protected d;
  //     private e;
  // }
  // [|const enum E {
  // }|]
  // async function fn() {}
  // export default class C2 {}


[
  {
    "textSpan": {
      "start": 117,
      "length": 1
    },
    "fileName": "/tests/cases/fourslash/renameModifiers.ts",
    "contextSpan": {
      "start": 106,
      "length": 16
    }
  }
]

=== RenameOptions ===
{
 "findInStrings": false,
 "findInComments": false,
 "providePrefixAndSuffixTextForRename": true
}
/*====== /tests/cases/fourslash/renameModifiers.ts ======*/

declare abstract class C1 {
    static a;
    readonly b;
    public c;
    protected d;
    private e;
}
const enum E {
}
async function RENAME() {}
export default class C2 {}

=== 0 ===
// === /tests/cases/fourslash/renameModifiers.ts ===
// declare abstract class C1 {
//     static a;
//     readonly b;
//     public c;
//     protected d;
//     private e;
// }
// const enum E {
// }
// async function [|fn|]() {}
// export default class C2 {}
=== ContextSpan ===
  // === /tests/cases/fourslash/renameModifiers.ts ===
  // declare abstract class C1 {
  //     static a;
  //     readonly b;
  //     public c;
  //     protected d;
  //     private e;
  // }
  // const enum E {
  // }
  // [|async function fn() {}|]
  // export default class C2 {}


[
  {
    "textSpan": {
      "start": 138,
      "length": 2
    },
    "fileName": "/tests/cases/fourslash/renameModifiers.ts",
    "contextSpan": {
      "start": 123,
      "length": 22
    }
  }
]

=== RenameOptions ===
{
 "findInStrings": false,
 "findInComments": false,
 "providePrefixAndSuffixTextForRename": true
}
/*====== /tests/cases/fourslash/renameModifiers.ts ======*/

declare abstract class C1 {
    static a;
    readonly b;
    public c;
    protected d;
    private e;
}
const enum E {
}
async function fn() {}
export default class RENAME {}

=== 0 ===
// === /tests/cases/fourslash/renameModifiers.ts ===
// declare abstract class C1 {
//     static a;
//     readonly b;
//     public c;
//     protected d;
//     private e;
// }
// const enum E {
// }
// async function fn() {}
// export default class [|C2|] {}
=== ContextSpan ===
  // === /tests/cases/fourslash/renameModifiers.ts ===
  // declare abstract class C1 {
  //     static a;
  //     readonly b;
  //     public c;
  //     protected d;
  //     private e;
  // }
  // const enum E {
  // }
  // async function fn() {}
  // [|export default class C2 {}|]


[
  {
    "textSpan": {
      "start": 167,
      "length": 2
    },
    "fileName": "/tests/cases/fourslash/renameModifiers.ts",
    "contextSpan": {
      "start": 146,
      "length": 26
    }
  }
]

=== RenameOptions ===
{
 "findInStrings": false,
 "findInComments": false,
 "providePrefixAndSuffixTextForRename": true
}
/*====== /tests/cases/fourslash/renameModifiers.ts ======*/

declare abstract class C1 {
    static a;
    readonly b;
    public c;
    protected d;
    private e;
}
const enum E {
}
async function fn() {}
export default class RENAME {}

=== 0 ===
// === /tests/cases/fourslash/renameModifiers.ts ===
// declare abstract class C1 {
//     static a;
//     readonly b;
//     public c;
//     protected d;
//     private e;
// }
// const enum E {
// }
// async function fn() {}
// export default class [|C2|] {}
=== ContextSpan ===
  // === /tests/cases/fourslash/renameModifiers.ts ===
  // declare abstract class C1 {
  //     static a;
  //     readonly b;
  //     public c;
  //     protected d;
  //     private e;
  // }
  // const enum E {
  // }
  // async function fn() {}
  // [|export default class C2 {}|]


[
  {
    "textSpan": {
      "start": 167,
      "length": 2
    },
    "fileName": "/tests/cases/fourslash/renameModifiers.ts",
    "contextSpan": {
      "start": 146,
      "length": 26
    }
  }
]