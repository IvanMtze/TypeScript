// === RenameOptions ===
{
 "findInStrings": false,
 "findInComments": false,
 "providePrefixAndSuffixTextForRename": true
}
// === /tests/cases/fourslash/file.tsx ===
// declare module JSX {
//     interface Element { }
//     interface IntrinsicElements {
//     }
//     interface ElementAttributesProperty { props; }
// }
// interface ClickableProps {
//     children?: string;
//     className?: string;
// }
// interface ButtonProps extends ClickableProps {
//     [|RENAME|](event?: React.MouseEvent<HTMLButtonElement>): void;
// }
// interface LinkProps extends ClickableProps {
//     goTo: string;
// }
// declare function MainButton(buttonProps: ButtonProps): JSX.Element;
// declare function MainButton(linkProps: LinkProps): JSX.Element;
// declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
// let opt = <MainButton />;
// let opt = <MainButton children="chidlren" />;
// let opt = <MainButton RENAME={()=>{}} />;
// let opt = <MainButton RENAME={()=>{}} ignore-prop />;
// let opt = <MainButton goTo="goTo" />;
// let opt = <MainButton wrong />;

// === 0 ===
  // === /tests/cases/fourslash/file.tsx ===
  // declare module JSX {
  //     interface Element { }
  //     interface IntrinsicElements {
  //     }
  //     interface ElementAttributesProperty { props; }
  // }
  // interface ClickableProps {
  //     children?: string;
  //     className?: string;
  // }
  // interface ButtonProps extends ClickableProps {
  //     [|onClick|](event?: React.MouseEvent<HTMLButtonElement>): void;
  // }
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
  // declare function MainButton(linkProps: LinkProps): JSX.Element;
  // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <MainButton />;
  // let opt = <MainButton children="chidlren" />;
  // let opt = <MainButton onClick={()=>{}} />;
  // let opt = <MainButton onClick={()=>{}} ignore-prop />;
  // let opt = <MainButton goTo="goTo" />;
  // let opt = <MainButton wrong />;
    // === ContextSpan ===
    // === /tests/cases/fourslash/file.tsx ===
    // declare module JSX {
    //     interface Element { }
    //     interface IntrinsicElements {
    //     }
    //     interface ElementAttributesProperty { props; }
    // }
    // interface ClickableProps {
    //     children?: string;
    //     className?: string;
    // }
    // interface ButtonProps extends ClickableProps {
    //     [|onClick(event?: React.MouseEvent<HTMLButtonElement>): void;|]
    // }
    // interface LinkProps extends ClickableProps {
    //     goTo: string;
    // }
    // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
    // declare function MainButton(linkProps: LinkProps): JSX.Element;
    // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
    // let opt = <MainButton />;
    // let opt = <MainButton children="chidlren" />;
    // let opt = <MainButton onClick={()=>{}} />;
    // let opt = <MainButton onClick={()=>{}} ignore-prop />;
    // let opt = <MainButton goTo="goTo" />;
    // let opt = <MainButton wrong />;
// === 1 ===
  // === /tests/cases/fourslash/file.tsx ===
  // declare module JSX {
  //     interface Element { }
  //     interface IntrinsicElements {
  //     }
  //     interface ElementAttributesProperty { props; }
  // }
  // interface ClickableProps {
  //     children?: string;
  //     className?: string;
  // }
  // interface ButtonProps extends ClickableProps {
  //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
  // }
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
  // declare function MainButton(linkProps: LinkProps): JSX.Element;
  // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <MainButton />;
  // let opt = <MainButton children="chidlren" />;
  // let opt = <MainButton [|onClick|]={()=>{}} />;
  // let opt = <MainButton onClick={()=>{}} ignore-prop />;
  // let opt = <MainButton goTo="goTo" />;
  // let opt = <MainButton wrong />;
    // === ContextSpan ===
    // === /tests/cases/fourslash/file.tsx ===
    // declare module JSX {
    //     interface Element { }
    //     interface IntrinsicElements {
    //     }
    //     interface ElementAttributesProperty { props; }
    // }
    // interface ClickableProps {
    //     children?: string;
    //     className?: string;
    // }
    // interface ButtonProps extends ClickableProps {
    //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
    // }
    // interface LinkProps extends ClickableProps {
    //     goTo: string;
    // }
    // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
    // declare function MainButton(linkProps: LinkProps): JSX.Element;
    // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
    // let opt = <MainButton />;
    // let opt = <MainButton children="chidlren" />;
    // let opt = <MainButton [|onClick={()=>{}}|] />;
    // let opt = <MainButton onClick={()=>{}} ignore-prop />;
    // let opt = <MainButton goTo="goTo" />;
    // let opt = <MainButton wrong />;
// === 2 ===
  // === /tests/cases/fourslash/file.tsx ===
  // declare module JSX {
  //     interface Element { }
  //     interface IntrinsicElements {
  //     }
  //     interface ElementAttributesProperty { props; }
  // }
  // interface ClickableProps {
  //     children?: string;
  //     className?: string;
  // }
  // interface ButtonProps extends ClickableProps {
  //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
  // }
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
  // declare function MainButton(linkProps: LinkProps): JSX.Element;
  // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <MainButton />;
  // let opt = <MainButton children="chidlren" />;
  // let opt = <MainButton onClick={()=>{}} />;
  // let opt = <MainButton [|onClick|]={()=>{}} ignore-prop />;
  // let opt = <MainButton goTo="goTo" />;
  // let opt = <MainButton wrong />;
    // === ContextSpan ===
    // === /tests/cases/fourslash/file.tsx ===
    // declare module JSX {
    //     interface Element { }
    //     interface IntrinsicElements {
    //     }
    //     interface ElementAttributesProperty { props; }
    // }
    // interface ClickableProps {
    //     children?: string;
    //     className?: string;
    // }
    // interface ButtonProps extends ClickableProps {
    //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
    // }
    // interface LinkProps extends ClickableProps {
    //     goTo: string;
    // }
    // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
    // declare function MainButton(linkProps: LinkProps): JSX.Element;
    // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
    // let opt = <MainButton />;
    // let opt = <MainButton children="chidlren" />;
    // let opt = <MainButton onClick={()=>{}} />;
    // let opt = <MainButton [|onClick={()=>{}}|] ignore-prop />;
    // let opt = <MainButton goTo="goTo" />;
    // let opt = <MainButton wrong />;


[
  {
    "textSpan": {
      "start": 267,
      "length": 7
    },
    "fileName": "/tests/cases/fourslash/file.tsx",
    "contextSpan": {
      "start": 267,
      "length": 59
    }
  },
  {
    "textSpan": {
      "start": 694,
      "length": 7
    },
    "fileName": "/tests/cases/fourslash/file.tsx",
    "contextSpan": {
      "start": 694,
      "length": 16
    }
  },
  {
    "textSpan": {
      "start": 737,
      "length": 7
    },
    "fileName": "/tests/cases/fourslash/file.tsx",
    "contextSpan": {
      "start": 737,
      "length": 16
    }
  }
]

// === RenameOptions ===
{
 "findInStrings": false,
 "findInComments": false,
 "providePrefixAndSuffixTextForRename": true
}
// === /tests/cases/fourslash/file.tsx ===
// declare module JSX {
//     interface Element { }
//     interface IntrinsicElements {
//     }
//     interface ElementAttributesProperty { props; }
// }
// interface ClickableProps {
//     children?: string;
//     className?: string;
// }
// interface ButtonProps extends ClickableProps {
//     RENAME(event?: React.MouseEvent<HTMLButtonElement>): void;
// }
// interface LinkProps extends ClickableProps {
//     goTo: string;
// }
// declare function MainButton(buttonProps: ButtonProps): JSX.Element;
// declare function MainButton(linkProps: LinkProps): JSX.Element;
// declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
// let opt = <MainButton />;
// let opt = <MainButton children="chidlren" />;
// let opt = <MainButton [|RENAME|]={()=>{}} />;
// let opt = <MainButton RENAME={()=>{}} ignore-prop />;
// let opt = <MainButton goTo="goTo" />;
// let opt = <MainButton wrong />;

// === 0 ===
  // === /tests/cases/fourslash/file.tsx ===
  // declare module JSX {
  //     interface Element { }
  //     interface IntrinsicElements {
  //     }
  //     interface ElementAttributesProperty { props; }
  // }
  // interface ClickableProps {
  //     children?: string;
  //     className?: string;
  // }
  // interface ButtonProps extends ClickableProps {
  //     [|onClick|](event?: React.MouseEvent<HTMLButtonElement>): void;
  // }
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
  // declare function MainButton(linkProps: LinkProps): JSX.Element;
  // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <MainButton />;
  // let opt = <MainButton children="chidlren" />;
  // let opt = <MainButton onClick={()=>{}} />;
  // let opt = <MainButton onClick={()=>{}} ignore-prop />;
  // let opt = <MainButton goTo="goTo" />;
  // let opt = <MainButton wrong />;
    // === ContextSpan ===
    // === /tests/cases/fourslash/file.tsx ===
    // declare module JSX {
    //     interface Element { }
    //     interface IntrinsicElements {
    //     }
    //     interface ElementAttributesProperty { props; }
    // }
    // interface ClickableProps {
    //     children?: string;
    //     className?: string;
    // }
    // interface ButtonProps extends ClickableProps {
    //     [|onClick(event?: React.MouseEvent<HTMLButtonElement>): void;|]
    // }
    // interface LinkProps extends ClickableProps {
    //     goTo: string;
    // }
    // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
    // declare function MainButton(linkProps: LinkProps): JSX.Element;
    // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
    // let opt = <MainButton />;
    // let opt = <MainButton children="chidlren" />;
    // let opt = <MainButton onClick={()=>{}} />;
    // let opt = <MainButton onClick={()=>{}} ignore-prop />;
    // let opt = <MainButton goTo="goTo" />;
    // let opt = <MainButton wrong />;
// === 1 ===
  // === /tests/cases/fourslash/file.tsx ===
  // declare module JSX {
  //     interface Element { }
  //     interface IntrinsicElements {
  //     }
  //     interface ElementAttributesProperty { props; }
  // }
  // interface ClickableProps {
  //     children?: string;
  //     className?: string;
  // }
  // interface ButtonProps extends ClickableProps {
  //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
  // }
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
  // declare function MainButton(linkProps: LinkProps): JSX.Element;
  // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <MainButton />;
  // let opt = <MainButton children="chidlren" />;
  // let opt = <MainButton [|onClick|]={()=>{}} />;
  // let opt = <MainButton onClick={()=>{}} ignore-prop />;
  // let opt = <MainButton goTo="goTo" />;
  // let opt = <MainButton wrong />;
    // === ContextSpan ===
    // === /tests/cases/fourslash/file.tsx ===
    // declare module JSX {
    //     interface Element { }
    //     interface IntrinsicElements {
    //     }
    //     interface ElementAttributesProperty { props; }
    // }
    // interface ClickableProps {
    //     children?: string;
    //     className?: string;
    // }
    // interface ButtonProps extends ClickableProps {
    //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
    // }
    // interface LinkProps extends ClickableProps {
    //     goTo: string;
    // }
    // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
    // declare function MainButton(linkProps: LinkProps): JSX.Element;
    // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
    // let opt = <MainButton />;
    // let opt = <MainButton children="chidlren" />;
    // let opt = <MainButton [|onClick={()=>{}}|] />;
    // let opt = <MainButton onClick={()=>{}} ignore-prop />;
    // let opt = <MainButton goTo="goTo" />;
    // let opt = <MainButton wrong />;
// === 2 ===
  // === /tests/cases/fourslash/file.tsx ===
  // declare module JSX {
  //     interface Element { }
  //     interface IntrinsicElements {
  //     }
  //     interface ElementAttributesProperty { props; }
  // }
  // interface ClickableProps {
  //     children?: string;
  //     className?: string;
  // }
  // interface ButtonProps extends ClickableProps {
  //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
  // }
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
  // declare function MainButton(linkProps: LinkProps): JSX.Element;
  // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <MainButton />;
  // let opt = <MainButton children="chidlren" />;
  // let opt = <MainButton onClick={()=>{}} />;
  // let opt = <MainButton [|onClick|]={()=>{}} ignore-prop />;
  // let opt = <MainButton goTo="goTo" />;
  // let opt = <MainButton wrong />;
    // === ContextSpan ===
    // === /tests/cases/fourslash/file.tsx ===
    // declare module JSX {
    //     interface Element { }
    //     interface IntrinsicElements {
    //     }
    //     interface ElementAttributesProperty { props; }
    // }
    // interface ClickableProps {
    //     children?: string;
    //     className?: string;
    // }
    // interface ButtonProps extends ClickableProps {
    //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
    // }
    // interface LinkProps extends ClickableProps {
    //     goTo: string;
    // }
    // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
    // declare function MainButton(linkProps: LinkProps): JSX.Element;
    // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
    // let opt = <MainButton />;
    // let opt = <MainButton children="chidlren" />;
    // let opt = <MainButton onClick={()=>{}} />;
    // let opt = <MainButton [|onClick={()=>{}}|] ignore-prop />;
    // let opt = <MainButton goTo="goTo" />;
    // let opt = <MainButton wrong />;


[
  {
    "textSpan": {
      "start": 267,
      "length": 7
    },
    "fileName": "/tests/cases/fourslash/file.tsx",
    "contextSpan": {
      "start": 267,
      "length": 59
    }
  },
  {
    "textSpan": {
      "start": 694,
      "length": 7
    },
    "fileName": "/tests/cases/fourslash/file.tsx",
    "contextSpan": {
      "start": 694,
      "length": 16
    }
  },
  {
    "textSpan": {
      "start": 737,
      "length": 7
    },
    "fileName": "/tests/cases/fourslash/file.tsx",
    "contextSpan": {
      "start": 737,
      "length": 16
    }
  }
]

// === RenameOptions ===
{
 "findInStrings": false,
 "findInComments": false,
 "providePrefixAndSuffixTextForRename": true
}
// === /tests/cases/fourslash/file.tsx ===
// declare module JSX {
//     interface Element { }
//     interface IntrinsicElements {
//     }
//     interface ElementAttributesProperty { props; }
// }
// interface ClickableProps {
//     children?: string;
//     className?: string;
// }
// interface ButtonProps extends ClickableProps {
//     RENAME(event?: React.MouseEvent<HTMLButtonElement>): void;
// }
// interface LinkProps extends ClickableProps {
//     goTo: string;
// }
// declare function MainButton(buttonProps: ButtonProps): JSX.Element;
// declare function MainButton(linkProps: LinkProps): JSX.Element;
// declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
// let opt = <MainButton />;
// let opt = <MainButton children="chidlren" />;
// let opt = <MainButton RENAME={()=>{}} />;
// let opt = <MainButton [|RENAME|]={()=>{}} ignore-prop />;
// let opt = <MainButton goTo="goTo" />;
// let opt = <MainButton wrong />;

// === 0 ===
  // === /tests/cases/fourslash/file.tsx ===
  // declare module JSX {
  //     interface Element { }
  //     interface IntrinsicElements {
  //     }
  //     interface ElementAttributesProperty { props; }
  // }
  // interface ClickableProps {
  //     children?: string;
  //     className?: string;
  // }
  // interface ButtonProps extends ClickableProps {
  //     [|onClick|](event?: React.MouseEvent<HTMLButtonElement>): void;
  // }
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
  // declare function MainButton(linkProps: LinkProps): JSX.Element;
  // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <MainButton />;
  // let opt = <MainButton children="chidlren" />;
  // let opt = <MainButton onClick={()=>{}} />;
  // let opt = <MainButton onClick={()=>{}} ignore-prop />;
  // let opt = <MainButton goTo="goTo" />;
  // let opt = <MainButton wrong />;
    // === ContextSpan ===
    // === /tests/cases/fourslash/file.tsx ===
    // declare module JSX {
    //     interface Element { }
    //     interface IntrinsicElements {
    //     }
    //     interface ElementAttributesProperty { props; }
    // }
    // interface ClickableProps {
    //     children?: string;
    //     className?: string;
    // }
    // interface ButtonProps extends ClickableProps {
    //     [|onClick(event?: React.MouseEvent<HTMLButtonElement>): void;|]
    // }
    // interface LinkProps extends ClickableProps {
    //     goTo: string;
    // }
    // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
    // declare function MainButton(linkProps: LinkProps): JSX.Element;
    // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
    // let opt = <MainButton />;
    // let opt = <MainButton children="chidlren" />;
    // let opt = <MainButton onClick={()=>{}} />;
    // let opt = <MainButton onClick={()=>{}} ignore-prop />;
    // let opt = <MainButton goTo="goTo" />;
    // let opt = <MainButton wrong />;
// === 1 ===
  // === /tests/cases/fourslash/file.tsx ===
  // declare module JSX {
  //     interface Element { }
  //     interface IntrinsicElements {
  //     }
  //     interface ElementAttributesProperty { props; }
  // }
  // interface ClickableProps {
  //     children?: string;
  //     className?: string;
  // }
  // interface ButtonProps extends ClickableProps {
  //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
  // }
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
  // declare function MainButton(linkProps: LinkProps): JSX.Element;
  // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <MainButton />;
  // let opt = <MainButton children="chidlren" />;
  // let opt = <MainButton [|onClick|]={()=>{}} />;
  // let opt = <MainButton onClick={()=>{}} ignore-prop />;
  // let opt = <MainButton goTo="goTo" />;
  // let opt = <MainButton wrong />;
    // === ContextSpan ===
    // === /tests/cases/fourslash/file.tsx ===
    // declare module JSX {
    //     interface Element { }
    //     interface IntrinsicElements {
    //     }
    //     interface ElementAttributesProperty { props; }
    // }
    // interface ClickableProps {
    //     children?: string;
    //     className?: string;
    // }
    // interface ButtonProps extends ClickableProps {
    //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
    // }
    // interface LinkProps extends ClickableProps {
    //     goTo: string;
    // }
    // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
    // declare function MainButton(linkProps: LinkProps): JSX.Element;
    // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
    // let opt = <MainButton />;
    // let opt = <MainButton children="chidlren" />;
    // let opt = <MainButton [|onClick={()=>{}}|] />;
    // let opt = <MainButton onClick={()=>{}} ignore-prop />;
    // let opt = <MainButton goTo="goTo" />;
    // let opt = <MainButton wrong />;
// === 2 ===
  // === /tests/cases/fourslash/file.tsx ===
  // declare module JSX {
  //     interface Element { }
  //     interface IntrinsicElements {
  //     }
  //     interface ElementAttributesProperty { props; }
  // }
  // interface ClickableProps {
  //     children?: string;
  //     className?: string;
  // }
  // interface ButtonProps extends ClickableProps {
  //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
  // }
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
  // declare function MainButton(linkProps: LinkProps): JSX.Element;
  // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <MainButton />;
  // let opt = <MainButton children="chidlren" />;
  // let opt = <MainButton onClick={()=>{}} />;
  // let opt = <MainButton [|onClick|]={()=>{}} ignore-prop />;
  // let opt = <MainButton goTo="goTo" />;
  // let opt = <MainButton wrong />;
    // === ContextSpan ===
    // === /tests/cases/fourslash/file.tsx ===
    // declare module JSX {
    //     interface Element { }
    //     interface IntrinsicElements {
    //     }
    //     interface ElementAttributesProperty { props; }
    // }
    // interface ClickableProps {
    //     children?: string;
    //     className?: string;
    // }
    // interface ButtonProps extends ClickableProps {
    //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
    // }
    // interface LinkProps extends ClickableProps {
    //     goTo: string;
    // }
    // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
    // declare function MainButton(linkProps: LinkProps): JSX.Element;
    // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
    // let opt = <MainButton />;
    // let opt = <MainButton children="chidlren" />;
    // let opt = <MainButton onClick={()=>{}} />;
    // let opt = <MainButton [|onClick={()=>{}}|] ignore-prop />;
    // let opt = <MainButton goTo="goTo" />;
    // let opt = <MainButton wrong />;


[
  {
    "textSpan": {
      "start": 267,
      "length": 7
    },
    "fileName": "/tests/cases/fourslash/file.tsx",
    "contextSpan": {
      "start": 267,
      "length": 59
    }
  },
  {
    "textSpan": {
      "start": 694,
      "length": 7
    },
    "fileName": "/tests/cases/fourslash/file.tsx",
    "contextSpan": {
      "start": 694,
      "length": 16
    }
  },
  {
    "textSpan": {
      "start": 737,
      "length": 7
    },
    "fileName": "/tests/cases/fourslash/file.tsx",
    "contextSpan": {
      "start": 737,
      "length": 16
    }
  }
]

// === RenameOptions ===
{
 "findInStrings": false,
 "findInComments": false,
 "providePrefixAndSuffixTextForRename": true
}
// === /tests/cases/fourslash/file.tsx ===
// declare module JSX {
//     interface Element { }
//     interface IntrinsicElements {
//     }
//     interface ElementAttributesProperty { props; }
// }
// interface ClickableProps {
//     children?: string;
//     className?: string;
// }
// interface ButtonProps extends ClickableProps {
//     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
// }
// interface LinkProps extends ClickableProps {
//     [|RENAME|]: string;
// }
// declare function MainButton(buttonProps: ButtonProps): JSX.Element;
// declare function MainButton(linkProps: LinkProps): JSX.Element;
// declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
// let opt = <MainButton />;
// let opt = <MainButton children="chidlren" />;
// let opt = <MainButton onClick={()=>{}} />;
// let opt = <MainButton onClick={()=>{}} ignore-prop />;
// let opt = <MainButton RENAME="goTo" />;
// let opt = <MainButton wrong />;

// === 0 ===
  // === /tests/cases/fourslash/file.tsx ===
  // declare module JSX {
  //     interface Element { }
  //     interface IntrinsicElements {
  //     }
  //     interface ElementAttributesProperty { props; }
  // }
  // interface ClickableProps {
  //     children?: string;
  //     className?: string;
  // }
  // interface ButtonProps extends ClickableProps {
  //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
  // }
  // interface LinkProps extends ClickableProps {
  //     [|goTo|]: string;
  // }
  // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
  // declare function MainButton(linkProps: LinkProps): JSX.Element;
  // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <MainButton />;
  // let opt = <MainButton children="chidlren" />;
  // let opt = <MainButton onClick={()=>{}} />;
  // let opt = <MainButton onClick={()=>{}} ignore-prop />;
  // let opt = <MainButton goTo="goTo" />;
  // let opt = <MainButton wrong />;
    // === ContextSpan ===
    // === /tests/cases/fourslash/file.tsx ===
    // declare module JSX {
    //     interface Element { }
    //     interface IntrinsicElements {
    //     }
    //     interface ElementAttributesProperty { props; }
    // }
    // interface ClickableProps {
    //     children?: string;
    //     className?: string;
    // }
    // interface ButtonProps extends ClickableProps {
    //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
    // }
    // interface LinkProps extends ClickableProps {
    //     [|goTo: string;|]
    // }
    // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
    // declare function MainButton(linkProps: LinkProps): JSX.Element;
    // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
    // let opt = <MainButton />;
    // let opt = <MainButton children="chidlren" />;
    // let opt = <MainButton onClick={()=>{}} />;
    // let opt = <MainButton onClick={()=>{}} ignore-prop />;
    // let opt = <MainButton goTo="goTo" />;
    // let opt = <MainButton wrong />;
// === 1 ===
  // === /tests/cases/fourslash/file.tsx ===
  // declare module JSX {
  //     interface Element { }
  //     interface IntrinsicElements {
  //     }
  //     interface ElementAttributesProperty { props; }
  // }
  // interface ClickableProps {
  //     children?: string;
  //     className?: string;
  // }
  // interface ButtonProps extends ClickableProps {
  //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
  // }
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
  // declare function MainButton(linkProps: LinkProps): JSX.Element;
  // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <MainButton />;
  // let opt = <MainButton children="chidlren" />;
  // let opt = <MainButton onClick={()=>{}} />;
  // let opt = <MainButton onClick={()=>{}} ignore-prop />;
  // let opt = <MainButton [|goTo|]="goTo" />;
  // let opt = <MainButton wrong />;
    // === ContextSpan ===
    // === /tests/cases/fourslash/file.tsx ===
    // declare module JSX {
    //     interface Element { }
    //     interface IntrinsicElements {
    //     }
    //     interface ElementAttributesProperty { props; }
    // }
    // interface ClickableProps {
    //     children?: string;
    //     className?: string;
    // }
    // interface ButtonProps extends ClickableProps {
    //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
    // }
    // interface LinkProps extends ClickableProps {
    //     goTo: string;
    // }
    // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
    // declare function MainButton(linkProps: LinkProps): JSX.Element;
    // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
    // let opt = <MainButton />;
    // let opt = <MainButton children="chidlren" />;
    // let opt = <MainButton onClick={()=>{}} />;
    // let opt = <MainButton onClick={()=>{}} ignore-prop />;
    // let opt = <MainButton [|goTo="goTo"|] />;
    // let opt = <MainButton wrong />;


[
  {
    "textSpan": {
      "start": 378,
      "length": 4
    },
    "fileName": "/tests/cases/fourslash/file.tsx",
    "contextSpan": {
      "start": 378,
      "length": 13
    }
  },
  {
    "textSpan": {
      "start": 792,
      "length": 4
    },
    "fileName": "/tests/cases/fourslash/file.tsx",
    "contextSpan": {
      "start": 792,
      "length": 11
    }
  }
]

// === RenameOptions ===
{
 "findInStrings": false,
 "findInComments": false,
 "providePrefixAndSuffixTextForRename": true
}
// === /tests/cases/fourslash/file.tsx ===
// declare module JSX {
//     interface Element { }
//     interface IntrinsicElements {
//     }
//     interface ElementAttributesProperty { props; }
// }
// interface ClickableProps {
//     children?: string;
//     className?: string;
// }
// interface ButtonProps extends ClickableProps {
//     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
// }
// interface LinkProps extends ClickableProps {
//     RENAME: string;
// }
// declare function MainButton(buttonProps: ButtonProps): JSX.Element;
// declare function MainButton(linkProps: LinkProps): JSX.Element;
// declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
// let opt = <MainButton />;
// let opt = <MainButton children="chidlren" />;
// let opt = <MainButton onClick={()=>{}} />;
// let opt = <MainButton onClick={()=>{}} ignore-prop />;
// let opt = <MainButton [|RENAME|]="goTo" />;
// let opt = <MainButton wrong />;

// === 0 ===
  // === /tests/cases/fourslash/file.tsx ===
  // declare module JSX {
  //     interface Element { }
  //     interface IntrinsicElements {
  //     }
  //     interface ElementAttributesProperty { props; }
  // }
  // interface ClickableProps {
  //     children?: string;
  //     className?: string;
  // }
  // interface ButtonProps extends ClickableProps {
  //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
  // }
  // interface LinkProps extends ClickableProps {
  //     [|goTo|]: string;
  // }
  // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
  // declare function MainButton(linkProps: LinkProps): JSX.Element;
  // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <MainButton />;
  // let opt = <MainButton children="chidlren" />;
  // let opt = <MainButton onClick={()=>{}} />;
  // let opt = <MainButton onClick={()=>{}} ignore-prop />;
  // let opt = <MainButton goTo="goTo" />;
  // let opt = <MainButton wrong />;
    // === ContextSpan ===
    // === /tests/cases/fourslash/file.tsx ===
    // declare module JSX {
    //     interface Element { }
    //     interface IntrinsicElements {
    //     }
    //     interface ElementAttributesProperty { props; }
    // }
    // interface ClickableProps {
    //     children?: string;
    //     className?: string;
    // }
    // interface ButtonProps extends ClickableProps {
    //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
    // }
    // interface LinkProps extends ClickableProps {
    //     [|goTo: string;|]
    // }
    // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
    // declare function MainButton(linkProps: LinkProps): JSX.Element;
    // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
    // let opt = <MainButton />;
    // let opt = <MainButton children="chidlren" />;
    // let opt = <MainButton onClick={()=>{}} />;
    // let opt = <MainButton onClick={()=>{}} ignore-prop />;
    // let opt = <MainButton goTo="goTo" />;
    // let opt = <MainButton wrong />;
// === 1 ===
  // === /tests/cases/fourslash/file.tsx ===
  // declare module JSX {
  //     interface Element { }
  //     interface IntrinsicElements {
  //     }
  //     interface ElementAttributesProperty { props; }
  // }
  // interface ClickableProps {
  //     children?: string;
  //     className?: string;
  // }
  // interface ButtonProps extends ClickableProps {
  //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
  // }
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
  // declare function MainButton(linkProps: LinkProps): JSX.Element;
  // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <MainButton />;
  // let opt = <MainButton children="chidlren" />;
  // let opt = <MainButton onClick={()=>{}} />;
  // let opt = <MainButton onClick={()=>{}} ignore-prop />;
  // let opt = <MainButton [|goTo|]="goTo" />;
  // let opt = <MainButton wrong />;
    // === ContextSpan ===
    // === /tests/cases/fourslash/file.tsx ===
    // declare module JSX {
    //     interface Element { }
    //     interface IntrinsicElements {
    //     }
    //     interface ElementAttributesProperty { props; }
    // }
    // interface ClickableProps {
    //     children?: string;
    //     className?: string;
    // }
    // interface ButtonProps extends ClickableProps {
    //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
    // }
    // interface LinkProps extends ClickableProps {
    //     goTo: string;
    // }
    // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
    // declare function MainButton(linkProps: LinkProps): JSX.Element;
    // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
    // let opt = <MainButton />;
    // let opt = <MainButton children="chidlren" />;
    // let opt = <MainButton onClick={()=>{}} />;
    // let opt = <MainButton onClick={()=>{}} ignore-prop />;
    // let opt = <MainButton [|goTo="goTo"|] />;
    // let opt = <MainButton wrong />;


[
  {
    "textSpan": {
      "start": 378,
      "length": 4
    },
    "fileName": "/tests/cases/fourslash/file.tsx",
    "contextSpan": {
      "start": 378,
      "length": 13
    }
  },
  {
    "textSpan": {
      "start": 792,
      "length": 4
    },
    "fileName": "/tests/cases/fourslash/file.tsx",
    "contextSpan": {
      "start": 792,
      "length": 11
    }
  }
]

// === RenameOptions ===
{
 "findInStrings": false,
 "findInComments": false,
 "providePrefixAndSuffixTextForRename": true
}
// === /tests/cases/fourslash/file.tsx ===
// declare module JSX {
//     interface Element { }
//     interface IntrinsicElements {
//     }
//     interface ElementAttributesProperty { props; }
// }
// interface ClickableProps {
//     children?: string;
//     className?: string;
// }
// interface ButtonProps extends ClickableProps {
//     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
// }
// interface LinkProps extends ClickableProps {
//     goTo: string;
// }
// declare function [|RENAME|](buttonProps: ButtonProps): JSX.Element;
// declare function RENAME(linkProps: LinkProps): JSX.Element;
// declare function RENAME(props: ButtonProps | LinkProps): JSX.Element;
// let opt = <RENAME />;
// let opt = <RENAME children="chidlren" />;
// let opt = <RENAME onClick={()=>{}} />;
// let opt = <RENAME onClick={()=>{}} ignore-prop />;
// let opt = <RENAME goTo="goTo" />;
// let opt = <RENAME wrong />;

// === 0 ===
  // === /tests/cases/fourslash/file.tsx ===
  // declare module JSX {
  //     interface Element { }
  //     interface IntrinsicElements {
  //     }
  //     interface ElementAttributesProperty { props; }
  // }
  // interface ClickableProps {
  //     children?: string;
  //     className?: string;
  // }
  // interface ButtonProps extends ClickableProps {
  //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
  // }
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // declare function [|MainButton|](buttonProps: ButtonProps): JSX.Element;
  // declare function MainButton(linkProps: LinkProps): JSX.Element;
  // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <MainButton />;
  // let opt = <MainButton children="chidlren" />;
  // let opt = <MainButton onClick={()=>{}} />;
  // let opt = <MainButton onClick={()=>{}} ignore-prop />;
  // let opt = <MainButton goTo="goTo" />;
  // let opt = <MainButton wrong />;
    // === ContextSpan ===
    // === /tests/cases/fourslash/file.tsx ===
    // declare module JSX {
    //     interface Element { }
    //     interface IntrinsicElements {
    //     }
    //     interface ElementAttributesProperty { props; }
    // }
    // interface ClickableProps {
    //     children?: string;
    //     className?: string;
    // }
    // interface ButtonProps extends ClickableProps {
    //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
    // }
    // interface LinkProps extends ClickableProps {
    //     goTo: string;
    // }
    // [|declare function MainButton(buttonProps: ButtonProps): JSX.Element;|]
    // declare function MainButton(linkProps: LinkProps): JSX.Element;
    // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
    // let opt = <MainButton />;
    // let opt = <MainButton children="chidlren" />;
    // let opt = <MainButton onClick={()=>{}} />;
    // let opt = <MainButton onClick={()=>{}} ignore-prop />;
    // let opt = <MainButton goTo="goTo" />;
    // let opt = <MainButton wrong />;
// === 1 ===
  // === /tests/cases/fourslash/file.tsx ===
  // declare module JSX {
  //     interface Element { }
  //     interface IntrinsicElements {
  //     }
  //     interface ElementAttributesProperty { props; }
  // }
  // interface ClickableProps {
  //     children?: string;
  //     className?: string;
  // }
  // interface ButtonProps extends ClickableProps {
  //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
  // }
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
  // declare function [|MainButton|](linkProps: LinkProps): JSX.Element;
  // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <MainButton />;
  // let opt = <MainButton children="chidlren" />;
  // let opt = <MainButton onClick={()=>{}} />;
  // let opt = <MainButton onClick={()=>{}} ignore-prop />;
  // let opt = <MainButton goTo="goTo" />;
  // let opt = <MainButton wrong />;
    // === ContextSpan ===
    // === /tests/cases/fourslash/file.tsx ===
    // declare module JSX {
    //     interface Element { }
    //     interface IntrinsicElements {
    //     }
    //     interface ElementAttributesProperty { props; }
    // }
    // interface ClickableProps {
    //     children?: string;
    //     className?: string;
    // }
    // interface ButtonProps extends ClickableProps {
    //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
    // }
    // interface LinkProps extends ClickableProps {
    //     goTo: string;
    // }
    // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
    // [|declare function MainButton(linkProps: LinkProps): JSX.Element;|]
    // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
    // let opt = <MainButton />;
    // let opt = <MainButton children="chidlren" />;
    // let opt = <MainButton onClick={()=>{}} />;
    // let opt = <MainButton onClick={()=>{}} ignore-prop />;
    // let opt = <MainButton goTo="goTo" />;
    // let opt = <MainButton wrong />;
// === 2 ===
  // === /tests/cases/fourslash/file.tsx ===
  // declare module JSX {
  //     interface Element { }
  //     interface IntrinsicElements {
  //     }
  //     interface ElementAttributesProperty { props; }
  // }
  // interface ClickableProps {
  //     children?: string;
  //     className?: string;
  // }
  // interface ButtonProps extends ClickableProps {
  //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
  // }
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
  // declare function MainButton(linkProps: LinkProps): JSX.Element;
  // declare function [|MainButton|](props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <MainButton />;
  // let opt = <MainButton children="chidlren" />;
  // let opt = <MainButton onClick={()=>{}} />;
  // let opt = <MainButton onClick={()=>{}} ignore-prop />;
  // let opt = <MainButton goTo="goTo" />;
  // let opt = <MainButton wrong />;
    // === ContextSpan ===
    // === /tests/cases/fourslash/file.tsx ===
    // declare module JSX {
    //     interface Element { }
    //     interface IntrinsicElements {
    //     }
    //     interface ElementAttributesProperty { props; }
    // }
    // interface ClickableProps {
    //     children?: string;
    //     className?: string;
    // }
    // interface ButtonProps extends ClickableProps {
    //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
    // }
    // interface LinkProps extends ClickableProps {
    //     goTo: string;
    // }
    // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
    // declare function MainButton(linkProps: LinkProps): JSX.Element;
    // [|declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;|]
    // let opt = <MainButton />;
    // let opt = <MainButton children="chidlren" />;
    // let opt = <MainButton onClick={()=>{}} />;
    // let opt = <MainButton onClick={()=>{}} ignore-prop />;
    // let opt = <MainButton goTo="goTo" />;
    // let opt = <MainButton wrong />;
// === 3 ===
  // === /tests/cases/fourslash/file.tsx ===
  // declare module JSX {
  //     interface Element { }
  //     interface IntrinsicElements {
  //     }
  //     interface ElementAttributesProperty { props; }
  // }
  // interface ClickableProps {
  //     children?: string;
  //     className?: string;
  // }
  // interface ButtonProps extends ClickableProps {
  //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
  // }
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
  // declare function MainButton(linkProps: LinkProps): JSX.Element;
  // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <[|MainButton|] />;
  // let opt = <MainButton children="chidlren" />;
  // let opt = <MainButton onClick={()=>{}} />;
  // let opt = <MainButton onClick={()=>{}} ignore-prop />;
  // let opt = <MainButton goTo="goTo" />;
  // let opt = <MainButton wrong />;
    // === ContextSpan ===
    // === /tests/cases/fourslash/file.tsx ===
    // declare module JSX {
    //     interface Element { }
    //     interface IntrinsicElements {
    //     }
    //     interface ElementAttributesProperty { props; }
    // }
    // interface ClickableProps {
    //     children?: string;
    //     className?: string;
    // }
    // interface ButtonProps extends ClickableProps {
    //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
    // }
    // interface LinkProps extends ClickableProps {
    //     goTo: string;
    // }
    // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
    // declare function MainButton(linkProps: LinkProps): JSX.Element;
    // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
    // let opt = [|<MainButton />|];
    // let opt = <MainButton children="chidlren" />;
    // let opt = <MainButton onClick={()=>{}} />;
    // let opt = <MainButton onClick={()=>{}} ignore-prop />;
    // let opt = <MainButton goTo="goTo" />;
    // let opt = <MainButton wrong />;
// === 4 ===
  // === /tests/cases/fourslash/file.tsx ===
  // declare module JSX {
  //     interface Element { }
  //     interface IntrinsicElements {
  //     }
  //     interface ElementAttributesProperty { props; }
  // }
  // interface ClickableProps {
  //     children?: string;
  //     className?: string;
  // }
  // interface ButtonProps extends ClickableProps {
  //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
  // }
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
  // declare function MainButton(linkProps: LinkProps): JSX.Element;
  // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <MainButton />;
  // let opt = <[|MainButton|] children="chidlren" />;
  // let opt = <MainButton onClick={()=>{}} />;
  // let opt = <MainButton onClick={()=>{}} ignore-prop />;
  // let opt = <MainButton goTo="goTo" />;
  // let opt = <MainButton wrong />;
    // === ContextSpan ===
    // === /tests/cases/fourslash/file.tsx ===
    // declare module JSX {
    //     interface Element { }
    //     interface IntrinsicElements {
    //     }
    //     interface ElementAttributesProperty { props; }
    // }
    // interface ClickableProps {
    //     children?: string;
    //     className?: string;
    // }
    // interface ButtonProps extends ClickableProps {
    //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
    // }
    // interface LinkProps extends ClickableProps {
    //     goTo: string;
    // }
    // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
    // declare function MainButton(linkProps: LinkProps): JSX.Element;
    // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
    // let opt = <MainButton />;
    // let opt = [|<MainButton children="chidlren" />|];
    // let opt = <MainButton onClick={()=>{}} />;
    // let opt = <MainButton onClick={()=>{}} ignore-prop />;
    // let opt = <MainButton goTo="goTo" />;
    // let opt = <MainButton wrong />;
// === 5 ===
  // === /tests/cases/fourslash/file.tsx ===
  // declare module JSX {
  //     interface Element { }
  //     interface IntrinsicElements {
  //     }
  //     interface ElementAttributesProperty { props; }
  // }
  // interface ClickableProps {
  //     children?: string;
  //     className?: string;
  // }
  // interface ButtonProps extends ClickableProps {
  //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
  // }
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
  // declare function MainButton(linkProps: LinkProps): JSX.Element;
  // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <MainButton />;
  // let opt = <MainButton children="chidlren" />;
  // let opt = <[|MainButton|] onClick={()=>{}} />;
  // let opt = <MainButton onClick={()=>{}} ignore-prop />;
  // let opt = <MainButton goTo="goTo" />;
  // let opt = <MainButton wrong />;
    // === ContextSpan ===
    // === /tests/cases/fourslash/file.tsx ===
    // declare module JSX {
    //     interface Element { }
    //     interface IntrinsicElements {
    //     }
    //     interface ElementAttributesProperty { props; }
    // }
    // interface ClickableProps {
    //     children?: string;
    //     className?: string;
    // }
    // interface ButtonProps extends ClickableProps {
    //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
    // }
    // interface LinkProps extends ClickableProps {
    //     goTo: string;
    // }
    // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
    // declare function MainButton(linkProps: LinkProps): JSX.Element;
    // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
    // let opt = <MainButton />;
    // let opt = <MainButton children="chidlren" />;
    // let opt = [|<MainButton onClick={()=>{}} />|];
    // let opt = <MainButton onClick={()=>{}} ignore-prop />;
    // let opt = <MainButton goTo="goTo" />;
    // let opt = <MainButton wrong />;
// === 6 ===
  // === /tests/cases/fourslash/file.tsx ===
  // declare module JSX {
  //     interface Element { }
  //     interface IntrinsicElements {
  //     }
  //     interface ElementAttributesProperty { props; }
  // }
  // interface ClickableProps {
  //     children?: string;
  //     className?: string;
  // }
  // interface ButtonProps extends ClickableProps {
  //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
  // }
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
  // declare function MainButton(linkProps: LinkProps): JSX.Element;
  // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <MainButton />;
  // let opt = <MainButton children="chidlren" />;
  // let opt = <MainButton onClick={()=>{}} />;
  // let opt = <[|MainButton|] onClick={()=>{}} ignore-prop />;
  // let opt = <MainButton goTo="goTo" />;
  // let opt = <MainButton wrong />;
    // === ContextSpan ===
    // === /tests/cases/fourslash/file.tsx ===
    // declare module JSX {
    //     interface Element { }
    //     interface IntrinsicElements {
    //     }
    //     interface ElementAttributesProperty { props; }
    // }
    // interface ClickableProps {
    //     children?: string;
    //     className?: string;
    // }
    // interface ButtonProps extends ClickableProps {
    //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
    // }
    // interface LinkProps extends ClickableProps {
    //     goTo: string;
    // }
    // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
    // declare function MainButton(linkProps: LinkProps): JSX.Element;
    // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
    // let opt = <MainButton />;
    // let opt = <MainButton children="chidlren" />;
    // let opt = <MainButton onClick={()=>{}} />;
    // let opt = [|<MainButton onClick={()=>{}} ignore-prop />|];
    // let opt = <MainButton goTo="goTo" />;
    // let opt = <MainButton wrong />;
// === 7 ===
  // === /tests/cases/fourslash/file.tsx ===
  // declare module JSX {
  //     interface Element { }
  //     interface IntrinsicElements {
  //     }
  //     interface ElementAttributesProperty { props; }
  // }
  // interface ClickableProps {
  //     children?: string;
  //     className?: string;
  // }
  // interface ButtonProps extends ClickableProps {
  //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
  // }
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
  // declare function MainButton(linkProps: LinkProps): JSX.Element;
  // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <MainButton />;
  // let opt = <MainButton children="chidlren" />;
  // let opt = <MainButton onClick={()=>{}} />;
  // let opt = <MainButton onClick={()=>{}} ignore-prop />;
  // let opt = <[|MainButton|] goTo="goTo" />;
  // let opt = <MainButton wrong />;
    // === ContextSpan ===
    // === /tests/cases/fourslash/file.tsx ===
    // declare module JSX {
    //     interface Element { }
    //     interface IntrinsicElements {
    //     }
    //     interface ElementAttributesProperty { props; }
    // }
    // interface ClickableProps {
    //     children?: string;
    //     className?: string;
    // }
    // interface ButtonProps extends ClickableProps {
    //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
    // }
    // interface LinkProps extends ClickableProps {
    //     goTo: string;
    // }
    // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
    // declare function MainButton(linkProps: LinkProps): JSX.Element;
    // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
    // let opt = <MainButton />;
    // let opt = <MainButton children="chidlren" />;
    // let opt = <MainButton onClick={()=>{}} />;
    // let opt = <MainButton onClick={()=>{}} ignore-prop />;
    // let opt = [|<MainButton goTo="goTo" />|];
    // let opt = <MainButton wrong />;
// === 8 ===
  // === /tests/cases/fourslash/file.tsx ===
  // declare module JSX {
  //     interface Element { }
  //     interface IntrinsicElements {
  //     }
  //     interface ElementAttributesProperty { props; }
  // }
  // interface ClickableProps {
  //     children?: string;
  //     className?: string;
  // }
  // interface ButtonProps extends ClickableProps {
  //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
  // }
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
  // declare function MainButton(linkProps: LinkProps): JSX.Element;
  // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <MainButton />;
  // let opt = <MainButton children="chidlren" />;
  // let opt = <MainButton onClick={()=>{}} />;
  // let opt = <MainButton onClick={()=>{}} ignore-prop />;
  // let opt = <MainButton goTo="goTo" />;
  // let opt = <[|MainButton|] wrong />;
    // === ContextSpan ===
    // === /tests/cases/fourslash/file.tsx ===
    // declare module JSX {
    //     interface Element { }
    //     interface IntrinsicElements {
    //     }
    //     interface ElementAttributesProperty { props; }
    // }
    // interface ClickableProps {
    //     children?: string;
    //     className?: string;
    // }
    // interface ButtonProps extends ClickableProps {
    //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
    // }
    // interface LinkProps extends ClickableProps {
    //     goTo: string;
    // }
    // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
    // declare function MainButton(linkProps: LinkProps): JSX.Element;
    // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
    // let opt = <MainButton />;
    // let opt = <MainButton children="chidlren" />;
    // let opt = <MainButton onClick={()=>{}} />;
    // let opt = <MainButton onClick={()=>{}} ignore-prop />;
    // let opt = <MainButton goTo="goTo" />;
    // let opt = [|<MainButton wrong />|];


[
  {
    "textSpan": {
      "start": 411,
      "length": 10
    },
    "fileName": "/tests/cases/fourslash/file.tsx",
    "contextSpan": {
      "start": 394,
      "length": 67
    }
  },
  {
    "textSpan": {
      "start": 479,
      "length": 10
    },
    "fileName": "/tests/cases/fourslash/file.tsx",
    "contextSpan": {
      "start": 462,
      "length": 63
    }
  },
  {
    "textSpan": {
      "start": 543,
      "length": 10
    },
    "fileName": "/tests/cases/fourslash/file.tsx",
    "contextSpan": {
      "start": 526,
      "length": 73
    }
  },
  {
    "textSpan": {
      "start": 611,
      "length": 10
    },
    "fileName": "/tests/cases/fourslash/file.tsx",
    "contextSpan": {
      "start": 610,
      "length": 14
    }
  },
  {
    "textSpan": {
      "start": 637,
      "length": 10
    },
    "fileName": "/tests/cases/fourslash/file.tsx",
    "contextSpan": {
      "start": 636,
      "length": 34
    }
  },
  {
    "textSpan": {
      "start": 683,
      "length": 10
    },
    "fileName": "/tests/cases/fourslash/file.tsx",
    "contextSpan": {
      "start": 682,
      "length": 31
    }
  },
  {
    "textSpan": {
      "start": 726,
      "length": 10
    },
    "fileName": "/tests/cases/fourslash/file.tsx",
    "contextSpan": {
      "start": 725,
      "length": 43
    }
  },
  {
    "textSpan": {
      "start": 781,
      "length": 10
    },
    "fileName": "/tests/cases/fourslash/file.tsx",
    "contextSpan": {
      "start": 780,
      "length": 26
    }
  },
  {
    "textSpan": {
      "start": 819,
      "length": 10
    },
    "fileName": "/tests/cases/fourslash/file.tsx",
    "contextSpan": {
      "start": 818,
      "length": 20
    }
  }
]

// === RenameOptions ===
{
 "findInStrings": false,
 "findInComments": false,
 "providePrefixAndSuffixTextForRename": true
}
// === /tests/cases/fourslash/file.tsx ===
// declare module JSX {
//     interface Element { }
//     interface IntrinsicElements {
//     }
//     interface ElementAttributesProperty { props; }
// }
// interface ClickableProps {
//     children?: string;
//     className?: string;
// }
// interface ButtonProps extends ClickableProps {
//     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
// }
// interface LinkProps extends ClickableProps {
//     goTo: string;
// }
// declare function RENAME(buttonProps: ButtonProps): JSX.Element;
// declare function [|RENAME|](linkProps: LinkProps): JSX.Element;
// declare function RENAME(props: ButtonProps | LinkProps): JSX.Element;
// let opt = <RENAME />;
// let opt = <RENAME children="chidlren" />;
// let opt = <RENAME onClick={()=>{}} />;
// let opt = <RENAME onClick={()=>{}} ignore-prop />;
// let opt = <RENAME goTo="goTo" />;
// let opt = <RENAME wrong />;

// === 0 ===
  // === /tests/cases/fourslash/file.tsx ===
  // declare module JSX {
  //     interface Element { }
  //     interface IntrinsicElements {
  //     }
  //     interface ElementAttributesProperty { props; }
  // }
  // interface ClickableProps {
  //     children?: string;
  //     className?: string;
  // }
  // interface ButtonProps extends ClickableProps {
  //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
  // }
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // declare function [|MainButton|](buttonProps: ButtonProps): JSX.Element;
  // declare function MainButton(linkProps: LinkProps): JSX.Element;
  // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <MainButton />;
  // let opt = <MainButton children="chidlren" />;
  // let opt = <MainButton onClick={()=>{}} />;
  // let opt = <MainButton onClick={()=>{}} ignore-prop />;
  // let opt = <MainButton goTo="goTo" />;
  // let opt = <MainButton wrong />;
    // === ContextSpan ===
    // === /tests/cases/fourslash/file.tsx ===
    // declare module JSX {
    //     interface Element { }
    //     interface IntrinsicElements {
    //     }
    //     interface ElementAttributesProperty { props; }
    // }
    // interface ClickableProps {
    //     children?: string;
    //     className?: string;
    // }
    // interface ButtonProps extends ClickableProps {
    //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
    // }
    // interface LinkProps extends ClickableProps {
    //     goTo: string;
    // }
    // [|declare function MainButton(buttonProps: ButtonProps): JSX.Element;|]
    // declare function MainButton(linkProps: LinkProps): JSX.Element;
    // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
    // let opt = <MainButton />;
    // let opt = <MainButton children="chidlren" />;
    // let opt = <MainButton onClick={()=>{}} />;
    // let opt = <MainButton onClick={()=>{}} ignore-prop />;
    // let opt = <MainButton goTo="goTo" />;
    // let opt = <MainButton wrong />;
// === 1 ===
  // === /tests/cases/fourslash/file.tsx ===
  // declare module JSX {
  //     interface Element { }
  //     interface IntrinsicElements {
  //     }
  //     interface ElementAttributesProperty { props; }
  // }
  // interface ClickableProps {
  //     children?: string;
  //     className?: string;
  // }
  // interface ButtonProps extends ClickableProps {
  //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
  // }
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
  // declare function [|MainButton|](linkProps: LinkProps): JSX.Element;
  // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <MainButton />;
  // let opt = <MainButton children="chidlren" />;
  // let opt = <MainButton onClick={()=>{}} />;
  // let opt = <MainButton onClick={()=>{}} ignore-prop />;
  // let opt = <MainButton goTo="goTo" />;
  // let opt = <MainButton wrong />;
    // === ContextSpan ===
    // === /tests/cases/fourslash/file.tsx ===
    // declare module JSX {
    //     interface Element { }
    //     interface IntrinsicElements {
    //     }
    //     interface ElementAttributesProperty { props; }
    // }
    // interface ClickableProps {
    //     children?: string;
    //     className?: string;
    // }
    // interface ButtonProps extends ClickableProps {
    //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
    // }
    // interface LinkProps extends ClickableProps {
    //     goTo: string;
    // }
    // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
    // [|declare function MainButton(linkProps: LinkProps): JSX.Element;|]
    // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
    // let opt = <MainButton />;
    // let opt = <MainButton children="chidlren" />;
    // let opt = <MainButton onClick={()=>{}} />;
    // let opt = <MainButton onClick={()=>{}} ignore-prop />;
    // let opt = <MainButton goTo="goTo" />;
    // let opt = <MainButton wrong />;
// === 2 ===
  // === /tests/cases/fourslash/file.tsx ===
  // declare module JSX {
  //     interface Element { }
  //     interface IntrinsicElements {
  //     }
  //     interface ElementAttributesProperty { props; }
  // }
  // interface ClickableProps {
  //     children?: string;
  //     className?: string;
  // }
  // interface ButtonProps extends ClickableProps {
  //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
  // }
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
  // declare function MainButton(linkProps: LinkProps): JSX.Element;
  // declare function [|MainButton|](props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <MainButton />;
  // let opt = <MainButton children="chidlren" />;
  // let opt = <MainButton onClick={()=>{}} />;
  // let opt = <MainButton onClick={()=>{}} ignore-prop />;
  // let opt = <MainButton goTo="goTo" />;
  // let opt = <MainButton wrong />;
    // === ContextSpan ===
    // === /tests/cases/fourslash/file.tsx ===
    // declare module JSX {
    //     interface Element { }
    //     interface IntrinsicElements {
    //     }
    //     interface ElementAttributesProperty { props; }
    // }
    // interface ClickableProps {
    //     children?: string;
    //     className?: string;
    // }
    // interface ButtonProps extends ClickableProps {
    //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
    // }
    // interface LinkProps extends ClickableProps {
    //     goTo: string;
    // }
    // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
    // declare function MainButton(linkProps: LinkProps): JSX.Element;
    // [|declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;|]
    // let opt = <MainButton />;
    // let opt = <MainButton children="chidlren" />;
    // let opt = <MainButton onClick={()=>{}} />;
    // let opt = <MainButton onClick={()=>{}} ignore-prop />;
    // let opt = <MainButton goTo="goTo" />;
    // let opt = <MainButton wrong />;
// === 3 ===
  // === /tests/cases/fourslash/file.tsx ===
  // declare module JSX {
  //     interface Element { }
  //     interface IntrinsicElements {
  //     }
  //     interface ElementAttributesProperty { props; }
  // }
  // interface ClickableProps {
  //     children?: string;
  //     className?: string;
  // }
  // interface ButtonProps extends ClickableProps {
  //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
  // }
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
  // declare function MainButton(linkProps: LinkProps): JSX.Element;
  // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <[|MainButton|] />;
  // let opt = <MainButton children="chidlren" />;
  // let opt = <MainButton onClick={()=>{}} />;
  // let opt = <MainButton onClick={()=>{}} ignore-prop />;
  // let opt = <MainButton goTo="goTo" />;
  // let opt = <MainButton wrong />;
    // === ContextSpan ===
    // === /tests/cases/fourslash/file.tsx ===
    // declare module JSX {
    //     interface Element { }
    //     interface IntrinsicElements {
    //     }
    //     interface ElementAttributesProperty { props; }
    // }
    // interface ClickableProps {
    //     children?: string;
    //     className?: string;
    // }
    // interface ButtonProps extends ClickableProps {
    //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
    // }
    // interface LinkProps extends ClickableProps {
    //     goTo: string;
    // }
    // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
    // declare function MainButton(linkProps: LinkProps): JSX.Element;
    // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
    // let opt = [|<MainButton />|];
    // let opt = <MainButton children="chidlren" />;
    // let opt = <MainButton onClick={()=>{}} />;
    // let opt = <MainButton onClick={()=>{}} ignore-prop />;
    // let opt = <MainButton goTo="goTo" />;
    // let opt = <MainButton wrong />;
// === 4 ===
  // === /tests/cases/fourslash/file.tsx ===
  // declare module JSX {
  //     interface Element { }
  //     interface IntrinsicElements {
  //     }
  //     interface ElementAttributesProperty { props; }
  // }
  // interface ClickableProps {
  //     children?: string;
  //     className?: string;
  // }
  // interface ButtonProps extends ClickableProps {
  //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
  // }
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
  // declare function MainButton(linkProps: LinkProps): JSX.Element;
  // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <MainButton />;
  // let opt = <[|MainButton|] children="chidlren" />;
  // let opt = <MainButton onClick={()=>{}} />;
  // let opt = <MainButton onClick={()=>{}} ignore-prop />;
  // let opt = <MainButton goTo="goTo" />;
  // let opt = <MainButton wrong />;
    // === ContextSpan ===
    // === /tests/cases/fourslash/file.tsx ===
    // declare module JSX {
    //     interface Element { }
    //     interface IntrinsicElements {
    //     }
    //     interface ElementAttributesProperty { props; }
    // }
    // interface ClickableProps {
    //     children?: string;
    //     className?: string;
    // }
    // interface ButtonProps extends ClickableProps {
    //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
    // }
    // interface LinkProps extends ClickableProps {
    //     goTo: string;
    // }
    // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
    // declare function MainButton(linkProps: LinkProps): JSX.Element;
    // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
    // let opt = <MainButton />;
    // let opt = [|<MainButton children="chidlren" />|];
    // let opt = <MainButton onClick={()=>{}} />;
    // let opt = <MainButton onClick={()=>{}} ignore-prop />;
    // let opt = <MainButton goTo="goTo" />;
    // let opt = <MainButton wrong />;
// === 5 ===
  // === /tests/cases/fourslash/file.tsx ===
  // declare module JSX {
  //     interface Element { }
  //     interface IntrinsicElements {
  //     }
  //     interface ElementAttributesProperty { props; }
  // }
  // interface ClickableProps {
  //     children?: string;
  //     className?: string;
  // }
  // interface ButtonProps extends ClickableProps {
  //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
  // }
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
  // declare function MainButton(linkProps: LinkProps): JSX.Element;
  // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <MainButton />;
  // let opt = <MainButton children="chidlren" />;
  // let opt = <[|MainButton|] onClick={()=>{}} />;
  // let opt = <MainButton onClick={()=>{}} ignore-prop />;
  // let opt = <MainButton goTo="goTo" />;
  // let opt = <MainButton wrong />;
    // === ContextSpan ===
    // === /tests/cases/fourslash/file.tsx ===
    // declare module JSX {
    //     interface Element { }
    //     interface IntrinsicElements {
    //     }
    //     interface ElementAttributesProperty { props; }
    // }
    // interface ClickableProps {
    //     children?: string;
    //     className?: string;
    // }
    // interface ButtonProps extends ClickableProps {
    //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
    // }
    // interface LinkProps extends ClickableProps {
    //     goTo: string;
    // }
    // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
    // declare function MainButton(linkProps: LinkProps): JSX.Element;
    // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
    // let opt = <MainButton />;
    // let opt = <MainButton children="chidlren" />;
    // let opt = [|<MainButton onClick={()=>{}} />|];
    // let opt = <MainButton onClick={()=>{}} ignore-prop />;
    // let opt = <MainButton goTo="goTo" />;
    // let opt = <MainButton wrong />;
// === 6 ===
  // === /tests/cases/fourslash/file.tsx ===
  // declare module JSX {
  //     interface Element { }
  //     interface IntrinsicElements {
  //     }
  //     interface ElementAttributesProperty { props; }
  // }
  // interface ClickableProps {
  //     children?: string;
  //     className?: string;
  // }
  // interface ButtonProps extends ClickableProps {
  //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
  // }
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
  // declare function MainButton(linkProps: LinkProps): JSX.Element;
  // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <MainButton />;
  // let opt = <MainButton children="chidlren" />;
  // let opt = <MainButton onClick={()=>{}} />;
  // let opt = <[|MainButton|] onClick={()=>{}} ignore-prop />;
  // let opt = <MainButton goTo="goTo" />;
  // let opt = <MainButton wrong />;
    // === ContextSpan ===
    // === /tests/cases/fourslash/file.tsx ===
    // declare module JSX {
    //     interface Element { }
    //     interface IntrinsicElements {
    //     }
    //     interface ElementAttributesProperty { props; }
    // }
    // interface ClickableProps {
    //     children?: string;
    //     className?: string;
    // }
    // interface ButtonProps extends ClickableProps {
    //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
    // }
    // interface LinkProps extends ClickableProps {
    //     goTo: string;
    // }
    // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
    // declare function MainButton(linkProps: LinkProps): JSX.Element;
    // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
    // let opt = <MainButton />;
    // let opt = <MainButton children="chidlren" />;
    // let opt = <MainButton onClick={()=>{}} />;
    // let opt = [|<MainButton onClick={()=>{}} ignore-prop />|];
    // let opt = <MainButton goTo="goTo" />;
    // let opt = <MainButton wrong />;
// === 7 ===
  // === /tests/cases/fourslash/file.tsx ===
  // declare module JSX {
  //     interface Element { }
  //     interface IntrinsicElements {
  //     }
  //     interface ElementAttributesProperty { props; }
  // }
  // interface ClickableProps {
  //     children?: string;
  //     className?: string;
  // }
  // interface ButtonProps extends ClickableProps {
  //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
  // }
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
  // declare function MainButton(linkProps: LinkProps): JSX.Element;
  // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <MainButton />;
  // let opt = <MainButton children="chidlren" />;
  // let opt = <MainButton onClick={()=>{}} />;
  // let opt = <MainButton onClick={()=>{}} ignore-prop />;
  // let opt = <[|MainButton|] goTo="goTo" />;
  // let opt = <MainButton wrong />;
    // === ContextSpan ===
    // === /tests/cases/fourslash/file.tsx ===
    // declare module JSX {
    //     interface Element { }
    //     interface IntrinsicElements {
    //     }
    //     interface ElementAttributesProperty { props; }
    // }
    // interface ClickableProps {
    //     children?: string;
    //     className?: string;
    // }
    // interface ButtonProps extends ClickableProps {
    //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
    // }
    // interface LinkProps extends ClickableProps {
    //     goTo: string;
    // }
    // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
    // declare function MainButton(linkProps: LinkProps): JSX.Element;
    // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
    // let opt = <MainButton />;
    // let opt = <MainButton children="chidlren" />;
    // let opt = <MainButton onClick={()=>{}} />;
    // let opt = <MainButton onClick={()=>{}} ignore-prop />;
    // let opt = [|<MainButton goTo="goTo" />|];
    // let opt = <MainButton wrong />;
// === 8 ===
  // === /tests/cases/fourslash/file.tsx ===
  // declare module JSX {
  //     interface Element { }
  //     interface IntrinsicElements {
  //     }
  //     interface ElementAttributesProperty { props; }
  // }
  // interface ClickableProps {
  //     children?: string;
  //     className?: string;
  // }
  // interface ButtonProps extends ClickableProps {
  //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
  // }
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
  // declare function MainButton(linkProps: LinkProps): JSX.Element;
  // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <MainButton />;
  // let opt = <MainButton children="chidlren" />;
  // let opt = <MainButton onClick={()=>{}} />;
  // let opt = <MainButton onClick={()=>{}} ignore-prop />;
  // let opt = <MainButton goTo="goTo" />;
  // let opt = <[|MainButton|] wrong />;
    // === ContextSpan ===
    // === /tests/cases/fourslash/file.tsx ===
    // declare module JSX {
    //     interface Element { }
    //     interface IntrinsicElements {
    //     }
    //     interface ElementAttributesProperty { props; }
    // }
    // interface ClickableProps {
    //     children?: string;
    //     className?: string;
    // }
    // interface ButtonProps extends ClickableProps {
    //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
    // }
    // interface LinkProps extends ClickableProps {
    //     goTo: string;
    // }
    // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
    // declare function MainButton(linkProps: LinkProps): JSX.Element;
    // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
    // let opt = <MainButton />;
    // let opt = <MainButton children="chidlren" />;
    // let opt = <MainButton onClick={()=>{}} />;
    // let opt = <MainButton onClick={()=>{}} ignore-prop />;
    // let opt = <MainButton goTo="goTo" />;
    // let opt = [|<MainButton wrong />|];


[
  {
    "textSpan": {
      "start": 411,
      "length": 10
    },
    "fileName": "/tests/cases/fourslash/file.tsx",
    "contextSpan": {
      "start": 394,
      "length": 67
    }
  },
  {
    "textSpan": {
      "start": 479,
      "length": 10
    },
    "fileName": "/tests/cases/fourslash/file.tsx",
    "contextSpan": {
      "start": 462,
      "length": 63
    }
  },
  {
    "textSpan": {
      "start": 543,
      "length": 10
    },
    "fileName": "/tests/cases/fourslash/file.tsx",
    "contextSpan": {
      "start": 526,
      "length": 73
    }
  },
  {
    "textSpan": {
      "start": 611,
      "length": 10
    },
    "fileName": "/tests/cases/fourslash/file.tsx",
    "contextSpan": {
      "start": 610,
      "length": 14
    }
  },
  {
    "textSpan": {
      "start": 637,
      "length": 10
    },
    "fileName": "/tests/cases/fourslash/file.tsx",
    "contextSpan": {
      "start": 636,
      "length": 34
    }
  },
  {
    "textSpan": {
      "start": 683,
      "length": 10
    },
    "fileName": "/tests/cases/fourslash/file.tsx",
    "contextSpan": {
      "start": 682,
      "length": 31
    }
  },
  {
    "textSpan": {
      "start": 726,
      "length": 10
    },
    "fileName": "/tests/cases/fourslash/file.tsx",
    "contextSpan": {
      "start": 725,
      "length": 43
    }
  },
  {
    "textSpan": {
      "start": 781,
      "length": 10
    },
    "fileName": "/tests/cases/fourslash/file.tsx",
    "contextSpan": {
      "start": 780,
      "length": 26
    }
  },
  {
    "textSpan": {
      "start": 819,
      "length": 10
    },
    "fileName": "/tests/cases/fourslash/file.tsx",
    "contextSpan": {
      "start": 818,
      "length": 20
    }
  }
]

// === RenameOptions ===
{
 "findInStrings": false,
 "findInComments": false,
 "providePrefixAndSuffixTextForRename": true
}
// === /tests/cases/fourslash/file.tsx ===
// declare module JSX {
//     interface Element { }
//     interface IntrinsicElements {
//     }
//     interface ElementAttributesProperty { props; }
// }
// interface ClickableProps {
//     children?: string;
//     className?: string;
// }
// interface ButtonProps extends ClickableProps {
//     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
// }
// interface LinkProps extends ClickableProps {
//     goTo: string;
// }
// declare function RENAME(buttonProps: ButtonProps): JSX.Element;
// declare function RENAME(linkProps: LinkProps): JSX.Element;
// declare function [|RENAME|](props: ButtonProps | LinkProps): JSX.Element;
// let opt = <RENAME />;
// let opt = <RENAME children="chidlren" />;
// let opt = <RENAME onClick={()=>{}} />;
// let opt = <RENAME onClick={()=>{}} ignore-prop />;
// let opt = <RENAME goTo="goTo" />;
// let opt = <RENAME wrong />;

// === 0 ===
  // === /tests/cases/fourslash/file.tsx ===
  // declare module JSX {
  //     interface Element { }
  //     interface IntrinsicElements {
  //     }
  //     interface ElementAttributesProperty { props; }
  // }
  // interface ClickableProps {
  //     children?: string;
  //     className?: string;
  // }
  // interface ButtonProps extends ClickableProps {
  //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
  // }
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // declare function [|MainButton|](buttonProps: ButtonProps): JSX.Element;
  // declare function MainButton(linkProps: LinkProps): JSX.Element;
  // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <MainButton />;
  // let opt = <MainButton children="chidlren" />;
  // let opt = <MainButton onClick={()=>{}} />;
  // let opt = <MainButton onClick={()=>{}} ignore-prop />;
  // let opt = <MainButton goTo="goTo" />;
  // let opt = <MainButton wrong />;
    // === ContextSpan ===
    // === /tests/cases/fourslash/file.tsx ===
    // declare module JSX {
    //     interface Element { }
    //     interface IntrinsicElements {
    //     }
    //     interface ElementAttributesProperty { props; }
    // }
    // interface ClickableProps {
    //     children?: string;
    //     className?: string;
    // }
    // interface ButtonProps extends ClickableProps {
    //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
    // }
    // interface LinkProps extends ClickableProps {
    //     goTo: string;
    // }
    // [|declare function MainButton(buttonProps: ButtonProps): JSX.Element;|]
    // declare function MainButton(linkProps: LinkProps): JSX.Element;
    // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
    // let opt = <MainButton />;
    // let opt = <MainButton children="chidlren" />;
    // let opt = <MainButton onClick={()=>{}} />;
    // let opt = <MainButton onClick={()=>{}} ignore-prop />;
    // let opt = <MainButton goTo="goTo" />;
    // let opt = <MainButton wrong />;
// === 1 ===
  // === /tests/cases/fourslash/file.tsx ===
  // declare module JSX {
  //     interface Element { }
  //     interface IntrinsicElements {
  //     }
  //     interface ElementAttributesProperty { props; }
  // }
  // interface ClickableProps {
  //     children?: string;
  //     className?: string;
  // }
  // interface ButtonProps extends ClickableProps {
  //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
  // }
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
  // declare function [|MainButton|](linkProps: LinkProps): JSX.Element;
  // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <MainButton />;
  // let opt = <MainButton children="chidlren" />;
  // let opt = <MainButton onClick={()=>{}} />;
  // let opt = <MainButton onClick={()=>{}} ignore-prop />;
  // let opt = <MainButton goTo="goTo" />;
  // let opt = <MainButton wrong />;
    // === ContextSpan ===
    // === /tests/cases/fourslash/file.tsx ===
    // declare module JSX {
    //     interface Element { }
    //     interface IntrinsicElements {
    //     }
    //     interface ElementAttributesProperty { props; }
    // }
    // interface ClickableProps {
    //     children?: string;
    //     className?: string;
    // }
    // interface ButtonProps extends ClickableProps {
    //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
    // }
    // interface LinkProps extends ClickableProps {
    //     goTo: string;
    // }
    // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
    // [|declare function MainButton(linkProps: LinkProps): JSX.Element;|]
    // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
    // let opt = <MainButton />;
    // let opt = <MainButton children="chidlren" />;
    // let opt = <MainButton onClick={()=>{}} />;
    // let opt = <MainButton onClick={()=>{}} ignore-prop />;
    // let opt = <MainButton goTo="goTo" />;
    // let opt = <MainButton wrong />;
// === 2 ===
  // === /tests/cases/fourslash/file.tsx ===
  // declare module JSX {
  //     interface Element { }
  //     interface IntrinsicElements {
  //     }
  //     interface ElementAttributesProperty { props; }
  // }
  // interface ClickableProps {
  //     children?: string;
  //     className?: string;
  // }
  // interface ButtonProps extends ClickableProps {
  //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
  // }
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
  // declare function MainButton(linkProps: LinkProps): JSX.Element;
  // declare function [|MainButton|](props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <MainButton />;
  // let opt = <MainButton children="chidlren" />;
  // let opt = <MainButton onClick={()=>{}} />;
  // let opt = <MainButton onClick={()=>{}} ignore-prop />;
  // let opt = <MainButton goTo="goTo" />;
  // let opt = <MainButton wrong />;
    // === ContextSpan ===
    // === /tests/cases/fourslash/file.tsx ===
    // declare module JSX {
    //     interface Element { }
    //     interface IntrinsicElements {
    //     }
    //     interface ElementAttributesProperty { props; }
    // }
    // interface ClickableProps {
    //     children?: string;
    //     className?: string;
    // }
    // interface ButtonProps extends ClickableProps {
    //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
    // }
    // interface LinkProps extends ClickableProps {
    //     goTo: string;
    // }
    // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
    // declare function MainButton(linkProps: LinkProps): JSX.Element;
    // [|declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;|]
    // let opt = <MainButton />;
    // let opt = <MainButton children="chidlren" />;
    // let opt = <MainButton onClick={()=>{}} />;
    // let opt = <MainButton onClick={()=>{}} ignore-prop />;
    // let opt = <MainButton goTo="goTo" />;
    // let opt = <MainButton wrong />;
// === 3 ===
  // === /tests/cases/fourslash/file.tsx ===
  // declare module JSX {
  //     interface Element { }
  //     interface IntrinsicElements {
  //     }
  //     interface ElementAttributesProperty { props; }
  // }
  // interface ClickableProps {
  //     children?: string;
  //     className?: string;
  // }
  // interface ButtonProps extends ClickableProps {
  //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
  // }
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
  // declare function MainButton(linkProps: LinkProps): JSX.Element;
  // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <[|MainButton|] />;
  // let opt = <MainButton children="chidlren" />;
  // let opt = <MainButton onClick={()=>{}} />;
  // let opt = <MainButton onClick={()=>{}} ignore-prop />;
  // let opt = <MainButton goTo="goTo" />;
  // let opt = <MainButton wrong />;
    // === ContextSpan ===
    // === /tests/cases/fourslash/file.tsx ===
    // declare module JSX {
    //     interface Element { }
    //     interface IntrinsicElements {
    //     }
    //     interface ElementAttributesProperty { props; }
    // }
    // interface ClickableProps {
    //     children?: string;
    //     className?: string;
    // }
    // interface ButtonProps extends ClickableProps {
    //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
    // }
    // interface LinkProps extends ClickableProps {
    //     goTo: string;
    // }
    // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
    // declare function MainButton(linkProps: LinkProps): JSX.Element;
    // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
    // let opt = [|<MainButton />|];
    // let opt = <MainButton children="chidlren" />;
    // let opt = <MainButton onClick={()=>{}} />;
    // let opt = <MainButton onClick={()=>{}} ignore-prop />;
    // let opt = <MainButton goTo="goTo" />;
    // let opt = <MainButton wrong />;
// === 4 ===
  // === /tests/cases/fourslash/file.tsx ===
  // declare module JSX {
  //     interface Element { }
  //     interface IntrinsicElements {
  //     }
  //     interface ElementAttributesProperty { props; }
  // }
  // interface ClickableProps {
  //     children?: string;
  //     className?: string;
  // }
  // interface ButtonProps extends ClickableProps {
  //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
  // }
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
  // declare function MainButton(linkProps: LinkProps): JSX.Element;
  // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <MainButton />;
  // let opt = <[|MainButton|] children="chidlren" />;
  // let opt = <MainButton onClick={()=>{}} />;
  // let opt = <MainButton onClick={()=>{}} ignore-prop />;
  // let opt = <MainButton goTo="goTo" />;
  // let opt = <MainButton wrong />;
    // === ContextSpan ===
    // === /tests/cases/fourslash/file.tsx ===
    // declare module JSX {
    //     interface Element { }
    //     interface IntrinsicElements {
    //     }
    //     interface ElementAttributesProperty { props; }
    // }
    // interface ClickableProps {
    //     children?: string;
    //     className?: string;
    // }
    // interface ButtonProps extends ClickableProps {
    //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
    // }
    // interface LinkProps extends ClickableProps {
    //     goTo: string;
    // }
    // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
    // declare function MainButton(linkProps: LinkProps): JSX.Element;
    // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
    // let opt = <MainButton />;
    // let opt = [|<MainButton children="chidlren" />|];
    // let opt = <MainButton onClick={()=>{}} />;
    // let opt = <MainButton onClick={()=>{}} ignore-prop />;
    // let opt = <MainButton goTo="goTo" />;
    // let opt = <MainButton wrong />;
// === 5 ===
  // === /tests/cases/fourslash/file.tsx ===
  // declare module JSX {
  //     interface Element { }
  //     interface IntrinsicElements {
  //     }
  //     interface ElementAttributesProperty { props; }
  // }
  // interface ClickableProps {
  //     children?: string;
  //     className?: string;
  // }
  // interface ButtonProps extends ClickableProps {
  //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
  // }
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
  // declare function MainButton(linkProps: LinkProps): JSX.Element;
  // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <MainButton />;
  // let opt = <MainButton children="chidlren" />;
  // let opt = <[|MainButton|] onClick={()=>{}} />;
  // let opt = <MainButton onClick={()=>{}} ignore-prop />;
  // let opt = <MainButton goTo="goTo" />;
  // let opt = <MainButton wrong />;
    // === ContextSpan ===
    // === /tests/cases/fourslash/file.tsx ===
    // declare module JSX {
    //     interface Element { }
    //     interface IntrinsicElements {
    //     }
    //     interface ElementAttributesProperty { props; }
    // }
    // interface ClickableProps {
    //     children?: string;
    //     className?: string;
    // }
    // interface ButtonProps extends ClickableProps {
    //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
    // }
    // interface LinkProps extends ClickableProps {
    //     goTo: string;
    // }
    // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
    // declare function MainButton(linkProps: LinkProps): JSX.Element;
    // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
    // let opt = <MainButton />;
    // let opt = <MainButton children="chidlren" />;
    // let opt = [|<MainButton onClick={()=>{}} />|];
    // let opt = <MainButton onClick={()=>{}} ignore-prop />;
    // let opt = <MainButton goTo="goTo" />;
    // let opt = <MainButton wrong />;
// === 6 ===
  // === /tests/cases/fourslash/file.tsx ===
  // declare module JSX {
  //     interface Element { }
  //     interface IntrinsicElements {
  //     }
  //     interface ElementAttributesProperty { props; }
  // }
  // interface ClickableProps {
  //     children?: string;
  //     className?: string;
  // }
  // interface ButtonProps extends ClickableProps {
  //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
  // }
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
  // declare function MainButton(linkProps: LinkProps): JSX.Element;
  // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <MainButton />;
  // let opt = <MainButton children="chidlren" />;
  // let opt = <MainButton onClick={()=>{}} />;
  // let opt = <[|MainButton|] onClick={()=>{}} ignore-prop />;
  // let opt = <MainButton goTo="goTo" />;
  // let opt = <MainButton wrong />;
    // === ContextSpan ===
    // === /tests/cases/fourslash/file.tsx ===
    // declare module JSX {
    //     interface Element { }
    //     interface IntrinsicElements {
    //     }
    //     interface ElementAttributesProperty { props; }
    // }
    // interface ClickableProps {
    //     children?: string;
    //     className?: string;
    // }
    // interface ButtonProps extends ClickableProps {
    //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
    // }
    // interface LinkProps extends ClickableProps {
    //     goTo: string;
    // }
    // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
    // declare function MainButton(linkProps: LinkProps): JSX.Element;
    // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
    // let opt = <MainButton />;
    // let opt = <MainButton children="chidlren" />;
    // let opt = <MainButton onClick={()=>{}} />;
    // let opt = [|<MainButton onClick={()=>{}} ignore-prop />|];
    // let opt = <MainButton goTo="goTo" />;
    // let opt = <MainButton wrong />;
// === 7 ===
  // === /tests/cases/fourslash/file.tsx ===
  // declare module JSX {
  //     interface Element { }
  //     interface IntrinsicElements {
  //     }
  //     interface ElementAttributesProperty { props; }
  // }
  // interface ClickableProps {
  //     children?: string;
  //     className?: string;
  // }
  // interface ButtonProps extends ClickableProps {
  //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
  // }
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
  // declare function MainButton(linkProps: LinkProps): JSX.Element;
  // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <MainButton />;
  // let opt = <MainButton children="chidlren" />;
  // let opt = <MainButton onClick={()=>{}} />;
  // let opt = <MainButton onClick={()=>{}} ignore-prop />;
  // let opt = <[|MainButton|] goTo="goTo" />;
  // let opt = <MainButton wrong />;
    // === ContextSpan ===
    // === /tests/cases/fourslash/file.tsx ===
    // declare module JSX {
    //     interface Element { }
    //     interface IntrinsicElements {
    //     }
    //     interface ElementAttributesProperty { props; }
    // }
    // interface ClickableProps {
    //     children?: string;
    //     className?: string;
    // }
    // interface ButtonProps extends ClickableProps {
    //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
    // }
    // interface LinkProps extends ClickableProps {
    //     goTo: string;
    // }
    // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
    // declare function MainButton(linkProps: LinkProps): JSX.Element;
    // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
    // let opt = <MainButton />;
    // let opt = <MainButton children="chidlren" />;
    // let opt = <MainButton onClick={()=>{}} />;
    // let opt = <MainButton onClick={()=>{}} ignore-prop />;
    // let opt = [|<MainButton goTo="goTo" />|];
    // let opt = <MainButton wrong />;
// === 8 ===
  // === /tests/cases/fourslash/file.tsx ===
  // declare module JSX {
  //     interface Element { }
  //     interface IntrinsicElements {
  //     }
  //     interface ElementAttributesProperty { props; }
  // }
  // interface ClickableProps {
  //     children?: string;
  //     className?: string;
  // }
  // interface ButtonProps extends ClickableProps {
  //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
  // }
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
  // declare function MainButton(linkProps: LinkProps): JSX.Element;
  // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <MainButton />;
  // let opt = <MainButton children="chidlren" />;
  // let opt = <MainButton onClick={()=>{}} />;
  // let opt = <MainButton onClick={()=>{}} ignore-prop />;
  // let opt = <MainButton goTo="goTo" />;
  // let opt = <[|MainButton|] wrong />;
    // === ContextSpan ===
    // === /tests/cases/fourslash/file.tsx ===
    // declare module JSX {
    //     interface Element { }
    //     interface IntrinsicElements {
    //     }
    //     interface ElementAttributesProperty { props; }
    // }
    // interface ClickableProps {
    //     children?: string;
    //     className?: string;
    // }
    // interface ButtonProps extends ClickableProps {
    //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
    // }
    // interface LinkProps extends ClickableProps {
    //     goTo: string;
    // }
    // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
    // declare function MainButton(linkProps: LinkProps): JSX.Element;
    // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
    // let opt = <MainButton />;
    // let opt = <MainButton children="chidlren" />;
    // let opt = <MainButton onClick={()=>{}} />;
    // let opt = <MainButton onClick={()=>{}} ignore-prop />;
    // let opt = <MainButton goTo="goTo" />;
    // let opt = [|<MainButton wrong />|];


[
  {
    "textSpan": {
      "start": 411,
      "length": 10
    },
    "fileName": "/tests/cases/fourslash/file.tsx",
    "contextSpan": {
      "start": 394,
      "length": 67
    }
  },
  {
    "textSpan": {
      "start": 479,
      "length": 10
    },
    "fileName": "/tests/cases/fourslash/file.tsx",
    "contextSpan": {
      "start": 462,
      "length": 63
    }
  },
  {
    "textSpan": {
      "start": 543,
      "length": 10
    },
    "fileName": "/tests/cases/fourslash/file.tsx",
    "contextSpan": {
      "start": 526,
      "length": 73
    }
  },
  {
    "textSpan": {
      "start": 611,
      "length": 10
    },
    "fileName": "/tests/cases/fourslash/file.tsx",
    "contextSpan": {
      "start": 610,
      "length": 14
    }
  },
  {
    "textSpan": {
      "start": 637,
      "length": 10
    },
    "fileName": "/tests/cases/fourslash/file.tsx",
    "contextSpan": {
      "start": 636,
      "length": 34
    }
  },
  {
    "textSpan": {
      "start": 683,
      "length": 10
    },
    "fileName": "/tests/cases/fourslash/file.tsx",
    "contextSpan": {
      "start": 682,
      "length": 31
    }
  },
  {
    "textSpan": {
      "start": 726,
      "length": 10
    },
    "fileName": "/tests/cases/fourslash/file.tsx",
    "contextSpan": {
      "start": 725,
      "length": 43
    }
  },
  {
    "textSpan": {
      "start": 781,
      "length": 10
    },
    "fileName": "/tests/cases/fourslash/file.tsx",
    "contextSpan": {
      "start": 780,
      "length": 26
    }
  },
  {
    "textSpan": {
      "start": 819,
      "length": 10
    },
    "fileName": "/tests/cases/fourslash/file.tsx",
    "contextSpan": {
      "start": 818,
      "length": 20
    }
  }
]

// === RenameOptions ===
{
 "findInStrings": false,
 "findInComments": false,
 "providePrefixAndSuffixTextForRename": true
}
// === /tests/cases/fourslash/file.tsx ===
// declare module JSX {
//     interface Element { }
//     interface IntrinsicElements {
//     }
//     interface ElementAttributesProperty { props; }
// }
// interface ClickableProps {
//     children?: string;
//     className?: string;
// }
// interface ButtonProps extends ClickableProps {
//     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
// }
// interface LinkProps extends ClickableProps {
//     goTo: string;
// }
// declare function RENAME(buttonProps: ButtonProps): JSX.Element;
// declare function RENAME(linkProps: LinkProps): JSX.Element;
// declare function RENAME(props: ButtonProps | LinkProps): JSX.Element;
// let opt = <[|RENAME|] />;
// let opt = <RENAME children="chidlren" />;
// let opt = <RENAME onClick={()=>{}} />;
// let opt = <RENAME onClick={()=>{}} ignore-prop />;
// let opt = <RENAME goTo="goTo" />;
// let opt = <RENAME wrong />;

// === 0 ===
  // === /tests/cases/fourslash/file.tsx ===
  // declare module JSX {
  //     interface Element { }
  //     interface IntrinsicElements {
  //     }
  //     interface ElementAttributesProperty { props; }
  // }
  // interface ClickableProps {
  //     children?: string;
  //     className?: string;
  // }
  // interface ButtonProps extends ClickableProps {
  //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
  // }
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // declare function [|MainButton|](buttonProps: ButtonProps): JSX.Element;
  // declare function MainButton(linkProps: LinkProps): JSX.Element;
  // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <MainButton />;
  // let opt = <MainButton children="chidlren" />;
  // let opt = <MainButton onClick={()=>{}} />;
  // let opt = <MainButton onClick={()=>{}} ignore-prop />;
  // let opt = <MainButton goTo="goTo" />;
  // let opt = <MainButton wrong />;
    // === ContextSpan ===
    // === /tests/cases/fourslash/file.tsx ===
    // declare module JSX {
    //     interface Element { }
    //     interface IntrinsicElements {
    //     }
    //     interface ElementAttributesProperty { props; }
    // }
    // interface ClickableProps {
    //     children?: string;
    //     className?: string;
    // }
    // interface ButtonProps extends ClickableProps {
    //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
    // }
    // interface LinkProps extends ClickableProps {
    //     goTo: string;
    // }
    // [|declare function MainButton(buttonProps: ButtonProps): JSX.Element;|]
    // declare function MainButton(linkProps: LinkProps): JSX.Element;
    // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
    // let opt = <MainButton />;
    // let opt = <MainButton children="chidlren" />;
    // let opt = <MainButton onClick={()=>{}} />;
    // let opt = <MainButton onClick={()=>{}} ignore-prop />;
    // let opt = <MainButton goTo="goTo" />;
    // let opt = <MainButton wrong />;
// === 1 ===
  // === /tests/cases/fourslash/file.tsx ===
  // declare module JSX {
  //     interface Element { }
  //     interface IntrinsicElements {
  //     }
  //     interface ElementAttributesProperty { props; }
  // }
  // interface ClickableProps {
  //     children?: string;
  //     className?: string;
  // }
  // interface ButtonProps extends ClickableProps {
  //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
  // }
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
  // declare function [|MainButton|](linkProps: LinkProps): JSX.Element;
  // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <MainButton />;
  // let opt = <MainButton children="chidlren" />;
  // let opt = <MainButton onClick={()=>{}} />;
  // let opt = <MainButton onClick={()=>{}} ignore-prop />;
  // let opt = <MainButton goTo="goTo" />;
  // let opt = <MainButton wrong />;
    // === ContextSpan ===
    // === /tests/cases/fourslash/file.tsx ===
    // declare module JSX {
    //     interface Element { }
    //     interface IntrinsicElements {
    //     }
    //     interface ElementAttributesProperty { props; }
    // }
    // interface ClickableProps {
    //     children?: string;
    //     className?: string;
    // }
    // interface ButtonProps extends ClickableProps {
    //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
    // }
    // interface LinkProps extends ClickableProps {
    //     goTo: string;
    // }
    // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
    // [|declare function MainButton(linkProps: LinkProps): JSX.Element;|]
    // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
    // let opt = <MainButton />;
    // let opt = <MainButton children="chidlren" />;
    // let opt = <MainButton onClick={()=>{}} />;
    // let opt = <MainButton onClick={()=>{}} ignore-prop />;
    // let opt = <MainButton goTo="goTo" />;
    // let opt = <MainButton wrong />;
// === 2 ===
  // === /tests/cases/fourslash/file.tsx ===
  // declare module JSX {
  //     interface Element { }
  //     interface IntrinsicElements {
  //     }
  //     interface ElementAttributesProperty { props; }
  // }
  // interface ClickableProps {
  //     children?: string;
  //     className?: string;
  // }
  // interface ButtonProps extends ClickableProps {
  //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
  // }
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
  // declare function MainButton(linkProps: LinkProps): JSX.Element;
  // declare function [|MainButton|](props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <MainButton />;
  // let opt = <MainButton children="chidlren" />;
  // let opt = <MainButton onClick={()=>{}} />;
  // let opt = <MainButton onClick={()=>{}} ignore-prop />;
  // let opt = <MainButton goTo="goTo" />;
  // let opt = <MainButton wrong />;
    // === ContextSpan ===
    // === /tests/cases/fourslash/file.tsx ===
    // declare module JSX {
    //     interface Element { }
    //     interface IntrinsicElements {
    //     }
    //     interface ElementAttributesProperty { props; }
    // }
    // interface ClickableProps {
    //     children?: string;
    //     className?: string;
    // }
    // interface ButtonProps extends ClickableProps {
    //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
    // }
    // interface LinkProps extends ClickableProps {
    //     goTo: string;
    // }
    // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
    // declare function MainButton(linkProps: LinkProps): JSX.Element;
    // [|declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;|]
    // let opt = <MainButton />;
    // let opt = <MainButton children="chidlren" />;
    // let opt = <MainButton onClick={()=>{}} />;
    // let opt = <MainButton onClick={()=>{}} ignore-prop />;
    // let opt = <MainButton goTo="goTo" />;
    // let opt = <MainButton wrong />;
// === 3 ===
  // === /tests/cases/fourslash/file.tsx ===
  // declare module JSX {
  //     interface Element { }
  //     interface IntrinsicElements {
  //     }
  //     interface ElementAttributesProperty { props; }
  // }
  // interface ClickableProps {
  //     children?: string;
  //     className?: string;
  // }
  // interface ButtonProps extends ClickableProps {
  //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
  // }
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
  // declare function MainButton(linkProps: LinkProps): JSX.Element;
  // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <[|MainButton|] />;
  // let opt = <MainButton children="chidlren" />;
  // let opt = <MainButton onClick={()=>{}} />;
  // let opt = <MainButton onClick={()=>{}} ignore-prop />;
  // let opt = <MainButton goTo="goTo" />;
  // let opt = <MainButton wrong />;
    // === ContextSpan ===
    // === /tests/cases/fourslash/file.tsx ===
    // declare module JSX {
    //     interface Element { }
    //     interface IntrinsicElements {
    //     }
    //     interface ElementAttributesProperty { props; }
    // }
    // interface ClickableProps {
    //     children?: string;
    //     className?: string;
    // }
    // interface ButtonProps extends ClickableProps {
    //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
    // }
    // interface LinkProps extends ClickableProps {
    //     goTo: string;
    // }
    // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
    // declare function MainButton(linkProps: LinkProps): JSX.Element;
    // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
    // let opt = [|<MainButton />|];
    // let opt = <MainButton children="chidlren" />;
    // let opt = <MainButton onClick={()=>{}} />;
    // let opt = <MainButton onClick={()=>{}} ignore-prop />;
    // let opt = <MainButton goTo="goTo" />;
    // let opt = <MainButton wrong />;
// === 4 ===
  // === /tests/cases/fourslash/file.tsx ===
  // declare module JSX {
  //     interface Element { }
  //     interface IntrinsicElements {
  //     }
  //     interface ElementAttributesProperty { props; }
  // }
  // interface ClickableProps {
  //     children?: string;
  //     className?: string;
  // }
  // interface ButtonProps extends ClickableProps {
  //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
  // }
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
  // declare function MainButton(linkProps: LinkProps): JSX.Element;
  // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <MainButton />;
  // let opt = <[|MainButton|] children="chidlren" />;
  // let opt = <MainButton onClick={()=>{}} />;
  // let opt = <MainButton onClick={()=>{}} ignore-prop />;
  // let opt = <MainButton goTo="goTo" />;
  // let opt = <MainButton wrong />;
    // === ContextSpan ===
    // === /tests/cases/fourslash/file.tsx ===
    // declare module JSX {
    //     interface Element { }
    //     interface IntrinsicElements {
    //     }
    //     interface ElementAttributesProperty { props; }
    // }
    // interface ClickableProps {
    //     children?: string;
    //     className?: string;
    // }
    // interface ButtonProps extends ClickableProps {
    //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
    // }
    // interface LinkProps extends ClickableProps {
    //     goTo: string;
    // }
    // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
    // declare function MainButton(linkProps: LinkProps): JSX.Element;
    // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
    // let opt = <MainButton />;
    // let opt = [|<MainButton children="chidlren" />|];
    // let opt = <MainButton onClick={()=>{}} />;
    // let opt = <MainButton onClick={()=>{}} ignore-prop />;
    // let opt = <MainButton goTo="goTo" />;
    // let opt = <MainButton wrong />;
// === 5 ===
  // === /tests/cases/fourslash/file.tsx ===
  // declare module JSX {
  //     interface Element { }
  //     interface IntrinsicElements {
  //     }
  //     interface ElementAttributesProperty { props; }
  // }
  // interface ClickableProps {
  //     children?: string;
  //     className?: string;
  // }
  // interface ButtonProps extends ClickableProps {
  //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
  // }
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
  // declare function MainButton(linkProps: LinkProps): JSX.Element;
  // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <MainButton />;
  // let opt = <MainButton children="chidlren" />;
  // let opt = <[|MainButton|] onClick={()=>{}} />;
  // let opt = <MainButton onClick={()=>{}} ignore-prop />;
  // let opt = <MainButton goTo="goTo" />;
  // let opt = <MainButton wrong />;
    // === ContextSpan ===
    // === /tests/cases/fourslash/file.tsx ===
    // declare module JSX {
    //     interface Element { }
    //     interface IntrinsicElements {
    //     }
    //     interface ElementAttributesProperty { props; }
    // }
    // interface ClickableProps {
    //     children?: string;
    //     className?: string;
    // }
    // interface ButtonProps extends ClickableProps {
    //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
    // }
    // interface LinkProps extends ClickableProps {
    //     goTo: string;
    // }
    // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
    // declare function MainButton(linkProps: LinkProps): JSX.Element;
    // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
    // let opt = <MainButton />;
    // let opt = <MainButton children="chidlren" />;
    // let opt = [|<MainButton onClick={()=>{}} />|];
    // let opt = <MainButton onClick={()=>{}} ignore-prop />;
    // let opt = <MainButton goTo="goTo" />;
    // let opt = <MainButton wrong />;
// === 6 ===
  // === /tests/cases/fourslash/file.tsx ===
  // declare module JSX {
  //     interface Element { }
  //     interface IntrinsicElements {
  //     }
  //     interface ElementAttributesProperty { props; }
  // }
  // interface ClickableProps {
  //     children?: string;
  //     className?: string;
  // }
  // interface ButtonProps extends ClickableProps {
  //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
  // }
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
  // declare function MainButton(linkProps: LinkProps): JSX.Element;
  // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <MainButton />;
  // let opt = <MainButton children="chidlren" />;
  // let opt = <MainButton onClick={()=>{}} />;
  // let opt = <[|MainButton|] onClick={()=>{}} ignore-prop />;
  // let opt = <MainButton goTo="goTo" />;
  // let opt = <MainButton wrong />;
    // === ContextSpan ===
    // === /tests/cases/fourslash/file.tsx ===
    // declare module JSX {
    //     interface Element { }
    //     interface IntrinsicElements {
    //     }
    //     interface ElementAttributesProperty { props; }
    // }
    // interface ClickableProps {
    //     children?: string;
    //     className?: string;
    // }
    // interface ButtonProps extends ClickableProps {
    //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
    // }
    // interface LinkProps extends ClickableProps {
    //     goTo: string;
    // }
    // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
    // declare function MainButton(linkProps: LinkProps): JSX.Element;
    // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
    // let opt = <MainButton />;
    // let opt = <MainButton children="chidlren" />;
    // let opt = <MainButton onClick={()=>{}} />;
    // let opt = [|<MainButton onClick={()=>{}} ignore-prop />|];
    // let opt = <MainButton goTo="goTo" />;
    // let opt = <MainButton wrong />;
// === 7 ===
  // === /tests/cases/fourslash/file.tsx ===
  // declare module JSX {
  //     interface Element { }
  //     interface IntrinsicElements {
  //     }
  //     interface ElementAttributesProperty { props; }
  // }
  // interface ClickableProps {
  //     children?: string;
  //     className?: string;
  // }
  // interface ButtonProps extends ClickableProps {
  //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
  // }
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
  // declare function MainButton(linkProps: LinkProps): JSX.Element;
  // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <MainButton />;
  // let opt = <MainButton children="chidlren" />;
  // let opt = <MainButton onClick={()=>{}} />;
  // let opt = <MainButton onClick={()=>{}} ignore-prop />;
  // let opt = <[|MainButton|] goTo="goTo" />;
  // let opt = <MainButton wrong />;
    // === ContextSpan ===
    // === /tests/cases/fourslash/file.tsx ===
    // declare module JSX {
    //     interface Element { }
    //     interface IntrinsicElements {
    //     }
    //     interface ElementAttributesProperty { props; }
    // }
    // interface ClickableProps {
    //     children?: string;
    //     className?: string;
    // }
    // interface ButtonProps extends ClickableProps {
    //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
    // }
    // interface LinkProps extends ClickableProps {
    //     goTo: string;
    // }
    // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
    // declare function MainButton(linkProps: LinkProps): JSX.Element;
    // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
    // let opt = <MainButton />;
    // let opt = <MainButton children="chidlren" />;
    // let opt = <MainButton onClick={()=>{}} />;
    // let opt = <MainButton onClick={()=>{}} ignore-prop />;
    // let opt = [|<MainButton goTo="goTo" />|];
    // let opt = <MainButton wrong />;
// === 8 ===
  // === /tests/cases/fourslash/file.tsx ===
  // declare module JSX {
  //     interface Element { }
  //     interface IntrinsicElements {
  //     }
  //     interface ElementAttributesProperty { props; }
  // }
  // interface ClickableProps {
  //     children?: string;
  //     className?: string;
  // }
  // interface ButtonProps extends ClickableProps {
  //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
  // }
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
  // declare function MainButton(linkProps: LinkProps): JSX.Element;
  // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <MainButton />;
  // let opt = <MainButton children="chidlren" />;
  // let opt = <MainButton onClick={()=>{}} />;
  // let opt = <MainButton onClick={()=>{}} ignore-prop />;
  // let opt = <MainButton goTo="goTo" />;
  // let opt = <[|MainButton|] wrong />;
    // === ContextSpan ===
    // === /tests/cases/fourslash/file.tsx ===
    // declare module JSX {
    //     interface Element { }
    //     interface IntrinsicElements {
    //     }
    //     interface ElementAttributesProperty { props; }
    // }
    // interface ClickableProps {
    //     children?: string;
    //     className?: string;
    // }
    // interface ButtonProps extends ClickableProps {
    //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
    // }
    // interface LinkProps extends ClickableProps {
    //     goTo: string;
    // }
    // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
    // declare function MainButton(linkProps: LinkProps): JSX.Element;
    // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
    // let opt = <MainButton />;
    // let opt = <MainButton children="chidlren" />;
    // let opt = <MainButton onClick={()=>{}} />;
    // let opt = <MainButton onClick={()=>{}} ignore-prop />;
    // let opt = <MainButton goTo="goTo" />;
    // let opt = [|<MainButton wrong />|];


[
  {
    "textSpan": {
      "start": 411,
      "length": 10
    },
    "fileName": "/tests/cases/fourslash/file.tsx",
    "contextSpan": {
      "start": 394,
      "length": 67
    }
  },
  {
    "textSpan": {
      "start": 479,
      "length": 10
    },
    "fileName": "/tests/cases/fourslash/file.tsx",
    "contextSpan": {
      "start": 462,
      "length": 63
    }
  },
  {
    "textSpan": {
      "start": 543,
      "length": 10
    },
    "fileName": "/tests/cases/fourslash/file.tsx",
    "contextSpan": {
      "start": 526,
      "length": 73
    }
  },
  {
    "textSpan": {
      "start": 611,
      "length": 10
    },
    "fileName": "/tests/cases/fourslash/file.tsx",
    "contextSpan": {
      "start": 610,
      "length": 14
    }
  },
  {
    "textSpan": {
      "start": 637,
      "length": 10
    },
    "fileName": "/tests/cases/fourslash/file.tsx",
    "contextSpan": {
      "start": 636,
      "length": 34
    }
  },
  {
    "textSpan": {
      "start": 683,
      "length": 10
    },
    "fileName": "/tests/cases/fourslash/file.tsx",
    "contextSpan": {
      "start": 682,
      "length": 31
    }
  },
  {
    "textSpan": {
      "start": 726,
      "length": 10
    },
    "fileName": "/tests/cases/fourslash/file.tsx",
    "contextSpan": {
      "start": 725,
      "length": 43
    }
  },
  {
    "textSpan": {
      "start": 781,
      "length": 10
    },
    "fileName": "/tests/cases/fourslash/file.tsx",
    "contextSpan": {
      "start": 780,
      "length": 26
    }
  },
  {
    "textSpan": {
      "start": 819,
      "length": 10
    },
    "fileName": "/tests/cases/fourslash/file.tsx",
    "contextSpan": {
      "start": 818,
      "length": 20
    }
  }
]

// === RenameOptions ===
{
 "findInStrings": false,
 "findInComments": false,
 "providePrefixAndSuffixTextForRename": true
}
// === /tests/cases/fourslash/file.tsx ===
// declare module JSX {
//     interface Element { }
//     interface IntrinsicElements {
//     }
//     interface ElementAttributesProperty { props; }
// }
// interface ClickableProps {
//     children?: string;
//     className?: string;
// }
// interface ButtonProps extends ClickableProps {
//     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
// }
// interface LinkProps extends ClickableProps {
//     goTo: string;
// }
// declare function RENAME(buttonProps: ButtonProps): JSX.Element;
// declare function RENAME(linkProps: LinkProps): JSX.Element;
// declare function RENAME(props: ButtonProps | LinkProps): JSX.Element;
// let opt = <RENAME />;
// let opt = <[|RENAME|] children="chidlren" />;
// let opt = <RENAME onClick={()=>{}} />;
// let opt = <RENAME onClick={()=>{}} ignore-prop />;
// let opt = <RENAME goTo="goTo" />;
// let opt = <RENAME wrong />;

// === 0 ===
  // === /tests/cases/fourslash/file.tsx ===
  // declare module JSX {
  //     interface Element { }
  //     interface IntrinsicElements {
  //     }
  //     interface ElementAttributesProperty { props; }
  // }
  // interface ClickableProps {
  //     children?: string;
  //     className?: string;
  // }
  // interface ButtonProps extends ClickableProps {
  //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
  // }
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // declare function [|MainButton|](buttonProps: ButtonProps): JSX.Element;
  // declare function MainButton(linkProps: LinkProps): JSX.Element;
  // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <MainButton />;
  // let opt = <MainButton children="chidlren" />;
  // let opt = <MainButton onClick={()=>{}} />;
  // let opt = <MainButton onClick={()=>{}} ignore-prop />;
  // let opt = <MainButton goTo="goTo" />;
  // let opt = <MainButton wrong />;
    // === ContextSpan ===
    // === /tests/cases/fourslash/file.tsx ===
    // declare module JSX {
    //     interface Element { }
    //     interface IntrinsicElements {
    //     }
    //     interface ElementAttributesProperty { props; }
    // }
    // interface ClickableProps {
    //     children?: string;
    //     className?: string;
    // }
    // interface ButtonProps extends ClickableProps {
    //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
    // }
    // interface LinkProps extends ClickableProps {
    //     goTo: string;
    // }
    // [|declare function MainButton(buttonProps: ButtonProps): JSX.Element;|]
    // declare function MainButton(linkProps: LinkProps): JSX.Element;
    // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
    // let opt = <MainButton />;
    // let opt = <MainButton children="chidlren" />;
    // let opt = <MainButton onClick={()=>{}} />;
    // let opt = <MainButton onClick={()=>{}} ignore-prop />;
    // let opt = <MainButton goTo="goTo" />;
    // let opt = <MainButton wrong />;
// === 1 ===
  // === /tests/cases/fourslash/file.tsx ===
  // declare module JSX {
  //     interface Element { }
  //     interface IntrinsicElements {
  //     }
  //     interface ElementAttributesProperty { props; }
  // }
  // interface ClickableProps {
  //     children?: string;
  //     className?: string;
  // }
  // interface ButtonProps extends ClickableProps {
  //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
  // }
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
  // declare function [|MainButton|](linkProps: LinkProps): JSX.Element;
  // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <MainButton />;
  // let opt = <MainButton children="chidlren" />;
  // let opt = <MainButton onClick={()=>{}} />;
  // let opt = <MainButton onClick={()=>{}} ignore-prop />;
  // let opt = <MainButton goTo="goTo" />;
  // let opt = <MainButton wrong />;
    // === ContextSpan ===
    // === /tests/cases/fourslash/file.tsx ===
    // declare module JSX {
    //     interface Element { }
    //     interface IntrinsicElements {
    //     }
    //     interface ElementAttributesProperty { props; }
    // }
    // interface ClickableProps {
    //     children?: string;
    //     className?: string;
    // }
    // interface ButtonProps extends ClickableProps {
    //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
    // }
    // interface LinkProps extends ClickableProps {
    //     goTo: string;
    // }
    // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
    // [|declare function MainButton(linkProps: LinkProps): JSX.Element;|]
    // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
    // let opt = <MainButton />;
    // let opt = <MainButton children="chidlren" />;
    // let opt = <MainButton onClick={()=>{}} />;
    // let opt = <MainButton onClick={()=>{}} ignore-prop />;
    // let opt = <MainButton goTo="goTo" />;
    // let opt = <MainButton wrong />;
// === 2 ===
  // === /tests/cases/fourslash/file.tsx ===
  // declare module JSX {
  //     interface Element { }
  //     interface IntrinsicElements {
  //     }
  //     interface ElementAttributesProperty { props; }
  // }
  // interface ClickableProps {
  //     children?: string;
  //     className?: string;
  // }
  // interface ButtonProps extends ClickableProps {
  //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
  // }
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
  // declare function MainButton(linkProps: LinkProps): JSX.Element;
  // declare function [|MainButton|](props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <MainButton />;
  // let opt = <MainButton children="chidlren" />;
  // let opt = <MainButton onClick={()=>{}} />;
  // let opt = <MainButton onClick={()=>{}} ignore-prop />;
  // let opt = <MainButton goTo="goTo" />;
  // let opt = <MainButton wrong />;
    // === ContextSpan ===
    // === /tests/cases/fourslash/file.tsx ===
    // declare module JSX {
    //     interface Element { }
    //     interface IntrinsicElements {
    //     }
    //     interface ElementAttributesProperty { props; }
    // }
    // interface ClickableProps {
    //     children?: string;
    //     className?: string;
    // }
    // interface ButtonProps extends ClickableProps {
    //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
    // }
    // interface LinkProps extends ClickableProps {
    //     goTo: string;
    // }
    // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
    // declare function MainButton(linkProps: LinkProps): JSX.Element;
    // [|declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;|]
    // let opt = <MainButton />;
    // let opt = <MainButton children="chidlren" />;
    // let opt = <MainButton onClick={()=>{}} />;
    // let opt = <MainButton onClick={()=>{}} ignore-prop />;
    // let opt = <MainButton goTo="goTo" />;
    // let opt = <MainButton wrong />;
// === 3 ===
  // === /tests/cases/fourslash/file.tsx ===
  // declare module JSX {
  //     interface Element { }
  //     interface IntrinsicElements {
  //     }
  //     interface ElementAttributesProperty { props; }
  // }
  // interface ClickableProps {
  //     children?: string;
  //     className?: string;
  // }
  // interface ButtonProps extends ClickableProps {
  //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
  // }
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
  // declare function MainButton(linkProps: LinkProps): JSX.Element;
  // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <[|MainButton|] />;
  // let opt = <MainButton children="chidlren" />;
  // let opt = <MainButton onClick={()=>{}} />;
  // let opt = <MainButton onClick={()=>{}} ignore-prop />;
  // let opt = <MainButton goTo="goTo" />;
  // let opt = <MainButton wrong />;
    // === ContextSpan ===
    // === /tests/cases/fourslash/file.tsx ===
    // declare module JSX {
    //     interface Element { }
    //     interface IntrinsicElements {
    //     }
    //     interface ElementAttributesProperty { props; }
    // }
    // interface ClickableProps {
    //     children?: string;
    //     className?: string;
    // }
    // interface ButtonProps extends ClickableProps {
    //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
    // }
    // interface LinkProps extends ClickableProps {
    //     goTo: string;
    // }
    // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
    // declare function MainButton(linkProps: LinkProps): JSX.Element;
    // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
    // let opt = [|<MainButton />|];
    // let opt = <MainButton children="chidlren" />;
    // let opt = <MainButton onClick={()=>{}} />;
    // let opt = <MainButton onClick={()=>{}} ignore-prop />;
    // let opt = <MainButton goTo="goTo" />;
    // let opt = <MainButton wrong />;
// === 4 ===
  // === /tests/cases/fourslash/file.tsx ===
  // declare module JSX {
  //     interface Element { }
  //     interface IntrinsicElements {
  //     }
  //     interface ElementAttributesProperty { props; }
  // }
  // interface ClickableProps {
  //     children?: string;
  //     className?: string;
  // }
  // interface ButtonProps extends ClickableProps {
  //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
  // }
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
  // declare function MainButton(linkProps: LinkProps): JSX.Element;
  // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <MainButton />;
  // let opt = <[|MainButton|] children="chidlren" />;
  // let opt = <MainButton onClick={()=>{}} />;
  // let opt = <MainButton onClick={()=>{}} ignore-prop />;
  // let opt = <MainButton goTo="goTo" />;
  // let opt = <MainButton wrong />;
    // === ContextSpan ===
    // === /tests/cases/fourslash/file.tsx ===
    // declare module JSX {
    //     interface Element { }
    //     interface IntrinsicElements {
    //     }
    //     interface ElementAttributesProperty { props; }
    // }
    // interface ClickableProps {
    //     children?: string;
    //     className?: string;
    // }
    // interface ButtonProps extends ClickableProps {
    //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
    // }
    // interface LinkProps extends ClickableProps {
    //     goTo: string;
    // }
    // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
    // declare function MainButton(linkProps: LinkProps): JSX.Element;
    // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
    // let opt = <MainButton />;
    // let opt = [|<MainButton children="chidlren" />|];
    // let opt = <MainButton onClick={()=>{}} />;
    // let opt = <MainButton onClick={()=>{}} ignore-prop />;
    // let opt = <MainButton goTo="goTo" />;
    // let opt = <MainButton wrong />;
// === 5 ===
  // === /tests/cases/fourslash/file.tsx ===
  // declare module JSX {
  //     interface Element { }
  //     interface IntrinsicElements {
  //     }
  //     interface ElementAttributesProperty { props; }
  // }
  // interface ClickableProps {
  //     children?: string;
  //     className?: string;
  // }
  // interface ButtonProps extends ClickableProps {
  //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
  // }
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
  // declare function MainButton(linkProps: LinkProps): JSX.Element;
  // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <MainButton />;
  // let opt = <MainButton children="chidlren" />;
  // let opt = <[|MainButton|] onClick={()=>{}} />;
  // let opt = <MainButton onClick={()=>{}} ignore-prop />;
  // let opt = <MainButton goTo="goTo" />;
  // let opt = <MainButton wrong />;
    // === ContextSpan ===
    // === /tests/cases/fourslash/file.tsx ===
    // declare module JSX {
    //     interface Element { }
    //     interface IntrinsicElements {
    //     }
    //     interface ElementAttributesProperty { props; }
    // }
    // interface ClickableProps {
    //     children?: string;
    //     className?: string;
    // }
    // interface ButtonProps extends ClickableProps {
    //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
    // }
    // interface LinkProps extends ClickableProps {
    //     goTo: string;
    // }
    // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
    // declare function MainButton(linkProps: LinkProps): JSX.Element;
    // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
    // let opt = <MainButton />;
    // let opt = <MainButton children="chidlren" />;
    // let opt = [|<MainButton onClick={()=>{}} />|];
    // let opt = <MainButton onClick={()=>{}} ignore-prop />;
    // let opt = <MainButton goTo="goTo" />;
    // let opt = <MainButton wrong />;
// === 6 ===
  // === /tests/cases/fourslash/file.tsx ===
  // declare module JSX {
  //     interface Element { }
  //     interface IntrinsicElements {
  //     }
  //     interface ElementAttributesProperty { props; }
  // }
  // interface ClickableProps {
  //     children?: string;
  //     className?: string;
  // }
  // interface ButtonProps extends ClickableProps {
  //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
  // }
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
  // declare function MainButton(linkProps: LinkProps): JSX.Element;
  // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <MainButton />;
  // let opt = <MainButton children="chidlren" />;
  // let opt = <MainButton onClick={()=>{}} />;
  // let opt = <[|MainButton|] onClick={()=>{}} ignore-prop />;
  // let opt = <MainButton goTo="goTo" />;
  // let opt = <MainButton wrong />;
    // === ContextSpan ===
    // === /tests/cases/fourslash/file.tsx ===
    // declare module JSX {
    //     interface Element { }
    //     interface IntrinsicElements {
    //     }
    //     interface ElementAttributesProperty { props; }
    // }
    // interface ClickableProps {
    //     children?: string;
    //     className?: string;
    // }
    // interface ButtonProps extends ClickableProps {
    //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
    // }
    // interface LinkProps extends ClickableProps {
    //     goTo: string;
    // }
    // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
    // declare function MainButton(linkProps: LinkProps): JSX.Element;
    // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
    // let opt = <MainButton />;
    // let opt = <MainButton children="chidlren" />;
    // let opt = <MainButton onClick={()=>{}} />;
    // let opt = [|<MainButton onClick={()=>{}} ignore-prop />|];
    // let opt = <MainButton goTo="goTo" />;
    // let opt = <MainButton wrong />;
// === 7 ===
  // === /tests/cases/fourslash/file.tsx ===
  // declare module JSX {
  //     interface Element { }
  //     interface IntrinsicElements {
  //     }
  //     interface ElementAttributesProperty { props; }
  // }
  // interface ClickableProps {
  //     children?: string;
  //     className?: string;
  // }
  // interface ButtonProps extends ClickableProps {
  //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
  // }
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
  // declare function MainButton(linkProps: LinkProps): JSX.Element;
  // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <MainButton />;
  // let opt = <MainButton children="chidlren" />;
  // let opt = <MainButton onClick={()=>{}} />;
  // let opt = <MainButton onClick={()=>{}} ignore-prop />;
  // let opt = <[|MainButton|] goTo="goTo" />;
  // let opt = <MainButton wrong />;
    // === ContextSpan ===
    // === /tests/cases/fourslash/file.tsx ===
    // declare module JSX {
    //     interface Element { }
    //     interface IntrinsicElements {
    //     }
    //     interface ElementAttributesProperty { props; }
    // }
    // interface ClickableProps {
    //     children?: string;
    //     className?: string;
    // }
    // interface ButtonProps extends ClickableProps {
    //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
    // }
    // interface LinkProps extends ClickableProps {
    //     goTo: string;
    // }
    // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
    // declare function MainButton(linkProps: LinkProps): JSX.Element;
    // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
    // let opt = <MainButton />;
    // let opt = <MainButton children="chidlren" />;
    // let opt = <MainButton onClick={()=>{}} />;
    // let opt = <MainButton onClick={()=>{}} ignore-prop />;
    // let opt = [|<MainButton goTo="goTo" />|];
    // let opt = <MainButton wrong />;
// === 8 ===
  // === /tests/cases/fourslash/file.tsx ===
  // declare module JSX {
  //     interface Element { }
  //     interface IntrinsicElements {
  //     }
  //     interface ElementAttributesProperty { props; }
  // }
  // interface ClickableProps {
  //     children?: string;
  //     className?: string;
  // }
  // interface ButtonProps extends ClickableProps {
  //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
  // }
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
  // declare function MainButton(linkProps: LinkProps): JSX.Element;
  // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <MainButton />;
  // let opt = <MainButton children="chidlren" />;
  // let opt = <MainButton onClick={()=>{}} />;
  // let opt = <MainButton onClick={()=>{}} ignore-prop />;
  // let opt = <MainButton goTo="goTo" />;
  // let opt = <[|MainButton|] wrong />;
    // === ContextSpan ===
    // === /tests/cases/fourslash/file.tsx ===
    // declare module JSX {
    //     interface Element { }
    //     interface IntrinsicElements {
    //     }
    //     interface ElementAttributesProperty { props; }
    // }
    // interface ClickableProps {
    //     children?: string;
    //     className?: string;
    // }
    // interface ButtonProps extends ClickableProps {
    //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
    // }
    // interface LinkProps extends ClickableProps {
    //     goTo: string;
    // }
    // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
    // declare function MainButton(linkProps: LinkProps): JSX.Element;
    // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
    // let opt = <MainButton />;
    // let opt = <MainButton children="chidlren" />;
    // let opt = <MainButton onClick={()=>{}} />;
    // let opt = <MainButton onClick={()=>{}} ignore-prop />;
    // let opt = <MainButton goTo="goTo" />;
    // let opt = [|<MainButton wrong />|];


[
  {
    "textSpan": {
      "start": 411,
      "length": 10
    },
    "fileName": "/tests/cases/fourslash/file.tsx",
    "contextSpan": {
      "start": 394,
      "length": 67
    }
  },
  {
    "textSpan": {
      "start": 479,
      "length": 10
    },
    "fileName": "/tests/cases/fourslash/file.tsx",
    "contextSpan": {
      "start": 462,
      "length": 63
    }
  },
  {
    "textSpan": {
      "start": 543,
      "length": 10
    },
    "fileName": "/tests/cases/fourslash/file.tsx",
    "contextSpan": {
      "start": 526,
      "length": 73
    }
  },
  {
    "textSpan": {
      "start": 611,
      "length": 10
    },
    "fileName": "/tests/cases/fourslash/file.tsx",
    "contextSpan": {
      "start": 610,
      "length": 14
    }
  },
  {
    "textSpan": {
      "start": 637,
      "length": 10
    },
    "fileName": "/tests/cases/fourslash/file.tsx",
    "contextSpan": {
      "start": 636,
      "length": 34
    }
  },
  {
    "textSpan": {
      "start": 683,
      "length": 10
    },
    "fileName": "/tests/cases/fourslash/file.tsx",
    "contextSpan": {
      "start": 682,
      "length": 31
    }
  },
  {
    "textSpan": {
      "start": 726,
      "length": 10
    },
    "fileName": "/tests/cases/fourslash/file.tsx",
    "contextSpan": {
      "start": 725,
      "length": 43
    }
  },
  {
    "textSpan": {
      "start": 781,
      "length": 10
    },
    "fileName": "/tests/cases/fourslash/file.tsx",
    "contextSpan": {
      "start": 780,
      "length": 26
    }
  },
  {
    "textSpan": {
      "start": 819,
      "length": 10
    },
    "fileName": "/tests/cases/fourslash/file.tsx",
    "contextSpan": {
      "start": 818,
      "length": 20
    }
  }
]

// === RenameOptions ===
{
 "findInStrings": false,
 "findInComments": false,
 "providePrefixAndSuffixTextForRename": true
}
// === /tests/cases/fourslash/file.tsx ===
// declare module JSX {
//     interface Element { }
//     interface IntrinsicElements {
//     }
//     interface ElementAttributesProperty { props; }
// }
// interface ClickableProps {
//     children?: string;
//     className?: string;
// }
// interface ButtonProps extends ClickableProps {
//     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
// }
// interface LinkProps extends ClickableProps {
//     goTo: string;
// }
// declare function RENAME(buttonProps: ButtonProps): JSX.Element;
// declare function RENAME(linkProps: LinkProps): JSX.Element;
// declare function RENAME(props: ButtonProps | LinkProps): JSX.Element;
// let opt = <RENAME />;
// let opt = <RENAME children="chidlren" />;
// let opt = <[|RENAME|] onClick={()=>{}} />;
// let opt = <RENAME onClick={()=>{}} ignore-prop />;
// let opt = <RENAME goTo="goTo" />;
// let opt = <RENAME wrong />;

// === 0 ===
  // === /tests/cases/fourslash/file.tsx ===
  // declare module JSX {
  //     interface Element { }
  //     interface IntrinsicElements {
  //     }
  //     interface ElementAttributesProperty { props; }
  // }
  // interface ClickableProps {
  //     children?: string;
  //     className?: string;
  // }
  // interface ButtonProps extends ClickableProps {
  //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
  // }
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // declare function [|MainButton|](buttonProps: ButtonProps): JSX.Element;
  // declare function MainButton(linkProps: LinkProps): JSX.Element;
  // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <MainButton />;
  // let opt = <MainButton children="chidlren" />;
  // let opt = <MainButton onClick={()=>{}} />;
  // let opt = <MainButton onClick={()=>{}} ignore-prop />;
  // let opt = <MainButton goTo="goTo" />;
  // let opt = <MainButton wrong />;
    // === ContextSpan ===
    // === /tests/cases/fourslash/file.tsx ===
    // declare module JSX {
    //     interface Element { }
    //     interface IntrinsicElements {
    //     }
    //     interface ElementAttributesProperty { props; }
    // }
    // interface ClickableProps {
    //     children?: string;
    //     className?: string;
    // }
    // interface ButtonProps extends ClickableProps {
    //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
    // }
    // interface LinkProps extends ClickableProps {
    //     goTo: string;
    // }
    // [|declare function MainButton(buttonProps: ButtonProps): JSX.Element;|]
    // declare function MainButton(linkProps: LinkProps): JSX.Element;
    // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
    // let opt = <MainButton />;
    // let opt = <MainButton children="chidlren" />;
    // let opt = <MainButton onClick={()=>{}} />;
    // let opt = <MainButton onClick={()=>{}} ignore-prop />;
    // let opt = <MainButton goTo="goTo" />;
    // let opt = <MainButton wrong />;
// === 1 ===
  // === /tests/cases/fourslash/file.tsx ===
  // declare module JSX {
  //     interface Element { }
  //     interface IntrinsicElements {
  //     }
  //     interface ElementAttributesProperty { props; }
  // }
  // interface ClickableProps {
  //     children?: string;
  //     className?: string;
  // }
  // interface ButtonProps extends ClickableProps {
  //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
  // }
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
  // declare function [|MainButton|](linkProps: LinkProps): JSX.Element;
  // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <MainButton />;
  // let opt = <MainButton children="chidlren" />;
  // let opt = <MainButton onClick={()=>{}} />;
  // let opt = <MainButton onClick={()=>{}} ignore-prop />;
  // let opt = <MainButton goTo="goTo" />;
  // let opt = <MainButton wrong />;
    // === ContextSpan ===
    // === /tests/cases/fourslash/file.tsx ===
    // declare module JSX {
    //     interface Element { }
    //     interface IntrinsicElements {
    //     }
    //     interface ElementAttributesProperty { props; }
    // }
    // interface ClickableProps {
    //     children?: string;
    //     className?: string;
    // }
    // interface ButtonProps extends ClickableProps {
    //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
    // }
    // interface LinkProps extends ClickableProps {
    //     goTo: string;
    // }
    // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
    // [|declare function MainButton(linkProps: LinkProps): JSX.Element;|]
    // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
    // let opt = <MainButton />;
    // let opt = <MainButton children="chidlren" />;
    // let opt = <MainButton onClick={()=>{}} />;
    // let opt = <MainButton onClick={()=>{}} ignore-prop />;
    // let opt = <MainButton goTo="goTo" />;
    // let opt = <MainButton wrong />;
// === 2 ===
  // === /tests/cases/fourslash/file.tsx ===
  // declare module JSX {
  //     interface Element { }
  //     interface IntrinsicElements {
  //     }
  //     interface ElementAttributesProperty { props; }
  // }
  // interface ClickableProps {
  //     children?: string;
  //     className?: string;
  // }
  // interface ButtonProps extends ClickableProps {
  //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
  // }
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
  // declare function MainButton(linkProps: LinkProps): JSX.Element;
  // declare function [|MainButton|](props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <MainButton />;
  // let opt = <MainButton children="chidlren" />;
  // let opt = <MainButton onClick={()=>{}} />;
  // let opt = <MainButton onClick={()=>{}} ignore-prop />;
  // let opt = <MainButton goTo="goTo" />;
  // let opt = <MainButton wrong />;
    // === ContextSpan ===
    // === /tests/cases/fourslash/file.tsx ===
    // declare module JSX {
    //     interface Element { }
    //     interface IntrinsicElements {
    //     }
    //     interface ElementAttributesProperty { props; }
    // }
    // interface ClickableProps {
    //     children?: string;
    //     className?: string;
    // }
    // interface ButtonProps extends ClickableProps {
    //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
    // }
    // interface LinkProps extends ClickableProps {
    //     goTo: string;
    // }
    // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
    // declare function MainButton(linkProps: LinkProps): JSX.Element;
    // [|declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;|]
    // let opt = <MainButton />;
    // let opt = <MainButton children="chidlren" />;
    // let opt = <MainButton onClick={()=>{}} />;
    // let opt = <MainButton onClick={()=>{}} ignore-prop />;
    // let opt = <MainButton goTo="goTo" />;
    // let opt = <MainButton wrong />;
// === 3 ===
  // === /tests/cases/fourslash/file.tsx ===
  // declare module JSX {
  //     interface Element { }
  //     interface IntrinsicElements {
  //     }
  //     interface ElementAttributesProperty { props; }
  // }
  // interface ClickableProps {
  //     children?: string;
  //     className?: string;
  // }
  // interface ButtonProps extends ClickableProps {
  //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
  // }
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
  // declare function MainButton(linkProps: LinkProps): JSX.Element;
  // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <[|MainButton|] />;
  // let opt = <MainButton children="chidlren" />;
  // let opt = <MainButton onClick={()=>{}} />;
  // let opt = <MainButton onClick={()=>{}} ignore-prop />;
  // let opt = <MainButton goTo="goTo" />;
  // let opt = <MainButton wrong />;
    // === ContextSpan ===
    // === /tests/cases/fourslash/file.tsx ===
    // declare module JSX {
    //     interface Element { }
    //     interface IntrinsicElements {
    //     }
    //     interface ElementAttributesProperty { props; }
    // }
    // interface ClickableProps {
    //     children?: string;
    //     className?: string;
    // }
    // interface ButtonProps extends ClickableProps {
    //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
    // }
    // interface LinkProps extends ClickableProps {
    //     goTo: string;
    // }
    // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
    // declare function MainButton(linkProps: LinkProps): JSX.Element;
    // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
    // let opt = [|<MainButton />|];
    // let opt = <MainButton children="chidlren" />;
    // let opt = <MainButton onClick={()=>{}} />;
    // let opt = <MainButton onClick={()=>{}} ignore-prop />;
    // let opt = <MainButton goTo="goTo" />;
    // let opt = <MainButton wrong />;
// === 4 ===
  // === /tests/cases/fourslash/file.tsx ===
  // declare module JSX {
  //     interface Element { }
  //     interface IntrinsicElements {
  //     }
  //     interface ElementAttributesProperty { props; }
  // }
  // interface ClickableProps {
  //     children?: string;
  //     className?: string;
  // }
  // interface ButtonProps extends ClickableProps {
  //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
  // }
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
  // declare function MainButton(linkProps: LinkProps): JSX.Element;
  // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <MainButton />;
  // let opt = <[|MainButton|] children="chidlren" />;
  // let opt = <MainButton onClick={()=>{}} />;
  // let opt = <MainButton onClick={()=>{}} ignore-prop />;
  // let opt = <MainButton goTo="goTo" />;
  // let opt = <MainButton wrong />;
    // === ContextSpan ===
    // === /tests/cases/fourslash/file.tsx ===
    // declare module JSX {
    //     interface Element { }
    //     interface IntrinsicElements {
    //     }
    //     interface ElementAttributesProperty { props; }
    // }
    // interface ClickableProps {
    //     children?: string;
    //     className?: string;
    // }
    // interface ButtonProps extends ClickableProps {
    //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
    // }
    // interface LinkProps extends ClickableProps {
    //     goTo: string;
    // }
    // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
    // declare function MainButton(linkProps: LinkProps): JSX.Element;
    // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
    // let opt = <MainButton />;
    // let opt = [|<MainButton children="chidlren" />|];
    // let opt = <MainButton onClick={()=>{}} />;
    // let opt = <MainButton onClick={()=>{}} ignore-prop />;
    // let opt = <MainButton goTo="goTo" />;
    // let opt = <MainButton wrong />;
// === 5 ===
  // === /tests/cases/fourslash/file.tsx ===
  // declare module JSX {
  //     interface Element { }
  //     interface IntrinsicElements {
  //     }
  //     interface ElementAttributesProperty { props; }
  // }
  // interface ClickableProps {
  //     children?: string;
  //     className?: string;
  // }
  // interface ButtonProps extends ClickableProps {
  //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
  // }
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
  // declare function MainButton(linkProps: LinkProps): JSX.Element;
  // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <MainButton />;
  // let opt = <MainButton children="chidlren" />;
  // let opt = <[|MainButton|] onClick={()=>{}} />;
  // let opt = <MainButton onClick={()=>{}} ignore-prop />;
  // let opt = <MainButton goTo="goTo" />;
  // let opt = <MainButton wrong />;
    // === ContextSpan ===
    // === /tests/cases/fourslash/file.tsx ===
    // declare module JSX {
    //     interface Element { }
    //     interface IntrinsicElements {
    //     }
    //     interface ElementAttributesProperty { props; }
    // }
    // interface ClickableProps {
    //     children?: string;
    //     className?: string;
    // }
    // interface ButtonProps extends ClickableProps {
    //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
    // }
    // interface LinkProps extends ClickableProps {
    //     goTo: string;
    // }
    // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
    // declare function MainButton(linkProps: LinkProps): JSX.Element;
    // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
    // let opt = <MainButton />;
    // let opt = <MainButton children="chidlren" />;
    // let opt = [|<MainButton onClick={()=>{}} />|];
    // let opt = <MainButton onClick={()=>{}} ignore-prop />;
    // let opt = <MainButton goTo="goTo" />;
    // let opt = <MainButton wrong />;
// === 6 ===
  // === /tests/cases/fourslash/file.tsx ===
  // declare module JSX {
  //     interface Element { }
  //     interface IntrinsicElements {
  //     }
  //     interface ElementAttributesProperty { props; }
  // }
  // interface ClickableProps {
  //     children?: string;
  //     className?: string;
  // }
  // interface ButtonProps extends ClickableProps {
  //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
  // }
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
  // declare function MainButton(linkProps: LinkProps): JSX.Element;
  // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <MainButton />;
  // let opt = <MainButton children="chidlren" />;
  // let opt = <MainButton onClick={()=>{}} />;
  // let opt = <[|MainButton|] onClick={()=>{}} ignore-prop />;
  // let opt = <MainButton goTo="goTo" />;
  // let opt = <MainButton wrong />;
    // === ContextSpan ===
    // === /tests/cases/fourslash/file.tsx ===
    // declare module JSX {
    //     interface Element { }
    //     interface IntrinsicElements {
    //     }
    //     interface ElementAttributesProperty { props; }
    // }
    // interface ClickableProps {
    //     children?: string;
    //     className?: string;
    // }
    // interface ButtonProps extends ClickableProps {
    //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
    // }
    // interface LinkProps extends ClickableProps {
    //     goTo: string;
    // }
    // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
    // declare function MainButton(linkProps: LinkProps): JSX.Element;
    // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
    // let opt = <MainButton />;
    // let opt = <MainButton children="chidlren" />;
    // let opt = <MainButton onClick={()=>{}} />;
    // let opt = [|<MainButton onClick={()=>{}} ignore-prop />|];
    // let opt = <MainButton goTo="goTo" />;
    // let opt = <MainButton wrong />;
// === 7 ===
  // === /tests/cases/fourslash/file.tsx ===
  // declare module JSX {
  //     interface Element { }
  //     interface IntrinsicElements {
  //     }
  //     interface ElementAttributesProperty { props; }
  // }
  // interface ClickableProps {
  //     children?: string;
  //     className?: string;
  // }
  // interface ButtonProps extends ClickableProps {
  //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
  // }
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
  // declare function MainButton(linkProps: LinkProps): JSX.Element;
  // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <MainButton />;
  // let opt = <MainButton children="chidlren" />;
  // let opt = <MainButton onClick={()=>{}} />;
  // let opt = <MainButton onClick={()=>{}} ignore-prop />;
  // let opt = <[|MainButton|] goTo="goTo" />;
  // let opt = <MainButton wrong />;
    // === ContextSpan ===
    // === /tests/cases/fourslash/file.tsx ===
    // declare module JSX {
    //     interface Element { }
    //     interface IntrinsicElements {
    //     }
    //     interface ElementAttributesProperty { props; }
    // }
    // interface ClickableProps {
    //     children?: string;
    //     className?: string;
    // }
    // interface ButtonProps extends ClickableProps {
    //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
    // }
    // interface LinkProps extends ClickableProps {
    //     goTo: string;
    // }
    // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
    // declare function MainButton(linkProps: LinkProps): JSX.Element;
    // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
    // let opt = <MainButton />;
    // let opt = <MainButton children="chidlren" />;
    // let opt = <MainButton onClick={()=>{}} />;
    // let opt = <MainButton onClick={()=>{}} ignore-prop />;
    // let opt = [|<MainButton goTo="goTo" />|];
    // let opt = <MainButton wrong />;
// === 8 ===
  // === /tests/cases/fourslash/file.tsx ===
  // declare module JSX {
  //     interface Element { }
  //     interface IntrinsicElements {
  //     }
  //     interface ElementAttributesProperty { props; }
  // }
  // interface ClickableProps {
  //     children?: string;
  //     className?: string;
  // }
  // interface ButtonProps extends ClickableProps {
  //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
  // }
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
  // declare function MainButton(linkProps: LinkProps): JSX.Element;
  // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <MainButton />;
  // let opt = <MainButton children="chidlren" />;
  // let opt = <MainButton onClick={()=>{}} />;
  // let opt = <MainButton onClick={()=>{}} ignore-prop />;
  // let opt = <MainButton goTo="goTo" />;
  // let opt = <[|MainButton|] wrong />;
    // === ContextSpan ===
    // === /tests/cases/fourslash/file.tsx ===
    // declare module JSX {
    //     interface Element { }
    //     interface IntrinsicElements {
    //     }
    //     interface ElementAttributesProperty { props; }
    // }
    // interface ClickableProps {
    //     children?: string;
    //     className?: string;
    // }
    // interface ButtonProps extends ClickableProps {
    //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
    // }
    // interface LinkProps extends ClickableProps {
    //     goTo: string;
    // }
    // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
    // declare function MainButton(linkProps: LinkProps): JSX.Element;
    // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
    // let opt = <MainButton />;
    // let opt = <MainButton children="chidlren" />;
    // let opt = <MainButton onClick={()=>{}} />;
    // let opt = <MainButton onClick={()=>{}} ignore-prop />;
    // let opt = <MainButton goTo="goTo" />;
    // let opt = [|<MainButton wrong />|];


[
  {
    "textSpan": {
      "start": 411,
      "length": 10
    },
    "fileName": "/tests/cases/fourslash/file.tsx",
    "contextSpan": {
      "start": 394,
      "length": 67
    }
  },
  {
    "textSpan": {
      "start": 479,
      "length": 10
    },
    "fileName": "/tests/cases/fourslash/file.tsx",
    "contextSpan": {
      "start": 462,
      "length": 63
    }
  },
  {
    "textSpan": {
      "start": 543,
      "length": 10
    },
    "fileName": "/tests/cases/fourslash/file.tsx",
    "contextSpan": {
      "start": 526,
      "length": 73
    }
  },
  {
    "textSpan": {
      "start": 611,
      "length": 10
    },
    "fileName": "/tests/cases/fourslash/file.tsx",
    "contextSpan": {
      "start": 610,
      "length": 14
    }
  },
  {
    "textSpan": {
      "start": 637,
      "length": 10
    },
    "fileName": "/tests/cases/fourslash/file.tsx",
    "contextSpan": {
      "start": 636,
      "length": 34
    }
  },
  {
    "textSpan": {
      "start": 683,
      "length": 10
    },
    "fileName": "/tests/cases/fourslash/file.tsx",
    "contextSpan": {
      "start": 682,
      "length": 31
    }
  },
  {
    "textSpan": {
      "start": 726,
      "length": 10
    },
    "fileName": "/tests/cases/fourslash/file.tsx",
    "contextSpan": {
      "start": 725,
      "length": 43
    }
  },
  {
    "textSpan": {
      "start": 781,
      "length": 10
    },
    "fileName": "/tests/cases/fourslash/file.tsx",
    "contextSpan": {
      "start": 780,
      "length": 26
    }
  },
  {
    "textSpan": {
      "start": 819,
      "length": 10
    },
    "fileName": "/tests/cases/fourslash/file.tsx",
    "contextSpan": {
      "start": 818,
      "length": 20
    }
  }
]

// === RenameOptions ===
{
 "findInStrings": false,
 "findInComments": false,
 "providePrefixAndSuffixTextForRename": true
}
// === /tests/cases/fourslash/file.tsx ===
// declare module JSX {
//     interface Element { }
//     interface IntrinsicElements {
//     }
//     interface ElementAttributesProperty { props; }
// }
// interface ClickableProps {
//     children?: string;
//     className?: string;
// }
// interface ButtonProps extends ClickableProps {
//     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
// }
// interface LinkProps extends ClickableProps {
//     goTo: string;
// }
// declare function RENAME(buttonProps: ButtonProps): JSX.Element;
// declare function RENAME(linkProps: LinkProps): JSX.Element;
// declare function RENAME(props: ButtonProps | LinkProps): JSX.Element;
// let opt = <RENAME />;
// let opt = <RENAME children="chidlren" />;
// let opt = <RENAME onClick={()=>{}} />;
// let opt = <[|RENAME|] onClick={()=>{}} ignore-prop />;
// let opt = <RENAME goTo="goTo" />;
// let opt = <RENAME wrong />;

// === 0 ===
  // === /tests/cases/fourslash/file.tsx ===
  // declare module JSX {
  //     interface Element { }
  //     interface IntrinsicElements {
  //     }
  //     interface ElementAttributesProperty { props; }
  // }
  // interface ClickableProps {
  //     children?: string;
  //     className?: string;
  // }
  // interface ButtonProps extends ClickableProps {
  //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
  // }
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // declare function [|MainButton|](buttonProps: ButtonProps): JSX.Element;
  // declare function MainButton(linkProps: LinkProps): JSX.Element;
  // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <MainButton />;
  // let opt = <MainButton children="chidlren" />;
  // let opt = <MainButton onClick={()=>{}} />;
  // let opt = <MainButton onClick={()=>{}} ignore-prop />;
  // let opt = <MainButton goTo="goTo" />;
  // let opt = <MainButton wrong />;
    // === ContextSpan ===
    // === /tests/cases/fourslash/file.tsx ===
    // declare module JSX {
    //     interface Element { }
    //     interface IntrinsicElements {
    //     }
    //     interface ElementAttributesProperty { props; }
    // }
    // interface ClickableProps {
    //     children?: string;
    //     className?: string;
    // }
    // interface ButtonProps extends ClickableProps {
    //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
    // }
    // interface LinkProps extends ClickableProps {
    //     goTo: string;
    // }
    // [|declare function MainButton(buttonProps: ButtonProps): JSX.Element;|]
    // declare function MainButton(linkProps: LinkProps): JSX.Element;
    // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
    // let opt = <MainButton />;
    // let opt = <MainButton children="chidlren" />;
    // let opt = <MainButton onClick={()=>{}} />;
    // let opt = <MainButton onClick={()=>{}} ignore-prop />;
    // let opt = <MainButton goTo="goTo" />;
    // let opt = <MainButton wrong />;
// === 1 ===
  // === /tests/cases/fourslash/file.tsx ===
  // declare module JSX {
  //     interface Element { }
  //     interface IntrinsicElements {
  //     }
  //     interface ElementAttributesProperty { props; }
  // }
  // interface ClickableProps {
  //     children?: string;
  //     className?: string;
  // }
  // interface ButtonProps extends ClickableProps {
  //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
  // }
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
  // declare function [|MainButton|](linkProps: LinkProps): JSX.Element;
  // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <MainButton />;
  // let opt = <MainButton children="chidlren" />;
  // let opt = <MainButton onClick={()=>{}} />;
  // let opt = <MainButton onClick={()=>{}} ignore-prop />;
  // let opt = <MainButton goTo="goTo" />;
  // let opt = <MainButton wrong />;
    // === ContextSpan ===
    // === /tests/cases/fourslash/file.tsx ===
    // declare module JSX {
    //     interface Element { }
    //     interface IntrinsicElements {
    //     }
    //     interface ElementAttributesProperty { props; }
    // }
    // interface ClickableProps {
    //     children?: string;
    //     className?: string;
    // }
    // interface ButtonProps extends ClickableProps {
    //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
    // }
    // interface LinkProps extends ClickableProps {
    //     goTo: string;
    // }
    // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
    // [|declare function MainButton(linkProps: LinkProps): JSX.Element;|]
    // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
    // let opt = <MainButton />;
    // let opt = <MainButton children="chidlren" />;
    // let opt = <MainButton onClick={()=>{}} />;
    // let opt = <MainButton onClick={()=>{}} ignore-prop />;
    // let opt = <MainButton goTo="goTo" />;
    // let opt = <MainButton wrong />;
// === 2 ===
  // === /tests/cases/fourslash/file.tsx ===
  // declare module JSX {
  //     interface Element { }
  //     interface IntrinsicElements {
  //     }
  //     interface ElementAttributesProperty { props; }
  // }
  // interface ClickableProps {
  //     children?: string;
  //     className?: string;
  // }
  // interface ButtonProps extends ClickableProps {
  //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
  // }
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
  // declare function MainButton(linkProps: LinkProps): JSX.Element;
  // declare function [|MainButton|](props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <MainButton />;
  // let opt = <MainButton children="chidlren" />;
  // let opt = <MainButton onClick={()=>{}} />;
  // let opt = <MainButton onClick={()=>{}} ignore-prop />;
  // let opt = <MainButton goTo="goTo" />;
  // let opt = <MainButton wrong />;
    // === ContextSpan ===
    // === /tests/cases/fourslash/file.tsx ===
    // declare module JSX {
    //     interface Element { }
    //     interface IntrinsicElements {
    //     }
    //     interface ElementAttributesProperty { props; }
    // }
    // interface ClickableProps {
    //     children?: string;
    //     className?: string;
    // }
    // interface ButtonProps extends ClickableProps {
    //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
    // }
    // interface LinkProps extends ClickableProps {
    //     goTo: string;
    // }
    // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
    // declare function MainButton(linkProps: LinkProps): JSX.Element;
    // [|declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;|]
    // let opt = <MainButton />;
    // let opt = <MainButton children="chidlren" />;
    // let opt = <MainButton onClick={()=>{}} />;
    // let opt = <MainButton onClick={()=>{}} ignore-prop />;
    // let opt = <MainButton goTo="goTo" />;
    // let opt = <MainButton wrong />;
// === 3 ===
  // === /tests/cases/fourslash/file.tsx ===
  // declare module JSX {
  //     interface Element { }
  //     interface IntrinsicElements {
  //     }
  //     interface ElementAttributesProperty { props; }
  // }
  // interface ClickableProps {
  //     children?: string;
  //     className?: string;
  // }
  // interface ButtonProps extends ClickableProps {
  //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
  // }
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
  // declare function MainButton(linkProps: LinkProps): JSX.Element;
  // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <[|MainButton|] />;
  // let opt = <MainButton children="chidlren" />;
  // let opt = <MainButton onClick={()=>{}} />;
  // let opt = <MainButton onClick={()=>{}} ignore-prop />;
  // let opt = <MainButton goTo="goTo" />;
  // let opt = <MainButton wrong />;
    // === ContextSpan ===
    // === /tests/cases/fourslash/file.tsx ===
    // declare module JSX {
    //     interface Element { }
    //     interface IntrinsicElements {
    //     }
    //     interface ElementAttributesProperty { props; }
    // }
    // interface ClickableProps {
    //     children?: string;
    //     className?: string;
    // }
    // interface ButtonProps extends ClickableProps {
    //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
    // }
    // interface LinkProps extends ClickableProps {
    //     goTo: string;
    // }
    // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
    // declare function MainButton(linkProps: LinkProps): JSX.Element;
    // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
    // let opt = [|<MainButton />|];
    // let opt = <MainButton children="chidlren" />;
    // let opt = <MainButton onClick={()=>{}} />;
    // let opt = <MainButton onClick={()=>{}} ignore-prop />;
    // let opt = <MainButton goTo="goTo" />;
    // let opt = <MainButton wrong />;
// === 4 ===
  // === /tests/cases/fourslash/file.tsx ===
  // declare module JSX {
  //     interface Element { }
  //     interface IntrinsicElements {
  //     }
  //     interface ElementAttributesProperty { props; }
  // }
  // interface ClickableProps {
  //     children?: string;
  //     className?: string;
  // }
  // interface ButtonProps extends ClickableProps {
  //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
  // }
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
  // declare function MainButton(linkProps: LinkProps): JSX.Element;
  // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <MainButton />;
  // let opt = <[|MainButton|] children="chidlren" />;
  // let opt = <MainButton onClick={()=>{}} />;
  // let opt = <MainButton onClick={()=>{}} ignore-prop />;
  // let opt = <MainButton goTo="goTo" />;
  // let opt = <MainButton wrong />;
    // === ContextSpan ===
    // === /tests/cases/fourslash/file.tsx ===
    // declare module JSX {
    //     interface Element { }
    //     interface IntrinsicElements {
    //     }
    //     interface ElementAttributesProperty { props; }
    // }
    // interface ClickableProps {
    //     children?: string;
    //     className?: string;
    // }
    // interface ButtonProps extends ClickableProps {
    //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
    // }
    // interface LinkProps extends ClickableProps {
    //     goTo: string;
    // }
    // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
    // declare function MainButton(linkProps: LinkProps): JSX.Element;
    // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
    // let opt = <MainButton />;
    // let opt = [|<MainButton children="chidlren" />|];
    // let opt = <MainButton onClick={()=>{}} />;
    // let opt = <MainButton onClick={()=>{}} ignore-prop />;
    // let opt = <MainButton goTo="goTo" />;
    // let opt = <MainButton wrong />;
// === 5 ===
  // === /tests/cases/fourslash/file.tsx ===
  // declare module JSX {
  //     interface Element { }
  //     interface IntrinsicElements {
  //     }
  //     interface ElementAttributesProperty { props; }
  // }
  // interface ClickableProps {
  //     children?: string;
  //     className?: string;
  // }
  // interface ButtonProps extends ClickableProps {
  //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
  // }
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
  // declare function MainButton(linkProps: LinkProps): JSX.Element;
  // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <MainButton />;
  // let opt = <MainButton children="chidlren" />;
  // let opt = <[|MainButton|] onClick={()=>{}} />;
  // let opt = <MainButton onClick={()=>{}} ignore-prop />;
  // let opt = <MainButton goTo="goTo" />;
  // let opt = <MainButton wrong />;
    // === ContextSpan ===
    // === /tests/cases/fourslash/file.tsx ===
    // declare module JSX {
    //     interface Element { }
    //     interface IntrinsicElements {
    //     }
    //     interface ElementAttributesProperty { props; }
    // }
    // interface ClickableProps {
    //     children?: string;
    //     className?: string;
    // }
    // interface ButtonProps extends ClickableProps {
    //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
    // }
    // interface LinkProps extends ClickableProps {
    //     goTo: string;
    // }
    // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
    // declare function MainButton(linkProps: LinkProps): JSX.Element;
    // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
    // let opt = <MainButton />;
    // let opt = <MainButton children="chidlren" />;
    // let opt = [|<MainButton onClick={()=>{}} />|];
    // let opt = <MainButton onClick={()=>{}} ignore-prop />;
    // let opt = <MainButton goTo="goTo" />;
    // let opt = <MainButton wrong />;
// === 6 ===
  // === /tests/cases/fourslash/file.tsx ===
  // declare module JSX {
  //     interface Element { }
  //     interface IntrinsicElements {
  //     }
  //     interface ElementAttributesProperty { props; }
  // }
  // interface ClickableProps {
  //     children?: string;
  //     className?: string;
  // }
  // interface ButtonProps extends ClickableProps {
  //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
  // }
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
  // declare function MainButton(linkProps: LinkProps): JSX.Element;
  // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <MainButton />;
  // let opt = <MainButton children="chidlren" />;
  // let opt = <MainButton onClick={()=>{}} />;
  // let opt = <[|MainButton|] onClick={()=>{}} ignore-prop />;
  // let opt = <MainButton goTo="goTo" />;
  // let opt = <MainButton wrong />;
    // === ContextSpan ===
    // === /tests/cases/fourslash/file.tsx ===
    // declare module JSX {
    //     interface Element { }
    //     interface IntrinsicElements {
    //     }
    //     interface ElementAttributesProperty { props; }
    // }
    // interface ClickableProps {
    //     children?: string;
    //     className?: string;
    // }
    // interface ButtonProps extends ClickableProps {
    //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
    // }
    // interface LinkProps extends ClickableProps {
    //     goTo: string;
    // }
    // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
    // declare function MainButton(linkProps: LinkProps): JSX.Element;
    // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
    // let opt = <MainButton />;
    // let opt = <MainButton children="chidlren" />;
    // let opt = <MainButton onClick={()=>{}} />;
    // let opt = [|<MainButton onClick={()=>{}} ignore-prop />|];
    // let opt = <MainButton goTo="goTo" />;
    // let opt = <MainButton wrong />;
// === 7 ===
  // === /tests/cases/fourslash/file.tsx ===
  // declare module JSX {
  //     interface Element { }
  //     interface IntrinsicElements {
  //     }
  //     interface ElementAttributesProperty { props; }
  // }
  // interface ClickableProps {
  //     children?: string;
  //     className?: string;
  // }
  // interface ButtonProps extends ClickableProps {
  //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
  // }
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
  // declare function MainButton(linkProps: LinkProps): JSX.Element;
  // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <MainButton />;
  // let opt = <MainButton children="chidlren" />;
  // let opt = <MainButton onClick={()=>{}} />;
  // let opt = <MainButton onClick={()=>{}} ignore-prop />;
  // let opt = <[|MainButton|] goTo="goTo" />;
  // let opt = <MainButton wrong />;
    // === ContextSpan ===
    // === /tests/cases/fourslash/file.tsx ===
    // declare module JSX {
    //     interface Element { }
    //     interface IntrinsicElements {
    //     }
    //     interface ElementAttributesProperty { props; }
    // }
    // interface ClickableProps {
    //     children?: string;
    //     className?: string;
    // }
    // interface ButtonProps extends ClickableProps {
    //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
    // }
    // interface LinkProps extends ClickableProps {
    //     goTo: string;
    // }
    // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
    // declare function MainButton(linkProps: LinkProps): JSX.Element;
    // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
    // let opt = <MainButton />;
    // let opt = <MainButton children="chidlren" />;
    // let opt = <MainButton onClick={()=>{}} />;
    // let opt = <MainButton onClick={()=>{}} ignore-prop />;
    // let opt = [|<MainButton goTo="goTo" />|];
    // let opt = <MainButton wrong />;
// === 8 ===
  // === /tests/cases/fourslash/file.tsx ===
  // declare module JSX {
  //     interface Element { }
  //     interface IntrinsicElements {
  //     }
  //     interface ElementAttributesProperty { props; }
  // }
  // interface ClickableProps {
  //     children?: string;
  //     className?: string;
  // }
  // interface ButtonProps extends ClickableProps {
  //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
  // }
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
  // declare function MainButton(linkProps: LinkProps): JSX.Element;
  // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <MainButton />;
  // let opt = <MainButton children="chidlren" />;
  // let opt = <MainButton onClick={()=>{}} />;
  // let opt = <MainButton onClick={()=>{}} ignore-prop />;
  // let opt = <MainButton goTo="goTo" />;
  // let opt = <[|MainButton|] wrong />;
    // === ContextSpan ===
    // === /tests/cases/fourslash/file.tsx ===
    // declare module JSX {
    //     interface Element { }
    //     interface IntrinsicElements {
    //     }
    //     interface ElementAttributesProperty { props; }
    // }
    // interface ClickableProps {
    //     children?: string;
    //     className?: string;
    // }
    // interface ButtonProps extends ClickableProps {
    //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
    // }
    // interface LinkProps extends ClickableProps {
    //     goTo: string;
    // }
    // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
    // declare function MainButton(linkProps: LinkProps): JSX.Element;
    // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
    // let opt = <MainButton />;
    // let opt = <MainButton children="chidlren" />;
    // let opt = <MainButton onClick={()=>{}} />;
    // let opt = <MainButton onClick={()=>{}} ignore-prop />;
    // let opt = <MainButton goTo="goTo" />;
    // let opt = [|<MainButton wrong />|];


[
  {
    "textSpan": {
      "start": 411,
      "length": 10
    },
    "fileName": "/tests/cases/fourslash/file.tsx",
    "contextSpan": {
      "start": 394,
      "length": 67
    }
  },
  {
    "textSpan": {
      "start": 479,
      "length": 10
    },
    "fileName": "/tests/cases/fourslash/file.tsx",
    "contextSpan": {
      "start": 462,
      "length": 63
    }
  },
  {
    "textSpan": {
      "start": 543,
      "length": 10
    },
    "fileName": "/tests/cases/fourslash/file.tsx",
    "contextSpan": {
      "start": 526,
      "length": 73
    }
  },
  {
    "textSpan": {
      "start": 611,
      "length": 10
    },
    "fileName": "/tests/cases/fourslash/file.tsx",
    "contextSpan": {
      "start": 610,
      "length": 14
    }
  },
  {
    "textSpan": {
      "start": 637,
      "length": 10
    },
    "fileName": "/tests/cases/fourslash/file.tsx",
    "contextSpan": {
      "start": 636,
      "length": 34
    }
  },
  {
    "textSpan": {
      "start": 683,
      "length": 10
    },
    "fileName": "/tests/cases/fourslash/file.tsx",
    "contextSpan": {
      "start": 682,
      "length": 31
    }
  },
  {
    "textSpan": {
      "start": 726,
      "length": 10
    },
    "fileName": "/tests/cases/fourslash/file.tsx",
    "contextSpan": {
      "start": 725,
      "length": 43
    }
  },
  {
    "textSpan": {
      "start": 781,
      "length": 10
    },
    "fileName": "/tests/cases/fourslash/file.tsx",
    "contextSpan": {
      "start": 780,
      "length": 26
    }
  },
  {
    "textSpan": {
      "start": 819,
      "length": 10
    },
    "fileName": "/tests/cases/fourslash/file.tsx",
    "contextSpan": {
      "start": 818,
      "length": 20
    }
  }
]

// === RenameOptions ===
{
 "findInStrings": false,
 "findInComments": false,
 "providePrefixAndSuffixTextForRename": true
}
// === /tests/cases/fourslash/file.tsx ===
// declare module JSX {
//     interface Element { }
//     interface IntrinsicElements {
//     }
//     interface ElementAttributesProperty { props; }
// }
// interface ClickableProps {
//     children?: string;
//     className?: string;
// }
// interface ButtonProps extends ClickableProps {
//     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
// }
// interface LinkProps extends ClickableProps {
//     goTo: string;
// }
// declare function RENAME(buttonProps: ButtonProps): JSX.Element;
// declare function RENAME(linkProps: LinkProps): JSX.Element;
// declare function RENAME(props: ButtonProps | LinkProps): JSX.Element;
// let opt = <RENAME />;
// let opt = <RENAME children="chidlren" />;
// let opt = <RENAME onClick={()=>{}} />;
// let opt = <RENAME onClick={()=>{}} ignore-prop />;
// let opt = <[|RENAME|] goTo="goTo" />;
// let opt = <RENAME wrong />;

// === 0 ===
  // === /tests/cases/fourslash/file.tsx ===
  // declare module JSX {
  //     interface Element { }
  //     interface IntrinsicElements {
  //     }
  //     interface ElementAttributesProperty { props; }
  // }
  // interface ClickableProps {
  //     children?: string;
  //     className?: string;
  // }
  // interface ButtonProps extends ClickableProps {
  //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
  // }
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // declare function [|MainButton|](buttonProps: ButtonProps): JSX.Element;
  // declare function MainButton(linkProps: LinkProps): JSX.Element;
  // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <MainButton />;
  // let opt = <MainButton children="chidlren" />;
  // let opt = <MainButton onClick={()=>{}} />;
  // let opt = <MainButton onClick={()=>{}} ignore-prop />;
  // let opt = <MainButton goTo="goTo" />;
  // let opt = <MainButton wrong />;
    // === ContextSpan ===
    // === /tests/cases/fourslash/file.tsx ===
    // declare module JSX {
    //     interface Element { }
    //     interface IntrinsicElements {
    //     }
    //     interface ElementAttributesProperty { props; }
    // }
    // interface ClickableProps {
    //     children?: string;
    //     className?: string;
    // }
    // interface ButtonProps extends ClickableProps {
    //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
    // }
    // interface LinkProps extends ClickableProps {
    //     goTo: string;
    // }
    // [|declare function MainButton(buttonProps: ButtonProps): JSX.Element;|]
    // declare function MainButton(linkProps: LinkProps): JSX.Element;
    // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
    // let opt = <MainButton />;
    // let opt = <MainButton children="chidlren" />;
    // let opt = <MainButton onClick={()=>{}} />;
    // let opt = <MainButton onClick={()=>{}} ignore-prop />;
    // let opt = <MainButton goTo="goTo" />;
    // let opt = <MainButton wrong />;
// === 1 ===
  // === /tests/cases/fourslash/file.tsx ===
  // declare module JSX {
  //     interface Element { }
  //     interface IntrinsicElements {
  //     }
  //     interface ElementAttributesProperty { props; }
  // }
  // interface ClickableProps {
  //     children?: string;
  //     className?: string;
  // }
  // interface ButtonProps extends ClickableProps {
  //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
  // }
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
  // declare function [|MainButton|](linkProps: LinkProps): JSX.Element;
  // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <MainButton />;
  // let opt = <MainButton children="chidlren" />;
  // let opt = <MainButton onClick={()=>{}} />;
  // let opt = <MainButton onClick={()=>{}} ignore-prop />;
  // let opt = <MainButton goTo="goTo" />;
  // let opt = <MainButton wrong />;
    // === ContextSpan ===
    // === /tests/cases/fourslash/file.tsx ===
    // declare module JSX {
    //     interface Element { }
    //     interface IntrinsicElements {
    //     }
    //     interface ElementAttributesProperty { props; }
    // }
    // interface ClickableProps {
    //     children?: string;
    //     className?: string;
    // }
    // interface ButtonProps extends ClickableProps {
    //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
    // }
    // interface LinkProps extends ClickableProps {
    //     goTo: string;
    // }
    // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
    // [|declare function MainButton(linkProps: LinkProps): JSX.Element;|]
    // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
    // let opt = <MainButton />;
    // let opt = <MainButton children="chidlren" />;
    // let opt = <MainButton onClick={()=>{}} />;
    // let opt = <MainButton onClick={()=>{}} ignore-prop />;
    // let opt = <MainButton goTo="goTo" />;
    // let opt = <MainButton wrong />;
// === 2 ===
  // === /tests/cases/fourslash/file.tsx ===
  // declare module JSX {
  //     interface Element { }
  //     interface IntrinsicElements {
  //     }
  //     interface ElementAttributesProperty { props; }
  // }
  // interface ClickableProps {
  //     children?: string;
  //     className?: string;
  // }
  // interface ButtonProps extends ClickableProps {
  //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
  // }
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
  // declare function MainButton(linkProps: LinkProps): JSX.Element;
  // declare function [|MainButton|](props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <MainButton />;
  // let opt = <MainButton children="chidlren" />;
  // let opt = <MainButton onClick={()=>{}} />;
  // let opt = <MainButton onClick={()=>{}} ignore-prop />;
  // let opt = <MainButton goTo="goTo" />;
  // let opt = <MainButton wrong />;
    // === ContextSpan ===
    // === /tests/cases/fourslash/file.tsx ===
    // declare module JSX {
    //     interface Element { }
    //     interface IntrinsicElements {
    //     }
    //     interface ElementAttributesProperty { props; }
    // }
    // interface ClickableProps {
    //     children?: string;
    //     className?: string;
    // }
    // interface ButtonProps extends ClickableProps {
    //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
    // }
    // interface LinkProps extends ClickableProps {
    //     goTo: string;
    // }
    // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
    // declare function MainButton(linkProps: LinkProps): JSX.Element;
    // [|declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;|]
    // let opt = <MainButton />;
    // let opt = <MainButton children="chidlren" />;
    // let opt = <MainButton onClick={()=>{}} />;
    // let opt = <MainButton onClick={()=>{}} ignore-prop />;
    // let opt = <MainButton goTo="goTo" />;
    // let opt = <MainButton wrong />;
// === 3 ===
  // === /tests/cases/fourslash/file.tsx ===
  // declare module JSX {
  //     interface Element { }
  //     interface IntrinsicElements {
  //     }
  //     interface ElementAttributesProperty { props; }
  // }
  // interface ClickableProps {
  //     children?: string;
  //     className?: string;
  // }
  // interface ButtonProps extends ClickableProps {
  //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
  // }
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
  // declare function MainButton(linkProps: LinkProps): JSX.Element;
  // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <[|MainButton|] />;
  // let opt = <MainButton children="chidlren" />;
  // let opt = <MainButton onClick={()=>{}} />;
  // let opt = <MainButton onClick={()=>{}} ignore-prop />;
  // let opt = <MainButton goTo="goTo" />;
  // let opt = <MainButton wrong />;
    // === ContextSpan ===
    // === /tests/cases/fourslash/file.tsx ===
    // declare module JSX {
    //     interface Element { }
    //     interface IntrinsicElements {
    //     }
    //     interface ElementAttributesProperty { props; }
    // }
    // interface ClickableProps {
    //     children?: string;
    //     className?: string;
    // }
    // interface ButtonProps extends ClickableProps {
    //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
    // }
    // interface LinkProps extends ClickableProps {
    //     goTo: string;
    // }
    // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
    // declare function MainButton(linkProps: LinkProps): JSX.Element;
    // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
    // let opt = [|<MainButton />|];
    // let opt = <MainButton children="chidlren" />;
    // let opt = <MainButton onClick={()=>{}} />;
    // let opt = <MainButton onClick={()=>{}} ignore-prop />;
    // let opt = <MainButton goTo="goTo" />;
    // let opt = <MainButton wrong />;
// === 4 ===
  // === /tests/cases/fourslash/file.tsx ===
  // declare module JSX {
  //     interface Element { }
  //     interface IntrinsicElements {
  //     }
  //     interface ElementAttributesProperty { props; }
  // }
  // interface ClickableProps {
  //     children?: string;
  //     className?: string;
  // }
  // interface ButtonProps extends ClickableProps {
  //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
  // }
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
  // declare function MainButton(linkProps: LinkProps): JSX.Element;
  // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <MainButton />;
  // let opt = <[|MainButton|] children="chidlren" />;
  // let opt = <MainButton onClick={()=>{}} />;
  // let opt = <MainButton onClick={()=>{}} ignore-prop />;
  // let opt = <MainButton goTo="goTo" />;
  // let opt = <MainButton wrong />;
    // === ContextSpan ===
    // === /tests/cases/fourslash/file.tsx ===
    // declare module JSX {
    //     interface Element { }
    //     interface IntrinsicElements {
    //     }
    //     interface ElementAttributesProperty { props; }
    // }
    // interface ClickableProps {
    //     children?: string;
    //     className?: string;
    // }
    // interface ButtonProps extends ClickableProps {
    //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
    // }
    // interface LinkProps extends ClickableProps {
    //     goTo: string;
    // }
    // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
    // declare function MainButton(linkProps: LinkProps): JSX.Element;
    // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
    // let opt = <MainButton />;
    // let opt = [|<MainButton children="chidlren" />|];
    // let opt = <MainButton onClick={()=>{}} />;
    // let opt = <MainButton onClick={()=>{}} ignore-prop />;
    // let opt = <MainButton goTo="goTo" />;
    // let opt = <MainButton wrong />;
// === 5 ===
  // === /tests/cases/fourslash/file.tsx ===
  // declare module JSX {
  //     interface Element { }
  //     interface IntrinsicElements {
  //     }
  //     interface ElementAttributesProperty { props; }
  // }
  // interface ClickableProps {
  //     children?: string;
  //     className?: string;
  // }
  // interface ButtonProps extends ClickableProps {
  //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
  // }
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
  // declare function MainButton(linkProps: LinkProps): JSX.Element;
  // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <MainButton />;
  // let opt = <MainButton children="chidlren" />;
  // let opt = <[|MainButton|] onClick={()=>{}} />;
  // let opt = <MainButton onClick={()=>{}} ignore-prop />;
  // let opt = <MainButton goTo="goTo" />;
  // let opt = <MainButton wrong />;
    // === ContextSpan ===
    // === /tests/cases/fourslash/file.tsx ===
    // declare module JSX {
    //     interface Element { }
    //     interface IntrinsicElements {
    //     }
    //     interface ElementAttributesProperty { props; }
    // }
    // interface ClickableProps {
    //     children?: string;
    //     className?: string;
    // }
    // interface ButtonProps extends ClickableProps {
    //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
    // }
    // interface LinkProps extends ClickableProps {
    //     goTo: string;
    // }
    // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
    // declare function MainButton(linkProps: LinkProps): JSX.Element;
    // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
    // let opt = <MainButton />;
    // let opt = <MainButton children="chidlren" />;
    // let opt = [|<MainButton onClick={()=>{}} />|];
    // let opt = <MainButton onClick={()=>{}} ignore-prop />;
    // let opt = <MainButton goTo="goTo" />;
    // let opt = <MainButton wrong />;
// === 6 ===
  // === /tests/cases/fourslash/file.tsx ===
  // declare module JSX {
  //     interface Element { }
  //     interface IntrinsicElements {
  //     }
  //     interface ElementAttributesProperty { props; }
  // }
  // interface ClickableProps {
  //     children?: string;
  //     className?: string;
  // }
  // interface ButtonProps extends ClickableProps {
  //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
  // }
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
  // declare function MainButton(linkProps: LinkProps): JSX.Element;
  // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <MainButton />;
  // let opt = <MainButton children="chidlren" />;
  // let opt = <MainButton onClick={()=>{}} />;
  // let opt = <[|MainButton|] onClick={()=>{}} ignore-prop />;
  // let opt = <MainButton goTo="goTo" />;
  // let opt = <MainButton wrong />;
    // === ContextSpan ===
    // === /tests/cases/fourslash/file.tsx ===
    // declare module JSX {
    //     interface Element { }
    //     interface IntrinsicElements {
    //     }
    //     interface ElementAttributesProperty { props; }
    // }
    // interface ClickableProps {
    //     children?: string;
    //     className?: string;
    // }
    // interface ButtonProps extends ClickableProps {
    //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
    // }
    // interface LinkProps extends ClickableProps {
    //     goTo: string;
    // }
    // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
    // declare function MainButton(linkProps: LinkProps): JSX.Element;
    // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
    // let opt = <MainButton />;
    // let opt = <MainButton children="chidlren" />;
    // let opt = <MainButton onClick={()=>{}} />;
    // let opt = [|<MainButton onClick={()=>{}} ignore-prop />|];
    // let opt = <MainButton goTo="goTo" />;
    // let opt = <MainButton wrong />;
// === 7 ===
  // === /tests/cases/fourslash/file.tsx ===
  // declare module JSX {
  //     interface Element { }
  //     interface IntrinsicElements {
  //     }
  //     interface ElementAttributesProperty { props; }
  // }
  // interface ClickableProps {
  //     children?: string;
  //     className?: string;
  // }
  // interface ButtonProps extends ClickableProps {
  //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
  // }
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
  // declare function MainButton(linkProps: LinkProps): JSX.Element;
  // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <MainButton />;
  // let opt = <MainButton children="chidlren" />;
  // let opt = <MainButton onClick={()=>{}} />;
  // let opt = <MainButton onClick={()=>{}} ignore-prop />;
  // let opt = <[|MainButton|] goTo="goTo" />;
  // let opt = <MainButton wrong />;
    // === ContextSpan ===
    // === /tests/cases/fourslash/file.tsx ===
    // declare module JSX {
    //     interface Element { }
    //     interface IntrinsicElements {
    //     }
    //     interface ElementAttributesProperty { props; }
    // }
    // interface ClickableProps {
    //     children?: string;
    //     className?: string;
    // }
    // interface ButtonProps extends ClickableProps {
    //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
    // }
    // interface LinkProps extends ClickableProps {
    //     goTo: string;
    // }
    // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
    // declare function MainButton(linkProps: LinkProps): JSX.Element;
    // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
    // let opt = <MainButton />;
    // let opt = <MainButton children="chidlren" />;
    // let opt = <MainButton onClick={()=>{}} />;
    // let opt = <MainButton onClick={()=>{}} ignore-prop />;
    // let opt = [|<MainButton goTo="goTo" />|];
    // let opt = <MainButton wrong />;
// === 8 ===
  // === /tests/cases/fourslash/file.tsx ===
  // declare module JSX {
  //     interface Element { }
  //     interface IntrinsicElements {
  //     }
  //     interface ElementAttributesProperty { props; }
  // }
  // interface ClickableProps {
  //     children?: string;
  //     className?: string;
  // }
  // interface ButtonProps extends ClickableProps {
  //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
  // }
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
  // declare function MainButton(linkProps: LinkProps): JSX.Element;
  // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <MainButton />;
  // let opt = <MainButton children="chidlren" />;
  // let opt = <MainButton onClick={()=>{}} />;
  // let opt = <MainButton onClick={()=>{}} ignore-prop />;
  // let opt = <MainButton goTo="goTo" />;
  // let opt = <[|MainButton|] wrong />;
    // === ContextSpan ===
    // === /tests/cases/fourslash/file.tsx ===
    // declare module JSX {
    //     interface Element { }
    //     interface IntrinsicElements {
    //     }
    //     interface ElementAttributesProperty { props; }
    // }
    // interface ClickableProps {
    //     children?: string;
    //     className?: string;
    // }
    // interface ButtonProps extends ClickableProps {
    //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
    // }
    // interface LinkProps extends ClickableProps {
    //     goTo: string;
    // }
    // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
    // declare function MainButton(linkProps: LinkProps): JSX.Element;
    // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
    // let opt = <MainButton />;
    // let opt = <MainButton children="chidlren" />;
    // let opt = <MainButton onClick={()=>{}} />;
    // let opt = <MainButton onClick={()=>{}} ignore-prop />;
    // let opt = <MainButton goTo="goTo" />;
    // let opt = [|<MainButton wrong />|];


[
  {
    "textSpan": {
      "start": 411,
      "length": 10
    },
    "fileName": "/tests/cases/fourslash/file.tsx",
    "contextSpan": {
      "start": 394,
      "length": 67
    }
  },
  {
    "textSpan": {
      "start": 479,
      "length": 10
    },
    "fileName": "/tests/cases/fourslash/file.tsx",
    "contextSpan": {
      "start": 462,
      "length": 63
    }
  },
  {
    "textSpan": {
      "start": 543,
      "length": 10
    },
    "fileName": "/tests/cases/fourslash/file.tsx",
    "contextSpan": {
      "start": 526,
      "length": 73
    }
  },
  {
    "textSpan": {
      "start": 611,
      "length": 10
    },
    "fileName": "/tests/cases/fourslash/file.tsx",
    "contextSpan": {
      "start": 610,
      "length": 14
    }
  },
  {
    "textSpan": {
      "start": 637,
      "length": 10
    },
    "fileName": "/tests/cases/fourslash/file.tsx",
    "contextSpan": {
      "start": 636,
      "length": 34
    }
  },
  {
    "textSpan": {
      "start": 683,
      "length": 10
    },
    "fileName": "/tests/cases/fourslash/file.tsx",
    "contextSpan": {
      "start": 682,
      "length": 31
    }
  },
  {
    "textSpan": {
      "start": 726,
      "length": 10
    },
    "fileName": "/tests/cases/fourslash/file.tsx",
    "contextSpan": {
      "start": 725,
      "length": 43
    }
  },
  {
    "textSpan": {
      "start": 781,
      "length": 10
    },
    "fileName": "/tests/cases/fourslash/file.tsx",
    "contextSpan": {
      "start": 780,
      "length": 26
    }
  },
  {
    "textSpan": {
      "start": 819,
      "length": 10
    },
    "fileName": "/tests/cases/fourslash/file.tsx",
    "contextSpan": {
      "start": 818,
      "length": 20
    }
  }
]

// === RenameOptions ===
{
 "findInStrings": false,
 "findInComments": false,
 "providePrefixAndSuffixTextForRename": true
}
// === /tests/cases/fourslash/file.tsx ===
// declare module JSX {
//     interface Element { }
//     interface IntrinsicElements {
//     }
//     interface ElementAttributesProperty { props; }
// }
// interface ClickableProps {
//     children?: string;
//     className?: string;
// }
// interface ButtonProps extends ClickableProps {
//     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
// }
// interface LinkProps extends ClickableProps {
//     goTo: string;
// }
// declare function RENAME(buttonProps: ButtonProps): JSX.Element;
// declare function RENAME(linkProps: LinkProps): JSX.Element;
// declare function RENAME(props: ButtonProps | LinkProps): JSX.Element;
// let opt = <RENAME />;
// let opt = <RENAME children="chidlren" />;
// let opt = <RENAME onClick={()=>{}} />;
// let opt = <RENAME onClick={()=>{}} ignore-prop />;
// let opt = <RENAME goTo="goTo" />;
// let opt = <[|RENAME|] wrong />;

// === 0 ===
  // === /tests/cases/fourslash/file.tsx ===
  // declare module JSX {
  //     interface Element { }
  //     interface IntrinsicElements {
  //     }
  //     interface ElementAttributesProperty { props; }
  // }
  // interface ClickableProps {
  //     children?: string;
  //     className?: string;
  // }
  // interface ButtonProps extends ClickableProps {
  //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
  // }
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // declare function [|MainButton|](buttonProps: ButtonProps): JSX.Element;
  // declare function MainButton(linkProps: LinkProps): JSX.Element;
  // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <MainButton />;
  // let opt = <MainButton children="chidlren" />;
  // let opt = <MainButton onClick={()=>{}} />;
  // let opt = <MainButton onClick={()=>{}} ignore-prop />;
  // let opt = <MainButton goTo="goTo" />;
  // let opt = <MainButton wrong />;
    // === ContextSpan ===
    // === /tests/cases/fourslash/file.tsx ===
    // declare module JSX {
    //     interface Element { }
    //     interface IntrinsicElements {
    //     }
    //     interface ElementAttributesProperty { props; }
    // }
    // interface ClickableProps {
    //     children?: string;
    //     className?: string;
    // }
    // interface ButtonProps extends ClickableProps {
    //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
    // }
    // interface LinkProps extends ClickableProps {
    //     goTo: string;
    // }
    // [|declare function MainButton(buttonProps: ButtonProps): JSX.Element;|]
    // declare function MainButton(linkProps: LinkProps): JSX.Element;
    // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
    // let opt = <MainButton />;
    // let opt = <MainButton children="chidlren" />;
    // let opt = <MainButton onClick={()=>{}} />;
    // let opt = <MainButton onClick={()=>{}} ignore-prop />;
    // let opt = <MainButton goTo="goTo" />;
    // let opt = <MainButton wrong />;
// === 1 ===
  // === /tests/cases/fourslash/file.tsx ===
  // declare module JSX {
  //     interface Element { }
  //     interface IntrinsicElements {
  //     }
  //     interface ElementAttributesProperty { props; }
  // }
  // interface ClickableProps {
  //     children?: string;
  //     className?: string;
  // }
  // interface ButtonProps extends ClickableProps {
  //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
  // }
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
  // declare function [|MainButton|](linkProps: LinkProps): JSX.Element;
  // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <MainButton />;
  // let opt = <MainButton children="chidlren" />;
  // let opt = <MainButton onClick={()=>{}} />;
  // let opt = <MainButton onClick={()=>{}} ignore-prop />;
  // let opt = <MainButton goTo="goTo" />;
  // let opt = <MainButton wrong />;
    // === ContextSpan ===
    // === /tests/cases/fourslash/file.tsx ===
    // declare module JSX {
    //     interface Element { }
    //     interface IntrinsicElements {
    //     }
    //     interface ElementAttributesProperty { props; }
    // }
    // interface ClickableProps {
    //     children?: string;
    //     className?: string;
    // }
    // interface ButtonProps extends ClickableProps {
    //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
    // }
    // interface LinkProps extends ClickableProps {
    //     goTo: string;
    // }
    // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
    // [|declare function MainButton(linkProps: LinkProps): JSX.Element;|]
    // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
    // let opt = <MainButton />;
    // let opt = <MainButton children="chidlren" />;
    // let opt = <MainButton onClick={()=>{}} />;
    // let opt = <MainButton onClick={()=>{}} ignore-prop />;
    // let opt = <MainButton goTo="goTo" />;
    // let opt = <MainButton wrong />;
// === 2 ===
  // === /tests/cases/fourslash/file.tsx ===
  // declare module JSX {
  //     interface Element { }
  //     interface IntrinsicElements {
  //     }
  //     interface ElementAttributesProperty { props; }
  // }
  // interface ClickableProps {
  //     children?: string;
  //     className?: string;
  // }
  // interface ButtonProps extends ClickableProps {
  //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
  // }
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
  // declare function MainButton(linkProps: LinkProps): JSX.Element;
  // declare function [|MainButton|](props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <MainButton />;
  // let opt = <MainButton children="chidlren" />;
  // let opt = <MainButton onClick={()=>{}} />;
  // let opt = <MainButton onClick={()=>{}} ignore-prop />;
  // let opt = <MainButton goTo="goTo" />;
  // let opt = <MainButton wrong />;
    // === ContextSpan ===
    // === /tests/cases/fourslash/file.tsx ===
    // declare module JSX {
    //     interface Element { }
    //     interface IntrinsicElements {
    //     }
    //     interface ElementAttributesProperty { props; }
    // }
    // interface ClickableProps {
    //     children?: string;
    //     className?: string;
    // }
    // interface ButtonProps extends ClickableProps {
    //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
    // }
    // interface LinkProps extends ClickableProps {
    //     goTo: string;
    // }
    // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
    // declare function MainButton(linkProps: LinkProps): JSX.Element;
    // [|declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;|]
    // let opt = <MainButton />;
    // let opt = <MainButton children="chidlren" />;
    // let opt = <MainButton onClick={()=>{}} />;
    // let opt = <MainButton onClick={()=>{}} ignore-prop />;
    // let opt = <MainButton goTo="goTo" />;
    // let opt = <MainButton wrong />;
// === 3 ===
  // === /tests/cases/fourslash/file.tsx ===
  // declare module JSX {
  //     interface Element { }
  //     interface IntrinsicElements {
  //     }
  //     interface ElementAttributesProperty { props; }
  // }
  // interface ClickableProps {
  //     children?: string;
  //     className?: string;
  // }
  // interface ButtonProps extends ClickableProps {
  //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
  // }
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
  // declare function MainButton(linkProps: LinkProps): JSX.Element;
  // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <[|MainButton|] />;
  // let opt = <MainButton children="chidlren" />;
  // let opt = <MainButton onClick={()=>{}} />;
  // let opt = <MainButton onClick={()=>{}} ignore-prop />;
  // let opt = <MainButton goTo="goTo" />;
  // let opt = <MainButton wrong />;
    // === ContextSpan ===
    // === /tests/cases/fourslash/file.tsx ===
    // declare module JSX {
    //     interface Element { }
    //     interface IntrinsicElements {
    //     }
    //     interface ElementAttributesProperty { props; }
    // }
    // interface ClickableProps {
    //     children?: string;
    //     className?: string;
    // }
    // interface ButtonProps extends ClickableProps {
    //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
    // }
    // interface LinkProps extends ClickableProps {
    //     goTo: string;
    // }
    // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
    // declare function MainButton(linkProps: LinkProps): JSX.Element;
    // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
    // let opt = [|<MainButton />|];
    // let opt = <MainButton children="chidlren" />;
    // let opt = <MainButton onClick={()=>{}} />;
    // let opt = <MainButton onClick={()=>{}} ignore-prop />;
    // let opt = <MainButton goTo="goTo" />;
    // let opt = <MainButton wrong />;
// === 4 ===
  // === /tests/cases/fourslash/file.tsx ===
  // declare module JSX {
  //     interface Element { }
  //     interface IntrinsicElements {
  //     }
  //     interface ElementAttributesProperty { props; }
  // }
  // interface ClickableProps {
  //     children?: string;
  //     className?: string;
  // }
  // interface ButtonProps extends ClickableProps {
  //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
  // }
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
  // declare function MainButton(linkProps: LinkProps): JSX.Element;
  // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <MainButton />;
  // let opt = <[|MainButton|] children="chidlren" />;
  // let opt = <MainButton onClick={()=>{}} />;
  // let opt = <MainButton onClick={()=>{}} ignore-prop />;
  // let opt = <MainButton goTo="goTo" />;
  // let opt = <MainButton wrong />;
    // === ContextSpan ===
    // === /tests/cases/fourslash/file.tsx ===
    // declare module JSX {
    //     interface Element { }
    //     interface IntrinsicElements {
    //     }
    //     interface ElementAttributesProperty { props; }
    // }
    // interface ClickableProps {
    //     children?: string;
    //     className?: string;
    // }
    // interface ButtonProps extends ClickableProps {
    //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
    // }
    // interface LinkProps extends ClickableProps {
    //     goTo: string;
    // }
    // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
    // declare function MainButton(linkProps: LinkProps): JSX.Element;
    // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
    // let opt = <MainButton />;
    // let opt = [|<MainButton children="chidlren" />|];
    // let opt = <MainButton onClick={()=>{}} />;
    // let opt = <MainButton onClick={()=>{}} ignore-prop />;
    // let opt = <MainButton goTo="goTo" />;
    // let opt = <MainButton wrong />;
// === 5 ===
  // === /tests/cases/fourslash/file.tsx ===
  // declare module JSX {
  //     interface Element { }
  //     interface IntrinsicElements {
  //     }
  //     interface ElementAttributesProperty { props; }
  // }
  // interface ClickableProps {
  //     children?: string;
  //     className?: string;
  // }
  // interface ButtonProps extends ClickableProps {
  //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
  // }
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
  // declare function MainButton(linkProps: LinkProps): JSX.Element;
  // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <MainButton />;
  // let opt = <MainButton children="chidlren" />;
  // let opt = <[|MainButton|] onClick={()=>{}} />;
  // let opt = <MainButton onClick={()=>{}} ignore-prop />;
  // let opt = <MainButton goTo="goTo" />;
  // let opt = <MainButton wrong />;
    // === ContextSpan ===
    // === /tests/cases/fourslash/file.tsx ===
    // declare module JSX {
    //     interface Element { }
    //     interface IntrinsicElements {
    //     }
    //     interface ElementAttributesProperty { props; }
    // }
    // interface ClickableProps {
    //     children?: string;
    //     className?: string;
    // }
    // interface ButtonProps extends ClickableProps {
    //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
    // }
    // interface LinkProps extends ClickableProps {
    //     goTo: string;
    // }
    // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
    // declare function MainButton(linkProps: LinkProps): JSX.Element;
    // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
    // let opt = <MainButton />;
    // let opt = <MainButton children="chidlren" />;
    // let opt = [|<MainButton onClick={()=>{}} />|];
    // let opt = <MainButton onClick={()=>{}} ignore-prop />;
    // let opt = <MainButton goTo="goTo" />;
    // let opt = <MainButton wrong />;
// === 6 ===
  // === /tests/cases/fourslash/file.tsx ===
  // declare module JSX {
  //     interface Element { }
  //     interface IntrinsicElements {
  //     }
  //     interface ElementAttributesProperty { props; }
  // }
  // interface ClickableProps {
  //     children?: string;
  //     className?: string;
  // }
  // interface ButtonProps extends ClickableProps {
  //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
  // }
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
  // declare function MainButton(linkProps: LinkProps): JSX.Element;
  // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <MainButton />;
  // let opt = <MainButton children="chidlren" />;
  // let opt = <MainButton onClick={()=>{}} />;
  // let opt = <[|MainButton|] onClick={()=>{}} ignore-prop />;
  // let opt = <MainButton goTo="goTo" />;
  // let opt = <MainButton wrong />;
    // === ContextSpan ===
    // === /tests/cases/fourslash/file.tsx ===
    // declare module JSX {
    //     interface Element { }
    //     interface IntrinsicElements {
    //     }
    //     interface ElementAttributesProperty { props; }
    // }
    // interface ClickableProps {
    //     children?: string;
    //     className?: string;
    // }
    // interface ButtonProps extends ClickableProps {
    //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
    // }
    // interface LinkProps extends ClickableProps {
    //     goTo: string;
    // }
    // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
    // declare function MainButton(linkProps: LinkProps): JSX.Element;
    // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
    // let opt = <MainButton />;
    // let opt = <MainButton children="chidlren" />;
    // let opt = <MainButton onClick={()=>{}} />;
    // let opt = [|<MainButton onClick={()=>{}} ignore-prop />|];
    // let opt = <MainButton goTo="goTo" />;
    // let opt = <MainButton wrong />;
// === 7 ===
  // === /tests/cases/fourslash/file.tsx ===
  // declare module JSX {
  //     interface Element { }
  //     interface IntrinsicElements {
  //     }
  //     interface ElementAttributesProperty { props; }
  // }
  // interface ClickableProps {
  //     children?: string;
  //     className?: string;
  // }
  // interface ButtonProps extends ClickableProps {
  //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
  // }
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
  // declare function MainButton(linkProps: LinkProps): JSX.Element;
  // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <MainButton />;
  // let opt = <MainButton children="chidlren" />;
  // let opt = <MainButton onClick={()=>{}} />;
  // let opt = <MainButton onClick={()=>{}} ignore-prop />;
  // let opt = <[|MainButton|] goTo="goTo" />;
  // let opt = <MainButton wrong />;
    // === ContextSpan ===
    // === /tests/cases/fourslash/file.tsx ===
    // declare module JSX {
    //     interface Element { }
    //     interface IntrinsicElements {
    //     }
    //     interface ElementAttributesProperty { props; }
    // }
    // interface ClickableProps {
    //     children?: string;
    //     className?: string;
    // }
    // interface ButtonProps extends ClickableProps {
    //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
    // }
    // interface LinkProps extends ClickableProps {
    //     goTo: string;
    // }
    // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
    // declare function MainButton(linkProps: LinkProps): JSX.Element;
    // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
    // let opt = <MainButton />;
    // let opt = <MainButton children="chidlren" />;
    // let opt = <MainButton onClick={()=>{}} />;
    // let opt = <MainButton onClick={()=>{}} ignore-prop />;
    // let opt = [|<MainButton goTo="goTo" />|];
    // let opt = <MainButton wrong />;
// === 8 ===
  // === /tests/cases/fourslash/file.tsx ===
  // declare module JSX {
  //     interface Element { }
  //     interface IntrinsicElements {
  //     }
  //     interface ElementAttributesProperty { props; }
  // }
  // interface ClickableProps {
  //     children?: string;
  //     className?: string;
  // }
  // interface ButtonProps extends ClickableProps {
  //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
  // }
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
  // declare function MainButton(linkProps: LinkProps): JSX.Element;
  // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <MainButton />;
  // let opt = <MainButton children="chidlren" />;
  // let opt = <MainButton onClick={()=>{}} />;
  // let opt = <MainButton onClick={()=>{}} ignore-prop />;
  // let opt = <MainButton goTo="goTo" />;
  // let opt = <[|MainButton|] wrong />;
    // === ContextSpan ===
    // === /tests/cases/fourslash/file.tsx ===
    // declare module JSX {
    //     interface Element { }
    //     interface IntrinsicElements {
    //     }
    //     interface ElementAttributesProperty { props; }
    // }
    // interface ClickableProps {
    //     children?: string;
    //     className?: string;
    // }
    // interface ButtonProps extends ClickableProps {
    //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
    // }
    // interface LinkProps extends ClickableProps {
    //     goTo: string;
    // }
    // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
    // declare function MainButton(linkProps: LinkProps): JSX.Element;
    // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
    // let opt = <MainButton />;
    // let opt = <MainButton children="chidlren" />;
    // let opt = <MainButton onClick={()=>{}} />;
    // let opt = <MainButton onClick={()=>{}} ignore-prop />;
    // let opt = <MainButton goTo="goTo" />;
    // let opt = [|<MainButton wrong />|];


[
  {
    "textSpan": {
      "start": 411,
      "length": 10
    },
    "fileName": "/tests/cases/fourslash/file.tsx",
    "contextSpan": {
      "start": 394,
      "length": 67
    }
  },
  {
    "textSpan": {
      "start": 479,
      "length": 10
    },
    "fileName": "/tests/cases/fourslash/file.tsx",
    "contextSpan": {
      "start": 462,
      "length": 63
    }
  },
  {
    "textSpan": {
      "start": 543,
      "length": 10
    },
    "fileName": "/tests/cases/fourslash/file.tsx",
    "contextSpan": {
      "start": 526,
      "length": 73
    }
  },
  {
    "textSpan": {
      "start": 611,
      "length": 10
    },
    "fileName": "/tests/cases/fourslash/file.tsx",
    "contextSpan": {
      "start": 610,
      "length": 14
    }
  },
  {
    "textSpan": {
      "start": 637,
      "length": 10
    },
    "fileName": "/tests/cases/fourslash/file.tsx",
    "contextSpan": {
      "start": 636,
      "length": 34
    }
  },
  {
    "textSpan": {
      "start": 683,
      "length": 10
    },
    "fileName": "/tests/cases/fourslash/file.tsx",
    "contextSpan": {
      "start": 682,
      "length": 31
    }
  },
  {
    "textSpan": {
      "start": 726,
      "length": 10
    },
    "fileName": "/tests/cases/fourslash/file.tsx",
    "contextSpan": {
      "start": 725,
      "length": 43
    }
  },
  {
    "textSpan": {
      "start": 781,
      "length": 10
    },
    "fileName": "/tests/cases/fourslash/file.tsx",
    "contextSpan": {
      "start": 780,
      "length": 26
    }
  },
  {
    "textSpan": {
      "start": 819,
      "length": 10
    },
    "fileName": "/tests/cases/fourslash/file.tsx",
    "contextSpan": {
      "start": 818,
      "length": 20
    }
  }
]

// === RenameOptions ===
{
 "findInStrings": false,
 "findInComments": false,
 "providePrefixAndSuffixTextForRename": true
}
// === /tests/cases/fourslash/file.tsx ===
// declare module JSX {
//     interface Element { }
//     interface IntrinsicElements {
//     }
//     interface ElementAttributesProperty { props; }
// }
// interface ClickableProps {
//     children?: string;
//     className?: string;
// }
// interface ButtonProps extends ClickableProps {
//     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
// }
// interface LinkProps extends ClickableProps {
//     goTo: string;
// }
// declare function MainButton(buttonProps: ButtonProps): JSX.Element;
// declare function MainButton(linkProps: LinkProps): JSX.Element;
// declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
// let opt = <MainButton />;
// let opt = <MainButton children="chidlren" />;
// let opt = <MainButton onClick={()=>{}} />;
// let opt = <MainButton onClick={()=>{}} [|RENAME|] />;
// let opt = <MainButton goTo="goTo" />;
// let opt = <MainButton wrong />;

// === 0 ===
  // === /tests/cases/fourslash/file.tsx ===
  // declare module JSX {
  //     interface Element { }
  //     interface IntrinsicElements {
  //     }
  //     interface ElementAttributesProperty { props; }
  // }
  // interface ClickableProps {
  //     children?: string;
  //     className?: string;
  // }
  // interface ButtonProps extends ClickableProps {
  //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
  // }
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
  // declare function MainButton(linkProps: LinkProps): JSX.Element;
  // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <MainButton />;
  // let opt = <MainButton children="chidlren" />;
  // let opt = <MainButton onClick={()=>{}} />;
  // let opt = <MainButton onClick={()=>{}} [|ignore-prop|] />;
  // let opt = <MainButton goTo="goTo" />;
  // let opt = <MainButton wrong />;


[
  {
    "textSpan": {
      "start": 754,
      "length": 11
    },
    "fileName": "/tests/cases/fourslash/file.tsx"
  }
]

// === RenameOptions ===
{
 "findInStrings": false,
 "findInComments": false,
 "providePrefixAndSuffixTextForRename": true
}
// === /tests/cases/fourslash/file.tsx ===
// declare module JSX {
//     interface Element { }
//     interface IntrinsicElements {
//     }
//     interface ElementAttributesProperty { props; }
// }
// interface ClickableProps {
//     children?: string;
//     className?: string;
// }
// interface ButtonProps extends ClickableProps {
//     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
// }
// interface LinkProps extends ClickableProps {
//     goTo: string;
// }
// declare function MainButton(buttonProps: ButtonProps): JSX.Element;
// declare function MainButton(linkProps: LinkProps): JSX.Element;
// declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
// let opt = <MainButton />;
// let opt = <MainButton children="chidlren" />;
// let opt = <MainButton onClick={()=>{}} />;
// let opt = <MainButton onClick={()=>{}} ignore-prop />;
// let opt = <MainButton goTo="goTo" />;
// let opt = <MainButton [|RENAME|] />;

// === 0 ===
  // === /tests/cases/fourslash/file.tsx ===
  // declare module JSX {
  //     interface Element { }
  //     interface IntrinsicElements {
  //     }
  //     interface ElementAttributesProperty { props; }
  // }
  // interface ClickableProps {
  //     children?: string;
  //     className?: string;
  // }
  // interface ButtonProps extends ClickableProps {
  //     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
  // }
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // declare function MainButton(buttonProps: ButtonProps): JSX.Element;
  // declare function MainButton(linkProps: LinkProps): JSX.Element;
  // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <MainButton />;
  // let opt = <MainButton children="chidlren" />;
  // let opt = <MainButton onClick={()=>{}} />;
  // let opt = <MainButton onClick={()=>{}} ignore-prop />;
  // let opt = <MainButton goTo="goTo" />;
  // let opt = <MainButton [|wrong|] />;


[
  {
    "textSpan": {
      "start": 830,
      "length": 5
    },
    "fileName": "/tests/cases/fourslash/file.tsx"
  }
]