// === /tests/cases/fourslash/file1.ts ===
// class Foo {
//     // This is not valid syntax: parameter property can't be binding pattern
//     constructor(private [/*HIGHLIGHTS*/[|privateParam|]]: number,
//         public [publicParam]: string,
//         protected [protectedParam]: boolean) {
// 
//         let localPrivate = [|privateParam|];
//         this.privateParam += 10;
// 
//         let localPublic = publicParam;
//         this.publicParam += " Hello!";
// 
//         let localProtected = protectedParam;
//         this.protectedParam = false;
//     }
// }

// === 0 ===
  // === /tests/cases/fourslash/file1.ts ===
    // === 0 ===
      // === /tests/cases/fourslash/file1.ts ===
      // class Foo {
      //     // This is not valid syntax: parameter property can't be binding pattern
      //     constructor(private [[|privateParam|]]: number,
      //         public [publicParam]: string,
      //         protected [protectedParam]: boolean) {
      // 
      //         let localPrivate = privateParam;
      //         this.privateParam += 10;
      // 
      //         let localPublic = publicParam;
      //         this.publicParam += " Hello!";
      // 
      //         let localProtected = protectedParam;
      //         this.protectedParam = false;
      //     }
      // }
        // === ContextSpan ===
        // === /tests/cases/fourslash/file1.ts ===
        // class Foo {
        //     // This is not valid syntax: parameter property can't be binding pattern
        //     constructor([|private [privateParam]: number|],
        //         public [publicParam]: string,
        //         protected [protectedParam]: boolean) {
        // 
        //         let localPrivate = privateParam;
        //         this.privateParam += 10;
        // 
        //         let localPublic = publicParam;
        //         this.publicParam += " Hello!";
        // 
        //         let localProtected = protectedParam;
        //         this.protectedParam = false;
        //     }
        // }
    // === 1 ===
      // === /tests/cases/fourslash/file1.ts ===
      // class Foo {
      //     // This is not valid syntax: parameter property can't be binding pattern
      //     constructor(private [privateParam]: number,
      //         public [publicParam]: string,
      //         protected [protectedParam]: boolean) {
      // 
      //         let localPrivate = [|privateParam|];
      //         this.privateParam += 10;
      // 
      //         let localPublic = publicParam;
      //         this.publicParam += " Hello!";
      // 
      //         let localProtected = protectedParam;
      //         this.protectedParam = false;
      //     }
      // }


[
  {
    "fileName": "/tests/cases/fourslash/file1.ts",
    "highlightSpans": [
      {
        "textSpan": {
          "start": 114,
          "length": 12
        },
        "kind": "writtenReference",
        "contextSpan": {
          "start": 105,
          "length": 30
        }
      },
      {
        "textSpan": {
          "start": 250,
          "length": 12
        },
        "kind": "reference"
      }
    ]
  }
]

// === /tests/cases/fourslash/file1.ts ===
// class Foo {
//     // This is not valid syntax: parameter property can't be binding pattern
//     constructor(private [privateParam]: number,
//         public [/*HIGHLIGHTS*/[|publicParam|]]: string,
//         protected [protectedParam]: boolean) {
// 
//         let localPrivate = privateParam;
//         this.privateParam += 10;
// 
//         let localPublic = [|publicParam|];
//         this.publicParam += " Hello!";
// 
//         let localProtected = protectedParam;
//         this.protectedParam = false;
//     }
// }

// === 0 ===
  // === /tests/cases/fourslash/file1.ts ===
    // === 0 ===
      // === /tests/cases/fourslash/file1.ts ===
      // class Foo {
      //     // This is not valid syntax: parameter property can't be binding pattern
      //     constructor(private [privateParam]: number,
      //         public [[|publicParam|]]: string,
      //         protected [protectedParam]: boolean) {
      // 
      //         let localPrivate = privateParam;
      //         this.privateParam += 10;
      // 
      //         let localPublic = publicParam;
      //         this.publicParam += " Hello!";
      // 
      //         let localProtected = protectedParam;
      //         this.protectedParam = false;
      //     }
      // }
        // === ContextSpan ===
        // === /tests/cases/fourslash/file1.ts ===
        // class Foo {
        //     // This is not valid syntax: parameter property can't be binding pattern
        //     constructor(private [privateParam]: number,
        //         [|public [publicParam]: string|],
        //         protected [protectedParam]: boolean) {
        // 
        //         let localPrivate = privateParam;
        //         this.privateParam += 10;
        // 
        //         let localPublic = publicParam;
        //         this.publicParam += " Hello!";
        // 
        //         let localProtected = protectedParam;
        //         this.protectedParam = false;
        //     }
        // }
    // === 1 ===
      // === /tests/cases/fourslash/file1.ts ===
      // class Foo {
      //     // This is not valid syntax: parameter property can't be binding pattern
      //     constructor(private [privateParam]: number,
      //         public [publicParam]: string,
      //         protected [protectedParam]: boolean) {
      // 
      //         let localPrivate = privateParam;
      //         this.privateParam += 10;
      // 
      //         let localPublic = [|publicParam|];
      //         this.publicParam += " Hello!";
      // 
      //         let localProtected = protectedParam;
      //         this.protectedParam = false;
      //     }
      // }


[
  {
    "fileName": "/tests/cases/fourslash/file1.ts",
    "highlightSpans": [
      {
        "textSpan": {
          "start": 153,
          "length": 11
        },
        "kind": "writtenReference",
        "contextSpan": {
          "start": 145,
          "length": 28
        }
      },
      {
        "textSpan": {
          "start": 324,
          "length": 11
        },
        "kind": "reference"
      }
    ]
  }
]

// === /tests/cases/fourslash/file1.ts ===
// class Foo {
//     // This is not valid syntax: parameter property can't be binding pattern
//     constructor(private [privateParam]: number,
//         public [publicParam]: string,
//         protected [/*HIGHLIGHTS*/[|protectedParam|]]: boolean) {
// 
//         let localPrivate = privateParam;
//         this.privateParam += 10;
// 
//         let localPublic = publicParam;
//         this.publicParam += " Hello!";
// 
//         let localProtected = [|protectedParam|];
//         this.protectedParam = false;
//     }
// }

// === 0 ===
  // === /tests/cases/fourslash/file1.ts ===
    // === 0 ===
      // === /tests/cases/fourslash/file1.ts ===
      // class Foo {
      //     // This is not valid syntax: parameter property can't be binding pattern
      //     constructor(private [privateParam]: number,
      //         public [publicParam]: string,
      //         protected [[|protectedParam|]]: boolean) {
      // 
      //         let localPrivate = privateParam;
      //         this.privateParam += 10;
      // 
      //         let localPublic = publicParam;
      //         this.publicParam += " Hello!";
      // 
      //         let localProtected = protectedParam;
      //         this.protectedParam = false;
      //     }
      // }
        // === ContextSpan ===
        // === /tests/cases/fourslash/file1.ts ===
        // class Foo {
        //     // This is not valid syntax: parameter property can't be binding pattern
        //     constructor(private [privateParam]: number,
        //         public [publicParam]: string,
        //         [|protected [protectedParam]: boolean|]) {
        // 
        //         let localPrivate = privateParam;
        //         this.privateParam += 10;
        // 
        //         let localPublic = publicParam;
        //         this.publicParam += " Hello!";
        // 
        //         let localProtected = protectedParam;
        //         this.protectedParam = false;
        //     }
        // }
    // === 1 ===
      // === /tests/cases/fourslash/file1.ts ===
      // class Foo {
      //     // This is not valid syntax: parameter property can't be binding pattern
      //     constructor(private [privateParam]: number,
      //         public [publicParam]: string,
      //         protected [protectedParam]: boolean) {
      // 
      //         let localPrivate = privateParam;
      //         this.privateParam += 10;
      // 
      //         let localPublic = publicParam;
      //         this.publicParam += " Hello!";
      // 
      //         let localProtected = [|protectedParam|];
      //         this.protectedParam = false;
      //     }
      // }


[
  {
    "fileName": "/tests/cases/fourslash/file1.ts",
    "highlightSpans": [
      {
        "textSpan": {
          "start": 194,
          "length": 14
        },
        "kind": "writtenReference",
        "contextSpan": {
          "start": 183,
          "length": 35
        }
      },
      {
        "textSpan": {
          "start": 406,
          "length": 14
        },
        "kind": "reference"
      }
    ]
  }
]

// === /tests/cases/fourslash/file1.ts ===
// class Foo {
//     // This is not valid syntax: parameter property can't be binding pattern
//     constructor(private [[|privateParam|]]: number,
//         public [publicParam]: string,
//         protected [protectedParam]: boolean) {
// 
//         let localPrivate = /*HIGHLIGHTS*/[|privateParam|];
//         this.privateParam += 10;
// 
//         let localPublic = publicParam;
//         this.publicParam += " Hello!";
// 
//         let localProtected = protectedParam;
//         this.protectedParam = false;
//     }
// }

// === 0 ===
  // === /tests/cases/fourslash/file1.ts ===
    // === 0 ===
      // === /tests/cases/fourslash/file1.ts ===
      // class Foo {
      //     // This is not valid syntax: parameter property can't be binding pattern
      //     constructor(private [[|privateParam|]]: number,
      //         public [publicParam]: string,
      //         protected [protectedParam]: boolean) {
      // 
      //         let localPrivate = privateParam;
      //         this.privateParam += 10;
      // 
      //         let localPublic = publicParam;
      //         this.publicParam += " Hello!";
      // 
      //         let localProtected = protectedParam;
      //         this.protectedParam = false;
      //     }
      // }
        // === ContextSpan ===
        // === /tests/cases/fourslash/file1.ts ===
        // class Foo {
        //     // This is not valid syntax: parameter property can't be binding pattern
        //     constructor([|private [privateParam]: number|],
        //         public [publicParam]: string,
        //         protected [protectedParam]: boolean) {
        // 
        //         let localPrivate = privateParam;
        //         this.privateParam += 10;
        // 
        //         let localPublic = publicParam;
        //         this.publicParam += " Hello!";
        // 
        //         let localProtected = protectedParam;
        //         this.protectedParam = false;
        //     }
        // }
    // === 1 ===
      // === /tests/cases/fourslash/file1.ts ===
      // class Foo {
      //     // This is not valid syntax: parameter property can't be binding pattern
      //     constructor(private [privateParam]: number,
      //         public [publicParam]: string,
      //         protected [protectedParam]: boolean) {
      // 
      //         let localPrivate = [|privateParam|];
      //         this.privateParam += 10;
      // 
      //         let localPublic = publicParam;
      //         this.publicParam += " Hello!";
      // 
      //         let localProtected = protectedParam;
      //         this.protectedParam = false;
      //     }
      // }


[
  {
    "fileName": "/tests/cases/fourslash/file1.ts",
    "highlightSpans": [
      {
        "textSpan": {
          "start": 114,
          "length": 12
        },
        "kind": "writtenReference",
        "contextSpan": {
          "start": 105,
          "length": 30
        }
      },
      {
        "textSpan": {
          "start": 250,
          "length": 12
        },
        "kind": "reference"
      }
    ]
  }
]

// === /tests/cases/fourslash/file1.ts ===
// class Foo {
//     // This is not valid syntax: parameter property can't be binding pattern
//     constructor(private [privateParam]: number,
//         public [[|publicParam|]]: string,
//         protected [protectedParam]: boolean) {
// 
//         let localPrivate = privateParam;
//         this.privateParam += 10;
// 
//         let localPublic = /*HIGHLIGHTS*/[|publicParam|];
//         this.publicParam += " Hello!";
// 
//         let localProtected = protectedParam;
//         this.protectedParam = false;
//     }
// }

// === 0 ===
  // === /tests/cases/fourslash/file1.ts ===
    // === 0 ===
      // === /tests/cases/fourslash/file1.ts ===
      // class Foo {
      //     // This is not valid syntax: parameter property can't be binding pattern
      //     constructor(private [privateParam]: number,
      //         public [[|publicParam|]]: string,
      //         protected [protectedParam]: boolean) {
      // 
      //         let localPrivate = privateParam;
      //         this.privateParam += 10;
      // 
      //         let localPublic = publicParam;
      //         this.publicParam += " Hello!";
      // 
      //         let localProtected = protectedParam;
      //         this.protectedParam = false;
      //     }
      // }
        // === ContextSpan ===
        // === /tests/cases/fourslash/file1.ts ===
        // class Foo {
        //     // This is not valid syntax: parameter property can't be binding pattern
        //     constructor(private [privateParam]: number,
        //         [|public [publicParam]: string|],
        //         protected [protectedParam]: boolean) {
        // 
        //         let localPrivate = privateParam;
        //         this.privateParam += 10;
        // 
        //         let localPublic = publicParam;
        //         this.publicParam += " Hello!";
        // 
        //         let localProtected = protectedParam;
        //         this.protectedParam = false;
        //     }
        // }
    // === 1 ===
      // === /tests/cases/fourslash/file1.ts ===
      // class Foo {
      //     // This is not valid syntax: parameter property can't be binding pattern
      //     constructor(private [privateParam]: number,
      //         public [publicParam]: string,
      //         protected [protectedParam]: boolean) {
      // 
      //         let localPrivate = privateParam;
      //         this.privateParam += 10;
      // 
      //         let localPublic = [|publicParam|];
      //         this.publicParam += " Hello!";
      // 
      //         let localProtected = protectedParam;
      //         this.protectedParam = false;
      //     }
      // }


[
  {
    "fileName": "/tests/cases/fourslash/file1.ts",
    "highlightSpans": [
      {
        "textSpan": {
          "start": 153,
          "length": 11
        },
        "kind": "writtenReference",
        "contextSpan": {
          "start": 145,
          "length": 28
        }
      },
      {
        "textSpan": {
          "start": 324,
          "length": 11
        },
        "kind": "reference"
      }
    ]
  }
]

// === /tests/cases/fourslash/file1.ts ===
// class Foo {
//     // This is not valid syntax: parameter property can't be binding pattern
//     constructor(private [privateParam]: number,
//         public [publicParam]: string,
//         protected [[|protectedParam|]]: boolean) {
// 
//         let localPrivate = privateParam;
//         this.privateParam += 10;
// 
//         let localPublic = publicParam;
//         this.publicParam += " Hello!";
// 
//         let localProtected = /*HIGHLIGHTS*/[|protectedParam|];
//         this.protectedParam = false;
//     }
// }

// === 0 ===
  // === /tests/cases/fourslash/file1.ts ===
    // === 0 ===
      // === /tests/cases/fourslash/file1.ts ===
      // class Foo {
      //     // This is not valid syntax: parameter property can't be binding pattern
      //     constructor(private [privateParam]: number,
      //         public [publicParam]: string,
      //         protected [[|protectedParam|]]: boolean) {
      // 
      //         let localPrivate = privateParam;
      //         this.privateParam += 10;
      // 
      //         let localPublic = publicParam;
      //         this.publicParam += " Hello!";
      // 
      //         let localProtected = protectedParam;
      //         this.protectedParam = false;
      //     }
      // }
        // === ContextSpan ===
        // === /tests/cases/fourslash/file1.ts ===
        // class Foo {
        //     // This is not valid syntax: parameter property can't be binding pattern
        //     constructor(private [privateParam]: number,
        //         public [publicParam]: string,
        //         [|protected [protectedParam]: boolean|]) {
        // 
        //         let localPrivate = privateParam;
        //         this.privateParam += 10;
        // 
        //         let localPublic = publicParam;
        //         this.publicParam += " Hello!";
        // 
        //         let localProtected = protectedParam;
        //         this.protectedParam = false;
        //     }
        // }
    // === 1 ===
      // === /tests/cases/fourslash/file1.ts ===
      // class Foo {
      //     // This is not valid syntax: parameter property can't be binding pattern
      //     constructor(private [privateParam]: number,
      //         public [publicParam]: string,
      //         protected [protectedParam]: boolean) {
      // 
      //         let localPrivate = privateParam;
      //         this.privateParam += 10;
      // 
      //         let localPublic = publicParam;
      //         this.publicParam += " Hello!";
      // 
      //         let localProtected = [|protectedParam|];
      //         this.protectedParam = false;
      //     }
      // }


[
  {
    "fileName": "/tests/cases/fourslash/file1.ts",
    "highlightSpans": [
      {
        "textSpan": {
          "start": 194,
          "length": 14
        },
        "kind": "writtenReference",
        "contextSpan": {
          "start": 183,
          "length": 35
        }
      },
      {
        "textSpan": {
          "start": 406,
          "length": 14
        },
        "kind": "reference"
      }
    ]
  }
]