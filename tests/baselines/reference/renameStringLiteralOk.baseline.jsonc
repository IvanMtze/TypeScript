=== RenameOptions ===
{
 "findInStrings": false,
 "findInComments": false,
 "providePrefixAndSuffixTextForRename": true
}
/*====== /tests/cases/fourslash/renameStringLiteralOk.ts ======*/

interface Foo {
    f: '[|RENAME|]' | 'bar'
}
const d: 'foo' = 'foo'
declare const f: Foo
f.f = 'RENAME'
f.f = `RENAME`

=== 0 ===
// === /tests/cases/fourslash/renameStringLiteralOk.ts ===
// interface Foo {
//     f: '[|foo|]' | 'bar'
// }
// const d: 'foo' = 'foo'
// declare const f: Foo
// f.f = 'foo'
// f.f = `foo`
=== 1 ===
// === /tests/cases/fourslash/renameStringLiteralOk.ts ===
// interface Foo {
//     f: 'foo' | 'bar'
// }
// const d: 'foo' = 'foo'
// declare const f: Foo
// f.f = '[|foo|]'
// f.f = `foo`
=== 2 ===
// === /tests/cases/fourslash/renameStringLiteralOk.ts ===
// interface Foo {
//     f: 'foo' | 'bar'
// }
// const d: 'foo' = 'foo'
// declare const f: Foo
// f.f = 'foo'
// f.f = `[|foo|]`


[
  {
    "textSpan": {
      "start": 24,
      "length": 3
    },
    "fileName": "/tests/cases/fourslash/renameStringLiteralOk.ts"
  },
  {
    "textSpan": {
      "start": 90,
      "length": 3
    },
    "fileName": "/tests/cases/fourslash/renameStringLiteralOk.ts"
  },
  {
    "textSpan": {
      "start": 102,
      "length": 3
    },
    "fileName": "/tests/cases/fourslash/renameStringLiteralOk.ts"
  }
]

=== RenameOptions ===
{
 "findInStrings": false,
 "findInComments": false,
 "providePrefixAndSuffixTextForRename": true
}
/*====== /tests/cases/fourslash/renameStringLiteralOk.ts ======*/

interface Foo {
    f: 'RENAME' | 'bar'
}
const d: 'foo' = 'foo'
declare const f: Foo
f.f = '[|RENAME|]'
f.f = `RENAME`

=== 0 ===
// === /tests/cases/fourslash/renameStringLiteralOk.ts ===
// interface Foo {
//     f: '[|foo|]' | 'bar'
// }
// const d: 'foo' = 'foo'
// declare const f: Foo
// f.f = 'foo'
// f.f = `foo`
=== 1 ===
// === /tests/cases/fourslash/renameStringLiteralOk.ts ===
// interface Foo {
//     f: 'foo' | 'bar'
// }
// const d: 'foo' = 'foo'
// declare const f: Foo
// f.f = '[|foo|]'
// f.f = `foo`
=== 2 ===
// === /tests/cases/fourslash/renameStringLiteralOk.ts ===
// interface Foo {
//     f: 'foo' | 'bar'
// }
// const d: 'foo' = 'foo'
// declare const f: Foo
// f.f = 'foo'
// f.f = `[|foo|]`


[
  {
    "textSpan": {
      "start": 24,
      "length": 3
    },
    "fileName": "/tests/cases/fourslash/renameStringLiteralOk.ts"
  },
  {
    "textSpan": {
      "start": 90,
      "length": 3
    },
    "fileName": "/tests/cases/fourslash/renameStringLiteralOk.ts"
  },
  {
    "textSpan": {
      "start": 102,
      "length": 3
    },
    "fileName": "/tests/cases/fourslash/renameStringLiteralOk.ts"
  }
]

=== RenameOptions ===
{
 "findInStrings": false,
 "findInComments": false,
 "providePrefixAndSuffixTextForRename": true
}
/*====== /tests/cases/fourslash/renameStringLiteralOk.ts ======*/

interface Foo {
    f: 'RENAME' | 'bar'
}
const d: 'foo' = 'foo'
declare const f: Foo
f.f = 'RENAME'
f.f = `[|RENAME|]`

=== 0 ===
// === /tests/cases/fourslash/renameStringLiteralOk.ts ===
// interface Foo {
//     f: '[|foo|]' | 'bar'
// }
// const d: 'foo' = 'foo'
// declare const f: Foo
// f.f = 'foo'
// f.f = `foo`
=== 1 ===
// === /tests/cases/fourslash/renameStringLiteralOk.ts ===
// interface Foo {
//     f: 'foo' | 'bar'
// }
// const d: 'foo' = 'foo'
// declare const f: Foo
// f.f = '[|foo|]'
// f.f = `foo`
=== 2 ===
// === /tests/cases/fourslash/renameStringLiteralOk.ts ===
// interface Foo {
//     f: 'foo' | 'bar'
// }
// const d: 'foo' = 'foo'
// declare const f: Foo
// f.f = 'foo'
// f.f = `[|foo|]`


[
  {
    "textSpan": {
      "start": 24,
      "length": 3
    },
    "fileName": "/tests/cases/fourslash/renameStringLiteralOk.ts"
  },
  {
    "textSpan": {
      "start": 90,
      "length": 3
    },
    "fileName": "/tests/cases/fourslash/renameStringLiteralOk.ts"
  },
  {
    "textSpan": {
      "start": 102,
      "length": 3
    },
    "fileName": "/tests/cases/fourslash/renameStringLiteralOk.ts"
  }
]