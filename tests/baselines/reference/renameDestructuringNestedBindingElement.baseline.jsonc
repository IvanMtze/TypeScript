=== RenameOptions ===
{
 "findInStrings": false,
 "findInComments": false,
 "providePrefixAndSuffixTextForRename": true
}
/*====== /tests/cases/fourslash/renameDestructuringNestedBindingElement.ts ======*/

interface MultiRobot {
    name: string;
    skills: {
        [|RENAME|]: string;
        secondary: string;
    };
}
let multiRobots: MultiRobot[];
for (let { skills: {RENAME: primaryA, secondary: secondaryA } } of multiRobots) {
    console.log(primaryA);
}
for (let { skills: {RENAME: primary/*END SUFFIX*/, secondary } } of multiRobots) {
    console.log(primary);
}

=== 0 ===
// === /tests/cases/fourslash/renameDestructuringNestedBindingElement.ts ===
// interface MultiRobot {
//     name: string;
//     skills: {
//         [|primary|]: string;
//         secondary: string;
//     };
// }
// let multiRobots: MultiRobot[];
// for (let { skills: {primary: primaryA, secondary: secondaryA } } of multiRobots) {
//     console.log(primaryA);
// }
// for (let { skills: {primary, secondary } } of multiRobots) {
//     console.log(primary);
// }
=== ContextSpan ===
  // === /tests/cases/fourslash/renameDestructuringNestedBindingElement.ts ===
  // interface MultiRobot {
  //     name: string;
  //     skills: {
  //         [|primary: string;|]
  //         secondary: string;
  //     };
  // }
  // let multiRobots: MultiRobot[];
  // for (let { skills: {primary: primaryA, secondary: secondaryA } } of multiRobots) {
  //     console.log(primaryA);
  // }
  // for (let { skills: {primary, secondary } } of multiRobots) {
  //     console.log(primary);
  // }
=== 1 ===
// === /tests/cases/fourslash/renameDestructuringNestedBindingElement.ts ===
// interface MultiRobot {
//     name: string;
//     skills: {
//         primary: string;
//         secondary: string;
//     };
// }
// let multiRobots: MultiRobot[];
// for (let { skills: {[|primary|]: primaryA, secondary: secondaryA } } of multiRobots) {
//     console.log(primaryA);
// }
// for (let { skills: {primary, secondary } } of multiRobots) {
//     console.log(primary);
// }
=== ContextSpan ===
  // === /tests/cases/fourslash/renameDestructuringNestedBindingElement.ts ===
  // interface MultiRobot {
  //     name: string;
  //     skills: {
  //         primary: string;
  //         secondary: string;
  //     };
  // }
  // let multiRobots: MultiRobot[];
  // for ([|let { skills: {primary: primaryA, secondary: secondaryA } } of multiRobots|]) {
  //     console.log(primaryA);
  // }
  // for (let { skills: {primary, secondary } } of multiRobots) {
  //     console.log(primary);
  // }
=== 2 ===
// === /tests/cases/fourslash/renameDestructuringNestedBindingElement.ts ===
// interface MultiRobot {
//     name: string;
//     skills: {
//         primary: string;
//         secondary: string;
//     };
// }
// let multiRobots: MultiRobot[];
// for (let { skills: {primary: primaryA, secondary: secondaryA } } of multiRobots) {
//     console.log(primaryA);
// }
// for (let { skills: {[|primary|], secondary } } of multiRobots) {
//     console.log(primary);
// }
=== ContextSpan ===
  // === /tests/cases/fourslash/renameDestructuringNestedBindingElement.ts ===
  // interface MultiRobot {
  //     name: string;
  //     skills: {
  //         primary: string;
  //         secondary: string;
  //     };
  // }
  // let multiRobots: MultiRobot[];
  // for (let { skills: {primary: primaryA, secondary: secondaryA } } of multiRobots) {
  //     console.log(primaryA);
  // }
  // for ([|let { skills: {primary, secondary } } of multiRobots|]) {
  //     console.log(primary);
  // }


[
  {
    "textSpan": {
      "start": 63,
      "length": 7
    },
    "fileName": "/tests/cases/fourslash/renameDestructuringNestedBindingElement.ts",
    "contextSpan": {
      "start": 63,
      "length": 16
    }
  },
  {
    "textSpan": {
      "start": 167,
      "length": 7
    },
    "fileName": "/tests/cases/fourslash/renameDestructuringNestedBindingElement.ts",
    "contextSpan": {
      "start": 152,
      "length": 74
    }
  },
  {
    "textSpan": {
      "start": 279,
      "length": 7
    },
    "fileName": "/tests/cases/fourslash/renameDestructuringNestedBindingElement.ts",
    "contextSpan": {
      "start": 264,
      "length": 52
    },
    "suffixText": ": primary"
  }
]

=== RenameOptions ===
{
 "findInStrings": false,
 "findInComments": false,
 "providePrefixAndSuffixTextForRename": true
}
/*====== /tests/cases/fourslash/renameDestructuringNestedBindingElement.ts ======*/

interface MultiRobot {
    name: string;
    skills: {
        RENAME: string;
        secondary: string;
    };
}
let multiRobots: MultiRobot[];
for (let { skills: {[|RENAME|]: primaryA, secondary: secondaryA } } of multiRobots) {
    console.log(primaryA);
}
for (let { skills: {RENAME: primary/*END SUFFIX*/, secondary } } of multiRobots) {
    console.log(primary);
}

=== 0 ===
// === /tests/cases/fourslash/renameDestructuringNestedBindingElement.ts ===
// interface MultiRobot {
//     name: string;
//     skills: {
//         [|primary|]: string;
//         secondary: string;
//     };
// }
// let multiRobots: MultiRobot[];
// for (let { skills: {primary: primaryA, secondary: secondaryA } } of multiRobots) {
//     console.log(primaryA);
// }
// for (let { skills: {primary, secondary } } of multiRobots) {
//     console.log(primary);
// }
=== ContextSpan ===
  // === /tests/cases/fourslash/renameDestructuringNestedBindingElement.ts ===
  // interface MultiRobot {
  //     name: string;
  //     skills: {
  //         [|primary: string;|]
  //         secondary: string;
  //     };
  // }
  // let multiRobots: MultiRobot[];
  // for (let { skills: {primary: primaryA, secondary: secondaryA } } of multiRobots) {
  //     console.log(primaryA);
  // }
  // for (let { skills: {primary, secondary } } of multiRobots) {
  //     console.log(primary);
  // }
=== 1 ===
// === /tests/cases/fourslash/renameDestructuringNestedBindingElement.ts ===
// interface MultiRobot {
//     name: string;
//     skills: {
//         primary: string;
//         secondary: string;
//     };
// }
// let multiRobots: MultiRobot[];
// for (let { skills: {[|primary|]: primaryA, secondary: secondaryA } } of multiRobots) {
//     console.log(primaryA);
// }
// for (let { skills: {primary, secondary } } of multiRobots) {
//     console.log(primary);
// }
=== ContextSpan ===
  // === /tests/cases/fourslash/renameDestructuringNestedBindingElement.ts ===
  // interface MultiRobot {
  //     name: string;
  //     skills: {
  //         primary: string;
  //         secondary: string;
  //     };
  // }
  // let multiRobots: MultiRobot[];
  // for ([|let { skills: {primary: primaryA, secondary: secondaryA } } of multiRobots|]) {
  //     console.log(primaryA);
  // }
  // for (let { skills: {primary, secondary } } of multiRobots) {
  //     console.log(primary);
  // }
=== 2 ===
// === /tests/cases/fourslash/renameDestructuringNestedBindingElement.ts ===
// interface MultiRobot {
//     name: string;
//     skills: {
//         primary: string;
//         secondary: string;
//     };
// }
// let multiRobots: MultiRobot[];
// for (let { skills: {primary: primaryA, secondary: secondaryA } } of multiRobots) {
//     console.log(primaryA);
// }
// for (let { skills: {[|primary|], secondary } } of multiRobots) {
//     console.log(primary);
// }
=== ContextSpan ===
  // === /tests/cases/fourslash/renameDestructuringNestedBindingElement.ts ===
  // interface MultiRobot {
  //     name: string;
  //     skills: {
  //         primary: string;
  //         secondary: string;
  //     };
  // }
  // let multiRobots: MultiRobot[];
  // for (let { skills: {primary: primaryA, secondary: secondaryA } } of multiRobots) {
  //     console.log(primaryA);
  // }
  // for ([|let { skills: {primary, secondary } } of multiRobots|]) {
  //     console.log(primary);
  // }


[
  {
    "textSpan": {
      "start": 63,
      "length": 7
    },
    "fileName": "/tests/cases/fourslash/renameDestructuringNestedBindingElement.ts",
    "contextSpan": {
      "start": 63,
      "length": 16
    }
  },
  {
    "textSpan": {
      "start": 167,
      "length": 7
    },
    "fileName": "/tests/cases/fourslash/renameDestructuringNestedBindingElement.ts",
    "contextSpan": {
      "start": 152,
      "length": 74
    }
  },
  {
    "textSpan": {
      "start": 279,
      "length": 7
    },
    "fileName": "/tests/cases/fourslash/renameDestructuringNestedBindingElement.ts",
    "contextSpan": {
      "start": 264,
      "length": 52
    },
    "suffixText": ": primary"
  }
]

=== RenameOptions ===
{
 "findInStrings": false,
 "findInComments": false,
 "providePrefixAndSuffixTextForRename": true
}
/*====== /tests/cases/fourslash/renameDestructuringNestedBindingElement.ts ======*/

interface MultiRobot {
    name: string;
    skills: {
        primary: string;
        secondary: string;
    };
}
let multiRobots: MultiRobot[];
for (let { skills: {primary: primaryA, secondary: secondaryA } } of multiRobots) {
    console.log(primaryA);
}
for (let { skills: {/*START PREFIX*/primary: [|RENAME|], secondary } } of multiRobots) {
    console.log(RENAME);
}

=== 0 ===
// === /tests/cases/fourslash/renameDestructuringNestedBindingElement.ts ===
// interface MultiRobot {
//     name: string;
//     skills: {
//         primary: string;
//         secondary: string;
//     };
// }
// let multiRobots: MultiRobot[];
// for (let { skills: {primary: primaryA, secondary: secondaryA } } of multiRobots) {
//     console.log(primaryA);
// }
// for (let { skills: {[|primary|], secondary } } of multiRobots) {
//     console.log(primary);
// }
=== ContextSpan ===
  // === /tests/cases/fourslash/renameDestructuringNestedBindingElement.ts ===
  // interface MultiRobot {
  //     name: string;
  //     skills: {
  //         primary: string;
  //         secondary: string;
  //     };
  // }
  // let multiRobots: MultiRobot[];
  // for (let { skills: {primary: primaryA, secondary: secondaryA } } of multiRobots) {
  //     console.log(primaryA);
  // }
  // for ([|let { skills: {primary, secondary } } of multiRobots|]) {
  //     console.log(primary);
  // }
=== 1 ===
// === /tests/cases/fourslash/renameDestructuringNestedBindingElement.ts ===
// interface MultiRobot {
//     name: string;
//     skills: {
//         primary: string;
//         secondary: string;
//     };
// }
// let multiRobots: MultiRobot[];
// for (let { skills: {primary: primaryA, secondary: secondaryA } } of multiRobots) {
//     console.log(primaryA);
// }
// for (let { skills: {primary, secondary } } of multiRobots) {
//     console.log([|primary|]);
// }


[
  {
    "textSpan": {
      "start": 279,
      "length": 7
    },
    "fileName": "/tests/cases/fourslash/renameDestructuringNestedBindingElement.ts",
    "contextSpan": {
      "start": 264,
      "length": 52
    },
    "prefixText": "primary: "
  },
  {
    "textSpan": {
      "start": 336,
      "length": 7
    },
    "fileName": "/tests/cases/fourslash/renameDestructuringNestedBindingElement.ts"
  }
]

=== RenameOptions ===
{
 "findInStrings": false,
 "findInComments": false,
 "providePrefixAndSuffixTextForRename": true
}
/*====== /tests/cases/fourslash/renameDestructuringNestedBindingElement.ts ======*/

interface MultiRobot {
    name: string;
    skills: {
        primary: string;
        secondary: string;
    };
}
let multiRobots: MultiRobot[];
for (let { skills: {primary: primaryA, secondary: secondaryA } } of multiRobots) {
    console.log(primaryA);
}
for (let { skills: {/*START PREFIX*/primary: RENAME, secondary } } of multiRobots) {
    console.log([|RENAME|]);
}

=== 0 ===
// === /tests/cases/fourslash/renameDestructuringNestedBindingElement.ts ===
// interface MultiRobot {
//     name: string;
//     skills: {
//         primary: string;
//         secondary: string;
//     };
// }
// let multiRobots: MultiRobot[];
// for (let { skills: {primary: primaryA, secondary: secondaryA } } of multiRobots) {
//     console.log(primaryA);
// }
// for (let { skills: {[|primary|], secondary } } of multiRobots) {
//     console.log(primary);
// }
=== ContextSpan ===
  // === /tests/cases/fourslash/renameDestructuringNestedBindingElement.ts ===
  // interface MultiRobot {
  //     name: string;
  //     skills: {
  //         primary: string;
  //         secondary: string;
  //     };
  // }
  // let multiRobots: MultiRobot[];
  // for (let { skills: {primary: primaryA, secondary: secondaryA } } of multiRobots) {
  //     console.log(primaryA);
  // }
  // for ([|let { skills: {primary, secondary } } of multiRobots|]) {
  //     console.log(primary);
  // }
=== 1 ===
// === /tests/cases/fourslash/renameDestructuringNestedBindingElement.ts ===
// interface MultiRobot {
//     name: string;
//     skills: {
//         primary: string;
//         secondary: string;
//     };
// }
// let multiRobots: MultiRobot[];
// for (let { skills: {primary: primaryA, secondary: secondaryA } } of multiRobots) {
//     console.log(primaryA);
// }
// for (let { skills: {primary, secondary } } of multiRobots) {
//     console.log([|primary|]);
// }


[
  {
    "textSpan": {
      "start": 279,
      "length": 7
    },
    "fileName": "/tests/cases/fourslash/renameDestructuringNestedBindingElement.ts",
    "contextSpan": {
      "start": 264,
      "length": 52
    },
    "prefixText": "primary: "
  },
  {
    "textSpan": {
      "start": 336,
      "length": 7
    },
    "fileName": "/tests/cases/fourslash/renameDestructuringNestedBindingElement.ts"
  }
]