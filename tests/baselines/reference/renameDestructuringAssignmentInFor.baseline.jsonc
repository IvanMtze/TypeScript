// === /tests/cases/fourslash/renameDestructuringAssignmentInFor.ts ===
// interface I {
//     [|RENAME|]: number;
//     property2: string;
// }
// var elems: I[];
// 
// var p2: number, property1: number;
// for ({ RENAME: property1/*END SUFFIX*/ } = elems[0]; p2 < 100; p2++) {
//    p2 = property1++;
// }
// for ({ RENAME: p2 } = elems[0]; p2 < 100; p2++) {
// }

// === 0 ===
  // === /tests/cases/fourslash/renameDestructuringAssignmentInFor.ts ===
  // interface I {
  //     [|property1|]: number;
  //     property2: string;
  // }
  // var elems: I[];
  // 
  // var p2: number, property1: number;
  // for ({ property1 } = elems[0]; p2 < 100; p2++) {
  //    p2 = property1++;
  // }
  // for ({ property1: p2 } = elems[0]; p2 < 100; p2++) {
  // }
    // === ContextSpan ===
    // === /tests/cases/fourslash/renameDestructuringAssignmentInFor.ts ===
    // interface I {
    //     [|property1: number;|]
    //     property2: string;
    // }
    // var elems: I[];
    // 
    // var p2: number, property1: number;
    // for ({ property1 } = elems[0]; p2 < 100; p2++) {
    //    p2 = property1++;
    // }
    // for ({ property1: p2 } = elems[0]; p2 < 100; p2++) {
    // }
// === 1 ===
  // suffixText: ": property1"
  // === /tests/cases/fourslash/renameDestructuringAssignmentInFor.ts ===
  // interface I {
  //     property1: number;
  //     property2: string;
  // }
  // var elems: I[];
  // 
  // var p2: number, property1: number;
  // for ({ [|property1|] } = elems[0]; p2 < 100; p2++) {
  //    p2 = property1++;
  // }
  // for ({ property1: p2 } = elems[0]; p2 < 100; p2++) {
  // }
    // === ContextSpan ===
    // === /tests/cases/fourslash/renameDestructuringAssignmentInFor.ts ===
    // interface I {
    //     property1: number;
    //     property2: string;
    // }
    // var elems: I[];
    // 
    // var p2: number, property1: number;
    // for ([|{ property1 } = elems[0]|]; p2 < 100; p2++) {
    //    p2 = property1++;
    // }
    // for ({ property1: p2 } = elems[0]; p2 < 100; p2++) {
    // }
// === 2 ===
  // === /tests/cases/fourslash/renameDestructuringAssignmentInFor.ts ===
  // interface I {
  //     property1: number;
  //     property2: string;
  // }
  // var elems: I[];
  // 
  // var p2: number, property1: number;
  // for ({ property1 } = elems[0]; p2 < 100; p2++) {
  //    p2 = property1++;
  // }
  // for ({ [|property1|]: p2 } = elems[0]; p2 < 100; p2++) {
  // }
    // === ContextSpan ===
    // === /tests/cases/fourslash/renameDestructuringAssignmentInFor.ts ===
    // interface I {
    //     property1: number;
    //     property2: string;
    // }
    // var elems: I[];
    // 
    // var p2: number, property1: number;
    // for ({ property1 } = elems[0]; p2 < 100; p2++) {
    //    p2 = property1++;
    // }
    // for ([|{ property1: p2 } = elems[0]|]; p2 < 100; p2++) {
    // }


[
  {
    "textSpan": {
      "start": 18,
      "length": 9
    },
    "fileName": "/tests/cases/fourslash/renameDestructuringAssignmentInFor.ts",
    "contextSpan": {
      "start": 18,
      "length": 18
    }
  },
  {
    "textSpan": {
      "start": 121,
      "length": 9
    },
    "fileName": "/tests/cases/fourslash/renameDestructuringAssignmentInFor.ts",
    "contextSpan": {
      "start": 119,
      "length": 24
    },
    "suffixText": ": property1"
  },
  {
    "textSpan": {
      "start": 193,
      "length": 9
    },
    "fileName": "/tests/cases/fourslash/renameDestructuringAssignmentInFor.ts",
    "contextSpan": {
      "start": 191,
      "length": 28
    }
  }
]

// === /tests/cases/fourslash/renameDestructuringAssignmentInFor.ts ===
// interface I {
//     RENAME: number;
//     property2: string;
// }
// var elems: I[];
// 
// var p2: number, property1: number;
// for ({ RENAME: property1/*END SUFFIX*/ } = elems[0]; p2 < 100; p2++) {
//    p2 = property1++;
// }
// for ({ [|RENAME|]: p2 } = elems[0]; p2 < 100; p2++) {
// }

// === 0 ===
  // === /tests/cases/fourslash/renameDestructuringAssignmentInFor.ts ===
  // interface I {
  //     [|property1|]: number;
  //     property2: string;
  // }
  // var elems: I[];
  // 
  // var p2: number, property1: number;
  // for ({ property1 } = elems[0]; p2 < 100; p2++) {
  //    p2 = property1++;
  // }
  // for ({ property1: p2 } = elems[0]; p2 < 100; p2++) {
  // }
    // === ContextSpan ===
    // === /tests/cases/fourslash/renameDestructuringAssignmentInFor.ts ===
    // interface I {
    //     [|property1: number;|]
    //     property2: string;
    // }
    // var elems: I[];
    // 
    // var p2: number, property1: number;
    // for ({ property1 } = elems[0]; p2 < 100; p2++) {
    //    p2 = property1++;
    // }
    // for ({ property1: p2 } = elems[0]; p2 < 100; p2++) {
    // }
// === 1 ===
  // suffixText: ": property1"
  // === /tests/cases/fourslash/renameDestructuringAssignmentInFor.ts ===
  // interface I {
  //     property1: number;
  //     property2: string;
  // }
  // var elems: I[];
  // 
  // var p2: number, property1: number;
  // for ({ [|property1|] } = elems[0]; p2 < 100; p2++) {
  //    p2 = property1++;
  // }
  // for ({ property1: p2 } = elems[0]; p2 < 100; p2++) {
  // }
    // === ContextSpan ===
    // === /tests/cases/fourslash/renameDestructuringAssignmentInFor.ts ===
    // interface I {
    //     property1: number;
    //     property2: string;
    // }
    // var elems: I[];
    // 
    // var p2: number, property1: number;
    // for ([|{ property1 } = elems[0]|]; p2 < 100; p2++) {
    //    p2 = property1++;
    // }
    // for ({ property1: p2 } = elems[0]; p2 < 100; p2++) {
    // }
// === 2 ===
  // === /tests/cases/fourslash/renameDestructuringAssignmentInFor.ts ===
  // interface I {
  //     property1: number;
  //     property2: string;
  // }
  // var elems: I[];
  // 
  // var p2: number, property1: number;
  // for ({ property1 } = elems[0]; p2 < 100; p2++) {
  //    p2 = property1++;
  // }
  // for ({ [|property1|]: p2 } = elems[0]; p2 < 100; p2++) {
  // }
    // === ContextSpan ===
    // === /tests/cases/fourslash/renameDestructuringAssignmentInFor.ts ===
    // interface I {
    //     property1: number;
    //     property2: string;
    // }
    // var elems: I[];
    // 
    // var p2: number, property1: number;
    // for ({ property1 } = elems[0]; p2 < 100; p2++) {
    //    p2 = property1++;
    // }
    // for ([|{ property1: p2 } = elems[0]|]; p2 < 100; p2++) {
    // }


[
  {
    "textSpan": {
      "start": 18,
      "length": 9
    },
    "fileName": "/tests/cases/fourslash/renameDestructuringAssignmentInFor.ts",
    "contextSpan": {
      "start": 18,
      "length": 18
    }
  },
  {
    "textSpan": {
      "start": 121,
      "length": 9
    },
    "fileName": "/tests/cases/fourslash/renameDestructuringAssignmentInFor.ts",
    "contextSpan": {
      "start": 119,
      "length": 24
    },
    "suffixText": ": property1"
  },
  {
    "textSpan": {
      "start": 193,
      "length": 9
    },
    "fileName": "/tests/cases/fourslash/renameDestructuringAssignmentInFor.ts",
    "contextSpan": {
      "start": 191,
      "length": 28
    }
  }
]

// === /tests/cases/fourslash/renameDestructuringAssignmentInFor.ts ===
// interface I {
//     property1: number;
//     property2: string;
// }
// var elems: I[];
// 
// var p2: number, [|RENAME|]: number;
// for ({ /*START PREFIX*/property1: RENAME } = elems[0]; p2 < 100; p2++) {
//    p2 = RENAME++;
// }
// for ({ property1: p2 } = elems[0]; p2 < 100; p2++) {
// }

// === 0 ===
  // === /tests/cases/fourslash/renameDestructuringAssignmentInFor.ts ===
  // interface I {
  //     property1: number;
  //     property2: string;
  // }
  // var elems: I[];
  // 
  // var p2: number, [|property1|]: number;
  // for ({ property1 } = elems[0]; p2 < 100; p2++) {
  //    p2 = property1++;
  // }
  // for ({ property1: p2 } = elems[0]; p2 < 100; p2++) {
  // }
    // === ContextSpan ===
    // === /tests/cases/fourslash/renameDestructuringAssignmentInFor.ts ===
    // interface I {
    //     property1: number;
    //     property2: string;
    // }
    // var elems: I[];
    // 
    // var p2: number, [|property1: number|];
    // for ({ property1 } = elems[0]; p2 < 100; p2++) {
    //    p2 = property1++;
    // }
    // for ({ property1: p2 } = elems[0]; p2 < 100; p2++) {
    // }
// === 1 ===
  // prefixText: "property1: "
  // === /tests/cases/fourslash/renameDestructuringAssignmentInFor.ts ===
  // interface I {
  //     property1: number;
  //     property2: string;
  // }
  // var elems: I[];
  // 
  // var p2: number, property1: number;
  // for ({ [|property1|] } = elems[0]; p2 < 100; p2++) {
  //    p2 = property1++;
  // }
  // for ({ property1: p2 } = elems[0]; p2 < 100; p2++) {
  // }
    // === ContextSpan ===
    // === /tests/cases/fourslash/renameDestructuringAssignmentInFor.ts ===
    // interface I {
    //     property1: number;
    //     property2: string;
    // }
    // var elems: I[];
    // 
    // var p2: number, property1: number;
    // for ([|{ property1 } = elems[0]|]; p2 < 100; p2++) {
    //    p2 = property1++;
    // }
    // for ({ property1: p2 } = elems[0]; p2 < 100; p2++) {
    // }
// === 2 ===
  // === /tests/cases/fourslash/renameDestructuringAssignmentInFor.ts ===
  // interface I {
  //     property1: number;
  //     property2: string;
  // }
  // var elems: I[];
  // 
  // var p2: number, property1: number;
  // for ({ property1 } = elems[0]; p2 < 100; p2++) {
  //    p2 = [|property1|]++;
  // }
  // for ({ property1: p2 } = elems[0]; p2 < 100; p2++) {
  // }


[
  {
    "textSpan": {
      "start": 95,
      "length": 9
    },
    "fileName": "/tests/cases/fourslash/renameDestructuringAssignmentInFor.ts",
    "contextSpan": {
      "start": 95,
      "length": 17
    }
  },
  {
    "textSpan": {
      "start": 121,
      "length": 9
    },
    "fileName": "/tests/cases/fourslash/renameDestructuringAssignmentInFor.ts",
    "contextSpan": {
      "start": 119,
      "length": 24
    },
    "prefixText": "property1: "
  },
  {
    "textSpan": {
      "start": 171,
      "length": 9
    },
    "fileName": "/tests/cases/fourslash/renameDestructuringAssignmentInFor.ts"
  }
]

// === /tests/cases/fourslash/renameDestructuringAssignmentInFor.ts ===
// interface I {
//     property1: number;
//     property2: string;
// }
// var elems: I[];
// 
// var p2: number, RENAME: number;
// for ({ /*START PREFIX*/property1: [|RENAME|] } = elems[0]; p2 < 100; p2++) {
//    p2 = RENAME++;
// }
// for ({ property1: p2 } = elems[0]; p2 < 100; p2++) {
// }

// === 0 ===
  // === /tests/cases/fourslash/renameDestructuringAssignmentInFor.ts ===
  // interface I {
  //     property1: number;
  //     property2: string;
  // }
  // var elems: I[];
  // 
  // var p2: number, [|property1|]: number;
  // for ({ property1 } = elems[0]; p2 < 100; p2++) {
  //    p2 = property1++;
  // }
  // for ({ property1: p2 } = elems[0]; p2 < 100; p2++) {
  // }
    // === ContextSpan ===
    // === /tests/cases/fourslash/renameDestructuringAssignmentInFor.ts ===
    // interface I {
    //     property1: number;
    //     property2: string;
    // }
    // var elems: I[];
    // 
    // var p2: number, [|property1: number|];
    // for ({ property1 } = elems[0]; p2 < 100; p2++) {
    //    p2 = property1++;
    // }
    // for ({ property1: p2 } = elems[0]; p2 < 100; p2++) {
    // }
// === 1 ===
  // prefixText: "property1: "
  // === /tests/cases/fourslash/renameDestructuringAssignmentInFor.ts ===
  // interface I {
  //     property1: number;
  //     property2: string;
  // }
  // var elems: I[];
  // 
  // var p2: number, property1: number;
  // for ({ [|property1|] } = elems[0]; p2 < 100; p2++) {
  //    p2 = property1++;
  // }
  // for ({ property1: p2 } = elems[0]; p2 < 100; p2++) {
  // }
    // === ContextSpan ===
    // === /tests/cases/fourslash/renameDestructuringAssignmentInFor.ts ===
    // interface I {
    //     property1: number;
    //     property2: string;
    // }
    // var elems: I[];
    // 
    // var p2: number, property1: number;
    // for ([|{ property1 } = elems[0]|]; p2 < 100; p2++) {
    //    p2 = property1++;
    // }
    // for ({ property1: p2 } = elems[0]; p2 < 100; p2++) {
    // }
// === 2 ===
  // === /tests/cases/fourslash/renameDestructuringAssignmentInFor.ts ===
  // interface I {
  //     property1: number;
  //     property2: string;
  // }
  // var elems: I[];
  // 
  // var p2: number, property1: number;
  // for ({ property1 } = elems[0]; p2 < 100; p2++) {
  //    p2 = [|property1|]++;
  // }
  // for ({ property1: p2 } = elems[0]; p2 < 100; p2++) {
  // }


[
  {
    "textSpan": {
      "start": 95,
      "length": 9
    },
    "fileName": "/tests/cases/fourslash/renameDestructuringAssignmentInFor.ts",
    "contextSpan": {
      "start": 95,
      "length": 17
    }
  },
  {
    "textSpan": {
      "start": 121,
      "length": 9
    },
    "fileName": "/tests/cases/fourslash/renameDestructuringAssignmentInFor.ts",
    "contextSpan": {
      "start": 119,
      "length": 24
    },
    "prefixText": "property1: "
  },
  {
    "textSpan": {
      "start": 171,
      "length": 9
    },
    "fileName": "/tests/cases/fourslash/renameDestructuringAssignmentInFor.ts"
  }
]

// === /tests/cases/fourslash/renameDestructuringAssignmentInFor.ts ===
// interface I {
//     property1: number;
//     property2: string;
// }
// var elems: I[];
// 
// var p2: number, RENAME: number;
// for ({ /*START PREFIX*/property1: RENAME } = elems[0]; p2 < 100; p2++) {
//    p2 = [|RENAME|]++;
// }
// for ({ property1: p2 } = elems[0]; p2 < 100; p2++) {
// }

// === 0 ===
  // === /tests/cases/fourslash/renameDestructuringAssignmentInFor.ts ===
  // interface I {
  //     property1: number;
  //     property2: string;
  // }
  // var elems: I[];
  // 
  // var p2: number, [|property1|]: number;
  // for ({ property1 } = elems[0]; p2 < 100; p2++) {
  //    p2 = property1++;
  // }
  // for ({ property1: p2 } = elems[0]; p2 < 100; p2++) {
  // }
    // === ContextSpan ===
    // === /tests/cases/fourslash/renameDestructuringAssignmentInFor.ts ===
    // interface I {
    //     property1: number;
    //     property2: string;
    // }
    // var elems: I[];
    // 
    // var p2: number, [|property1: number|];
    // for ({ property1 } = elems[0]; p2 < 100; p2++) {
    //    p2 = property1++;
    // }
    // for ({ property1: p2 } = elems[0]; p2 < 100; p2++) {
    // }
// === 1 ===
  // prefixText: "property1: "
  // === /tests/cases/fourslash/renameDestructuringAssignmentInFor.ts ===
  // interface I {
  //     property1: number;
  //     property2: string;
  // }
  // var elems: I[];
  // 
  // var p2: number, property1: number;
  // for ({ [|property1|] } = elems[0]; p2 < 100; p2++) {
  //    p2 = property1++;
  // }
  // for ({ property1: p2 } = elems[0]; p2 < 100; p2++) {
  // }
    // === ContextSpan ===
    // === /tests/cases/fourslash/renameDestructuringAssignmentInFor.ts ===
    // interface I {
    //     property1: number;
    //     property2: string;
    // }
    // var elems: I[];
    // 
    // var p2: number, property1: number;
    // for ([|{ property1 } = elems[0]|]; p2 < 100; p2++) {
    //    p2 = property1++;
    // }
    // for ({ property1: p2 } = elems[0]; p2 < 100; p2++) {
    // }
// === 2 ===
  // === /tests/cases/fourslash/renameDestructuringAssignmentInFor.ts ===
  // interface I {
  //     property1: number;
  //     property2: string;
  // }
  // var elems: I[];
  // 
  // var p2: number, property1: number;
  // for ({ property1 } = elems[0]; p2 < 100; p2++) {
  //    p2 = [|property1|]++;
  // }
  // for ({ property1: p2 } = elems[0]; p2 < 100; p2++) {
  // }


[
  {
    "textSpan": {
      "start": 95,
      "length": 9
    },
    "fileName": "/tests/cases/fourslash/renameDestructuringAssignmentInFor.ts",
    "contextSpan": {
      "start": 95,
      "length": 17
    }
  },
  {
    "textSpan": {
      "start": 121,
      "length": 9
    },
    "fileName": "/tests/cases/fourslash/renameDestructuringAssignmentInFor.ts",
    "contextSpan": {
      "start": 119,
      "length": 24
    },
    "prefixText": "property1: "
  },
  {
    "textSpan": {
      "start": 171,
      "length": 9
    },
    "fileName": "/tests/cases/fourslash/renameDestructuringAssignmentInFor.ts"
  }
]