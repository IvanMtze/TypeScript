// === RenameOptions ===
{
 "findInStrings": false,
 "findInComments": false,
 "providePrefixAndSuffixTextForRename": true
}
// === /tests/cases/fourslash/renamePropertyAccessExpressionHeritageClause.ts ===
// class B {}
// function foo() {
//     return {[|RENAME|]: B};
// }
// class C extends (foo()).RENAME {}
// class C1 extends foo().RENAME {}

// === 0 ===
  // === /tests/cases/fourslash/renamePropertyAccessExpressionHeritageClause.ts ===
  // class B {}
  // function foo() {
  //     return {[|B|]: B};
  // }
  // class C extends (foo()).B {}
  // class C1 extends foo().B {}
    // === ContextSpan ===
    // === /tests/cases/fourslash/renamePropertyAccessExpressionHeritageClause.ts ===
    // class B {}
    // function foo() {
    //     return {[|B: B|]};
    // }
    // class C extends (foo()).B {}
    // class C1 extends foo().B {}
// === 1 ===
  // === /tests/cases/fourslash/renamePropertyAccessExpressionHeritageClause.ts ===
  // class B {}
  // function foo() {
  //     return {B: B};
  // }
  // class C extends (foo()).[|B|] {}
  // class C1 extends foo().B {}
// === 2 ===
  // === /tests/cases/fourslash/renamePropertyAccessExpressionHeritageClause.ts ===
  // class B {}
  // function foo() {
  //     return {B: B};
  // }
  // class C extends (foo()).B {}
  // class C1 extends foo().[|B|] {}


[
  {
    "textSpan": {
      "start": 40,
      "length": 1
    },
    "fileName": "/tests/cases/fourslash/renamePropertyAccessExpressionHeritageClause.ts",
    "contextSpan": {
      "start": 40,
      "length": 4
    }
  },
  {
    "textSpan": {
      "start": 73,
      "length": 1
    },
    "fileName": "/tests/cases/fourslash/renamePropertyAccessExpressionHeritageClause.ts"
  },
  {
    "textSpan": {
      "start": 101,
      "length": 1
    },
    "fileName": "/tests/cases/fourslash/renamePropertyAccessExpressionHeritageClause.ts"
  }
]

// === RenameOptions ===
{
 "findInStrings": false,
 "findInComments": false,
 "providePrefixAndSuffixTextForRename": true
}
// === /tests/cases/fourslash/renamePropertyAccessExpressionHeritageClause.ts ===
// class B {}
// function foo() {
//     return {RENAME: B};
// }
// class C extends (foo()).[|RENAME|] {}
// class C1 extends foo().RENAME {}

// === 0 ===
  // === /tests/cases/fourslash/renamePropertyAccessExpressionHeritageClause.ts ===
  // class B {}
  // function foo() {
  //     return {[|B|]: B};
  // }
  // class C extends (foo()).B {}
  // class C1 extends foo().B {}
    // === ContextSpan ===
    // === /tests/cases/fourslash/renamePropertyAccessExpressionHeritageClause.ts ===
    // class B {}
    // function foo() {
    //     return {[|B: B|]};
    // }
    // class C extends (foo()).B {}
    // class C1 extends foo().B {}
// === 1 ===
  // === /tests/cases/fourslash/renamePropertyAccessExpressionHeritageClause.ts ===
  // class B {}
  // function foo() {
  //     return {B: B};
  // }
  // class C extends (foo()).[|B|] {}
  // class C1 extends foo().B {}
// === 2 ===
  // === /tests/cases/fourslash/renamePropertyAccessExpressionHeritageClause.ts ===
  // class B {}
  // function foo() {
  //     return {B: B};
  // }
  // class C extends (foo()).B {}
  // class C1 extends foo().[|B|] {}


[
  {
    "textSpan": {
      "start": 40,
      "length": 1
    },
    "fileName": "/tests/cases/fourslash/renamePropertyAccessExpressionHeritageClause.ts",
    "contextSpan": {
      "start": 40,
      "length": 4
    }
  },
  {
    "textSpan": {
      "start": 73,
      "length": 1
    },
    "fileName": "/tests/cases/fourslash/renamePropertyAccessExpressionHeritageClause.ts"
  },
  {
    "textSpan": {
      "start": 101,
      "length": 1
    },
    "fileName": "/tests/cases/fourslash/renamePropertyAccessExpressionHeritageClause.ts"
  }
]

// === RenameOptions ===
{
 "findInStrings": false,
 "findInComments": false,
 "providePrefixAndSuffixTextForRename": true
}
// === /tests/cases/fourslash/renamePropertyAccessExpressionHeritageClause.ts ===
// class B {}
// function foo() {
//     return {RENAME: B};
// }
// class C extends (foo()).RENAME {}
// class C1 extends foo().[|RENAME|] {}

// === 0 ===
  // === /tests/cases/fourslash/renamePropertyAccessExpressionHeritageClause.ts ===
  // class B {}
  // function foo() {
  //     return {[|B|]: B};
  // }
  // class C extends (foo()).B {}
  // class C1 extends foo().B {}
    // === ContextSpan ===
    // === /tests/cases/fourslash/renamePropertyAccessExpressionHeritageClause.ts ===
    // class B {}
    // function foo() {
    //     return {[|B: B|]};
    // }
    // class C extends (foo()).B {}
    // class C1 extends foo().B {}
// === 1 ===
  // === /tests/cases/fourslash/renamePropertyAccessExpressionHeritageClause.ts ===
  // class B {}
  // function foo() {
  //     return {B: B};
  // }
  // class C extends (foo()).[|B|] {}
  // class C1 extends foo().B {}
// === 2 ===
  // === /tests/cases/fourslash/renamePropertyAccessExpressionHeritageClause.ts ===
  // class B {}
  // function foo() {
  //     return {B: B};
  // }
  // class C extends (foo()).B {}
  // class C1 extends foo().[|B|] {}


[
  {
    "textSpan": {
      "start": 40,
      "length": 1
    },
    "fileName": "/tests/cases/fourslash/renamePropertyAccessExpressionHeritageClause.ts",
    "contextSpan": {
      "start": 40,
      "length": 4
    }
  },
  {
    "textSpan": {
      "start": 73,
      "length": 1
    },
    "fileName": "/tests/cases/fourslash/renamePropertyAccessExpressionHeritageClause.ts"
  },
  {
    "textSpan": {
      "start": 101,
      "length": 1
    },
    "fileName": "/tests/cases/fourslash/renamePropertyAccessExpressionHeritageClause.ts"
  }
]